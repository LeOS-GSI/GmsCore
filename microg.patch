diff --git a/README.md b/README.md
index ffcefc7b..f9136e05 100644
--- a/README.md
+++ b/README.md
@@ -9,7 +9,7 @@ microG GmsCore is a FLOSS (Free/Libre Open Source Software) framework to allow a
 
 License
 -------
-    Copyright 2013-2021 microG Project Team
+    Copyright 2013-2022 microG Project Team
 
     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
diff --git a/build.gradle b/build.gradle
index aa33fe5d..2b6402df 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,42 +1,41 @@
 /*
- * SPDX-FileCopyrightText: 2013, microG Project Team
+ * SPDX-FileCopyrightText: 2013 microG Project Team
  * SPDX-License-Identifier: Apache-2.0
  */
 
 buildscript {
     ext.cronetVersion = '91.0.4472.120.1'
-    ext.nlpVersion = '2.0-alpha6'
-    ext.remoteDroidGuardVersion = '0.1.2'
+    ext.nlpVersion = '2.0-alpha8'
     ext.safeParcelVersion = '1.7.0'
     ext.wearableVersion = '0.1.1'
 
-    ext.kotlinVersion = '1.4.32'
-    ext.coroutineVersion = '1.3.8'
+    ext.kotlinVersion = '1.6.10'
+    ext.coroutineVersion = '1.5.2'
 
-    ext.annotationVersion = '1.2.0'
-    ext.appcompatVersion = '1.2.0'
-    ext.coreVersion = '1.3.0'
-    ext.fragmentVersion = '1.2.5'
-    ext.lifecycleVersion = '2.3.1'
-    ext.mediarouterVersion = '1.2.2'
+    ext.annotationVersion = '1.3.0'
+    ext.appcompatVersion = '1.4.1'
+    ext.coreVersion = '1.7.0'
+    ext.fragmentVersion = '1.4.0'
+    ext.lifecycleVersion = '2.4.0'
+    ext.loaderVersion = '1.1.0'
+    ext.mediarouterVersion = '1.2.5'
     ext.multidexVersion = '2.0.1'
     ext.navigationVersion = '2.3.5'
     ext.preferenceVersion = '1.1.1'
-    ext.recyclerviewVersion = '1.1.0'
+    ext.recyclerviewVersion = '1.2.0'
     ext.webkitVersion = '1.4.0'
 
-    ext.supportLibraryVersion = '28.0.0'
     ext.slf4jVersion = '1.7.25'
-    ext.volleyVersion = '1.2.0'
+    ext.volleyVersion = '1.2.1'
     ext.wireVersion = '3.2.2'
 
-    ext.androidBuildGradleVersion = '4.1.0'
+    ext.androidBuildGradleVersion = '7.0.4'
 
     ext.androidBuildVersionTools = '30.0.2'
 
     ext.androidMinSdk = 14
     ext.androidTargetSdk = 29
-    ext.androidCompileSdk = 30
+    ext.androidCompileSdk = 31
 
     repositories {
         jcenter()
@@ -59,7 +58,7 @@ def execResult(...args) {
     return stdout.toString().trim()
 }
 
-def gmsVersion = "21.26.58"
+def gmsVersion = "21.48.16"
 def gmsVersionCode = Integer.parseInt(gmsVersion.replaceAll('\\.', ''))
 def gitVersionBase = execResult('git', 'describe', '--tags', '--abbrev=0', '--match=v[0-9]*').substring(1)
 def gitCommitCount = Integer.parseInt(execResult('git', 'rev-list', '--count', "v$gitVersionBase..HEAD"))
diff --git a/firebase-auth-core/src/main/AndroidManifest.xml b/firebase-auth-core/src/main/AndroidManifest.xml
index 58bbbf36..d3507793 100644
--- a/firebase-auth-core/src/main/AndroidManifest.xml
+++ b/firebase-auth-core/src/main/AndroidManifest.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <!--
-  ~ SPDX-FileCopyrightText: 2021, microG Project Team /LeOS
+  ~ SPDX-FileCopyrightText: 2020, microG Project Team
   ~ SPDX-License-Identifier: Apache-2.0
   -->
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
diff --git a/firebase-auth-core/src/main/kotlin/org/microg/gms/firebase/auth/ReCaptchaActivity.kt b/firebase-auth-core/src/main/kotlin/org/microg/gms/firebase/auth/ReCaptchaActivity.kt
index 784d4298..18554037 100644
--- a/firebase-auth-core/src/main/kotlin/org/microg/gms/firebase/auth/ReCaptchaActivity.kt
+++ b/firebase-auth-core/src/main/kotlin/org/microg/gms/firebase/auth/ReCaptchaActivity.kt
@@ -18,6 +18,8 @@ import android.webkit.WebSettings
 import android.webkit.WebView
 import androidx.appcompat.app.AppCompatActivity
 import org.microg.gms.firebase.auth.core.R
+import org.microg.gms.profile.Build
+import org.microg.gms.profile.ProfileManager
 import kotlin.coroutines.resume
 import kotlin.coroutines.resumeWithException
 import kotlin.coroutines.suspendCoroutine
@@ -47,6 +49,8 @@ class ReCaptchaActivity : AppCompatActivity() {
         settings.setSupportZoom(false)
         settings.displayZoomControls = false
         settings.cacheMode = WebSettings.LOAD_NO_CACHE
+        ProfileManager.ensureInitialized(this)
+        settings.userAgentString = Build.generateWebViewUserAgentString(settings.userAgentString)
         view.addJavascriptInterface(object : Any() {
             @JavascriptInterface
             fun onReCaptchaToken(token: String) {
diff --git a/firebase-auth-core/src/main/kotlin/org/microg/gms/firebase/auth/ReCaptchaOverlay.kt b/firebase-auth-core/src/main/kotlin/org/microg/gms/firebase/auth/ReCaptchaOverlay.kt
index 5af19c68..03da115c 100644
--- a/firebase-auth-core/src/main/kotlin/org/microg/gms/firebase/auth/ReCaptchaOverlay.kt
+++ b/firebase-auth-core/src/main/kotlin/org/microg/gms/firebase/auth/ReCaptchaOverlay.kt
@@ -7,7 +7,6 @@ package org.microg.gms.firebase.auth
 
 import android.content.Context
 import android.graphics.PixelFormat
-import android.os.Build
 import android.provider.Settings
 import android.util.DisplayMetrics
 import android.util.Log
@@ -17,6 +16,8 @@ import android.webkit.WebSettings
 import android.webkit.WebView
 import android.widget.FrameLayout
 import org.microg.gms.firebase.auth.core.R
+import org.microg.gms.profile.Build
+import org.microg.gms.profile.ProfileManager
 import kotlin.coroutines.Continuation
 import kotlin.coroutines.resume
 import kotlin.coroutines.resumeWithException
@@ -32,7 +33,7 @@ class ReCaptchaOverlay(val context: Context, val apiKey: String, val hostname: S
     var container: View? = null
 
     private fun show() {
-        val layoutParamsType = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+        val layoutParamsType = if (android.os.Build.VERSION.SDK_INT >= 26) {
             WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY
         } else {
             WindowManager.LayoutParams.TYPE_SYSTEM_ALERT
@@ -80,6 +81,8 @@ class ReCaptchaOverlay(val context: Context, val apiKey: String, val hostname: S
             settings.setSupportZoom(false)
             settings.displayZoomControls = false
             settings.cacheMode = WebSettings.LOAD_NO_CACHE
+            ProfileManager.ensureInitialized(context)
+            settings.userAgentString = Build.generateWebViewUserAgentString(settings.userAgentString)
             view.addJavascriptInterface(object : Any() {
                 @JavascriptInterface
                 fun onReCaptchaToken(token: String) {
@@ -110,7 +113,7 @@ class ReCaptchaOverlay(val context: Context, val apiKey: String, val hostname: S
     }
 
     companion object {
-        fun isSupported(context: Context): Boolean = Build.VERSION.SDK_INT < Build.VERSION_CODES.M || Settings.canDrawOverlays(context)
+        fun isSupported(context: Context): Boolean = android.os.Build.VERSION.SDK_INT < 23 || Settings.canDrawOverlays(context)
 
         suspend fun awaitToken(context: Context, apiKey: String, hostname: String? = null) = suspendCoroutine<String> { continuation ->
             ReCaptchaOverlay(context, apiKey, hostname ?: "localhost:5000", continuation).show()
diff --git a/firebase-dynamic-links-api/build.gradle b/firebase-dynamic-links-api/build.gradle
index 32edbc9b..7cb47747 100644
--- a/firebase-dynamic-links-api/build.gradle
+++ b/firebase-dynamic-links-api/build.gradle
@@ -1,49 +1,35 @@
 /*
- * Copyright 2019 e Foundation
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * SPDX-FileCopyrightText: 2019, e Foundation
+ * SPDX-FileCopyrightText: 2020, microG Project Team
+ * SPDX-License-Identifier: Apache-2.0
  */
 
 apply plugin: 'com.android.library'
-
-String getMyVersionName() {
-    def stdout = new ByteArrayOutputStream()
-    if (rootProject.file("gradlew").exists())
-        exec { commandLine 'git', 'describe', '--tags', '--always', '--dirty'; standardOutput = stdout }
-    else // automatic build system, don't tag dirty
-        exec { commandLine 'git', 'describe', '--tags', '--always'; standardOutput = stdout }
-    return stdout.toString().trim().substring(1)
-}
-
-group = 'org.microg'
-version = getMyVersionName()
+apply plugin: 'maven-publish'
+apply plugin: 'signing'
 
 android {
-    compileSdkVersion androidCompileSdk()
+    compileSdkVersion androidCompileSdk
     buildToolsVersion "$androidBuildVersionTools"
 
     defaultConfig {
-        versionName getMyVersionName()
-        minSdkVersion androidMinSdk()
-        targetSdkVersion androidTargetSdk()
+        versionName version
+        minSdkVersion androidMinSdk
+        targetSdkVersion androidTargetSdk
     }
 
     compileOptions {
-        sourceCompatibility JavaVersion.VERSION_1_8
-        targetCompatibility JavaVersion.VERSION_1_8
+        sourceCompatibility = 1.8
+        targetCompatibility = 1.8
     }
 }
 
 dependencies {
     api project(':play-services-basement')
+    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
 }
+
+apply from: '../gradle/publish-android.gradle'
+
+description = 'microG API for firebase-dynamic-links'
+
diff --git a/firebase-dynamic-links-api/src/main/aidl/com/google/firebase/dynamiclinks/internal/DynamicLinkData.aidl b/firebase-dynamic-links-api/src/main/aidl/com/google/firebase/dynamiclinks/internal/DynamicLinkData.aidl
index 5862178a..978e72cc 100644
--- a/firebase-dynamic-links-api/src/main/aidl/com/google/firebase/dynamiclinks/internal/DynamicLinkData.aidl
+++ b/firebase-dynamic-links-api/src/main/aidl/com/google/firebase/dynamiclinks/internal/DynamicLinkData.aidl
@@ -1,3 +1,10 @@
+/*
+ * SPDX-FileCopyrightText: 2019, e Foundation
+ * SPDX-FileCopyrightText: 2021, Google LLC
+ * SPDX-FileCopyrightText: 2021, microG Project Team
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
 package com.google.firebase.dynamiclinks.internal;
 
-parcelable DynamicLinkData;
\ No newline at end of file
+parcelable DynamicLinkData;
diff --git a/firebase-dynamic-links-api/src/main/aidl/com/google/firebase/dynamiclinks/internal/IDynamicLinksCallbacks.aidl b/firebase-dynamic-links-api/src/main/aidl/com/google/firebase/dynamiclinks/internal/IDynamicLinksCallbacks.aidl
index 9f9915ff..d13b9f28 100644
--- a/firebase-dynamic-links-api/src/main/aidl/com/google/firebase/dynamiclinks/internal/IDynamicLinksCallbacks.aidl
+++ b/firebase-dynamic-links-api/src/main/aidl/com/google/firebase/dynamiclinks/internal/IDynamicLinksCallbacks.aidl
@@ -1,12 +1,17 @@
-package com.google.firebase.dynamiclinks.internal;
-
+/*
+ * SPDX-FileCopyrightText: 2019, e Foundation
+ * SPDX-FileCopyrightText: 2021, Google LLC
+ * SPDX-FileCopyrightText: 2021, microG Project Team
+ * SPDX-License-Identifier: Apache-2.0
+ */
 
-import com.google.firebase.dynamiclinks.internal.DynamicLinkData;
-import com.google.firebase.dynamiclinks.internal.ShortDynamicLink;
+package com.google.firebase.dynamiclinks.internal;
 
 import com.google.android.gms.common.api.Status;
+import com.google.firebase.dynamiclinks.internal.DynamicLinkData;
+import com.google.firebase.dynamiclinks.internal.ShortDynamicLinkImpl;
 
 interface IDynamicLinksCallbacks {
     void onStatusDynamicLinkData(in Status status, in DynamicLinkData dldata) = 0;
-    void onStatusShortDynamicLink(in Status status, in ShortDynamicLink sdlink) = 1;
+    void onStatusShortDynamicLink(in Status status, in ShortDynamicLinkImpl sdlink) = 1;
 }
diff --git a/firebase-dynamic-links-api/src/main/aidl/com/google/firebase/dynamiclinks/internal/IDynamicLinksService.aidl b/firebase-dynamic-links-api/src/main/aidl/com/google/firebase/dynamiclinks/internal/IDynamicLinksService.aidl
index 57f083f5..3afdf705 100644
--- a/firebase-dynamic-links-api/src/main/aidl/com/google/firebase/dynamiclinks/internal/IDynamicLinksService.aidl
+++ b/firebase-dynamic-links-api/src/main/aidl/com/google/firebase/dynamiclinks/internal/IDynamicLinksService.aidl
@@ -1,12 +1,16 @@
-package com.google.firebase.dynamiclinks.internal;
+/*
+ * SPDX-FileCopyrightText: 2019, e Foundation
+ * SPDX-FileCopyrightText: 2021, Google LLC
+ * SPDX-FileCopyrightText: 2021, microG Project Team
+ * SPDX-License-Identifier: Apache-2.0
+ */
 
+package com.google.firebase.dynamiclinks.internal;
 
 import com.google.firebase.dynamiclinks.internal.IDynamicLinksCallbacks;
-
 import android.os.Bundle;
 
-
 interface IDynamicLinksService {
-    void getInitialLink(IDynamicLinksCallbacks callback, String var2) = 0;
-    void func2(IDynamicLinksCallbacks callback, in Bundle var2) = 1;
+    void getInitialLink(IDynamicLinksCallbacks callback, String link) = 0;
+    void createShortDynamicLink(IDynamicLinksCallbacks callback, in Bundle extras) = 1;
 }
diff --git a/firebase-dynamic-links-api/src/main/aidl/com/google/firebase/dynamiclinks/internal/ShortDynamicLink.aidl b/firebase-dynamic-links-api/src/main/aidl/com/google/firebase/dynamiclinks/internal/ShortDynamicLink.aidl
deleted file mode 100644
index f4852a03..00000000
--- a/firebase-dynamic-links-api/src/main/aidl/com/google/firebase/dynamiclinks/internal/ShortDynamicLink.aidl
+++ /dev/null
@@ -1,3 +0,0 @@
-package com.google.firebase.dynamiclinks.internal;
-
-parcelable ShortDynamicLink;
\ No newline at end of file
diff --git a/firebase-dynamic-links-api/src/main/aidl/com/google/firebase/dynamiclinks/internal/Warning.aidl b/firebase-dynamic-links-api/src/main/aidl/com/google/firebase/dynamiclinks/internal/Warning.aidl
deleted file mode 100644
index 4331c92a..00000000
--- a/firebase-dynamic-links-api/src/main/aidl/com/google/firebase/dynamiclinks/internal/Warning.aidl
+++ /dev/null
@@ -1,3 +0,0 @@
-package com.google.firebase.dynamiclinks.internal;
-
-parcelable Warning;
\ No newline at end of file
diff --git a/firebase-dynamic-links-api/src/main/java/com/google/firebase/dynamiclinks/internal/DynamicLinkData.java b/firebase-dynamic-links-api/src/main/java/com/google/firebase/dynamiclinks/internal/DynamicLinkData.java
index 02270cd1..6e60b362 100644
--- a/firebase-dynamic-links-api/src/main/java/com/google/firebase/dynamiclinks/internal/DynamicLinkData.java
+++ b/firebase-dynamic-links-api/src/main/java/com/google/firebase/dynamiclinks/internal/DynamicLinkData.java
@@ -1,57 +1,45 @@
 /*
- * Copyright (C) 2019 e Foundation
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * SPDX-FileCopyrightText: 2019, e Foundation
+ * SPDX-FileCopyrightText: 2021, Google LLC
+ * SPDX-FileCopyrightText: 2021, microG Project Team
+ * SPDX-License-Identifier: Apache-2.0
  */
 
 package com.google.firebase.dynamiclinks.internal;
 
-
 import org.microg.safeparcel.AutoSafeParcelable;
 import org.microg.safeparcel.SafeParceled;
 
 import android.os.Bundle;
 import android.net.Uri;
 
-
 public class DynamicLinkData extends AutoSafeParcelable {
-    @SafeParceled(1)
+    @Field(1)
     public final String dynamicLink;
 
-    @SafeParceled(2)
+    @Field(2)
     public final String deepLink;
 
-    @SafeParceled(3)
+    @Field(3)
     public final int minVersion;
 
-    @SafeParceled(4)
+    @Field(4)
     public final long clickTimestamp;
 
-    @SafeParceled(5)
+    @Field(5)
     public final Bundle extensionBundle;
 
-    @SafeParceled(6)
+    @Field(6)
     public final Uri redirectUrl;
 
     public DynamicLinkData() {
-        dynamicLink = new String();
-        deepLink = new String();
+        dynamicLink = "";
+        deepLink = "";
         minVersion = 0;
         clickTimestamp = 0;
         extensionBundle = new Bundle();
         redirectUrl = Uri.EMPTY;
     }
 
-
     public static final Creator<DynamicLinkData> CREATOR = new AutoCreator<DynamicLinkData>(DynamicLinkData.class);
-}
\ No newline at end of file
+}
diff --git a/firebase-dynamic-links-api/src/main/java/com/google/firebase/dynamiclinks/internal/ShortDynamicLink.java b/firebase-dynamic-links-api/src/main/java/com/google/firebase/dynamiclinks/internal/ShortDynamicLink.java
deleted file mode 100644
index 893e4098..00000000
--- a/firebase-dynamic-links-api/src/main/java/com/google/firebase/dynamiclinks/internal/ShortDynamicLink.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * Copyright (C) 2019 e Foundation
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.firebase.dynamiclinks.internal;
-
-
-import com.google.firebase.dynamiclinks.internal.Warning;
-
-import org.microg.safeparcel.AutoSafeParcelable;
-import org.microg.safeparcel.SafeParceled;
-
-import android.net.Uri;
-import java.util.List;
-import java.util.ArrayList;
-
-
-public class ShortDynamicLink extends AutoSafeParcelable {
-    @SafeParceled(1)
-    public final Uri shortLink;
-
-    @SafeParceled(2)
-    public final Uri previewLink;
-
-    @SafeParceled(3)
-    public final List<Warning> warnings;
-
-
-    public ShortDynamicLink() {
-        shortLink = Uri.EMPTY;
-        previewLink = Uri.EMPTY;
-
-        warnings = new ArrayList<>();
-    }
-
-
-    public static final Creator<ShortDynamicLink> CREATOR = new AutoCreator<ShortDynamicLink>(ShortDynamicLink.class);
-}
\ No newline at end of file
diff --git a/firebase-dynamic-links-api/src/main/java/com/google/firebase/dynamiclinks/internal/Warning.java b/firebase-dynamic-links-api/src/main/java/com/google/firebase/dynamiclinks/internal/Warning.java
deleted file mode 100644
index 950f3de7..00000000
--- a/firebase-dynamic-links-api/src/main/java/com/google/firebase/dynamiclinks/internal/Warning.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
- * Copyright (C) 2019 e Foundation
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.firebase.dynamiclinks.internal;
-
-
-import org.microg.safeparcel.AutoSafeParcelable;
-import org.microg.safeparcel.SafeParceled;
-
-
-public class Warning extends AutoSafeParcelable {
-    @SafeParceled(1)
-    private int versionCode = 1;
-
-    @SafeParceled(2)
-    public final String message;
-
-
-    public Warning() {
-        message = null;
-    }
-
-
-    public static final Creator<Warning> CREATOR = new AutoCreator<Warning>(Warning.class);
-}
\ No newline at end of file
diff --git a/gradle.properties b/gradle.properties
index 5bac8ac5..0235f6cd 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1 +1,15 @@
+## For more details on how to configure your build environment visit
+# http://www.gradle.org/docs/current/userguide/build_environment.html
+#
+# Specifies the JVM arguments used for the daemon process.
+# The setting is particularly useful for tweaking memory settings.
+# Default value: -Xmx1024m -XX:MaxPermSize=256m
+# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
+#
+# When configured, Gradle will run in incubating parallel mode.
+# This option should only be used with decoupled projects. More details, visit
+# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
+# org.gradle.parallel=true
+#Sun May 08 10:02:48 CEST 2022
+org.gradle.jvmargs=-Xmx2048M -Dkotlin.daemon.jvm.options\="-Xmx2048M"
 android.useAndroidX=true
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 8c0fb64a..7454180f 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index e2993c8f..365ac247 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -3,6 +3,6 @@
 
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-6.5-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-7.3.3-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
diff --git a/gradlew b/gradlew
index 91a7e269..050e50b8 100755
--- a/gradlew
+++ b/gradlew
@@ -1,79 +1,130 @@
-#!/usr/bin/env bash
+#!/bin/sh
+
+# SPDX-License-Identifier: Apache-2.0
+#
+# Copyright © 2015-2021 the original authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
 
 ##############################################################################
-##
-##  Gradle start up script for UN*X
-##
+#
+#   Gradle start up script for POSIX generated by Gradle.
+#
+#   Important for running:
+#
+#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
+#       noncompliant, but you have some other compliant shell such as ksh or
+#       bash, then to run this script, type that shell name before the whole
+#       command line, like:
+#
+#           ksh Gradle
+#
+#       Busybox and similar reduced shells will NOT work, because this script
+#       requires all of these POSIX shell features:
+#         * functions;
+#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
+#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
+#         * compound commands having a testable exit status, especially «case»;
+#         * various built-in commands including «command», «set», and «ulimit».
+#
+#   Important for patching:
+#
+#   (2) This script targets any POSIX shell, so it avoids extensions provided
+#       by Bash, Ksh, etc; in particular arrays are avoided.
+#
+#       The "traditional" practice of packing multiple parameters into a
+#       space-separated string is a well documented source of bugs and security
+#       problems, so this is (mostly) avoided, by progressively accumulating
+#       options in "$@", and eventually passing that to Java.
+#
+#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
+#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
+#       see the in-line comments for details.
+#
+#       There are tweaks for specific operating systems such as AIX, CygWin,
+#       Darwin, MinGW, and NonStop.
+#
+#   (3) This script is generated from the Groovy template
+#       https://github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
+#       within the Gradle project.
+#
+#       You can find Gradle at https://github.com/gradle/gradle/.
+#
 ##############################################################################
 
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""
+# Attempt to set APP_HOME
+
+# Resolve links: $0 may be a link
+app_path=$0
+
+# Need this for daisy-chained symlinks.
+while
+    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
+    [ -h "$app_path" ]
+do
+    ls=$( ls -ld "$app_path" )
+    link=${ls#*' -> '}
+    case $link in             #(
+      /*)   app_path=$link ;; #(
+      *)    app_path=$APP_HOME$link ;;
+    esac
+done
+
+APP_HOME=$( cd "${APP_HOME:-./}" && pwd -P ) || exit
 
 APP_NAME="Gradle"
-APP_BASE_NAME=`basename "$0"`
+APP_BASE_NAME=${0##*/}
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
 
 # Use the maximum available, or set MAX_FD != -1 to use that value.
-MAX_FD="maximum"
+MAX_FD=maximum
 
-warn ( ) {
+warn () {
     echo "$*"
-}
+} >&2
 
-die ( ) {
+die () {
     echo
     echo "$*"
     echo
     exit 1
-}
+} >&2
 
 # OS specific support (must be 'true' or 'false').
 cygwin=false
 msys=false
 darwin=false
-case "`uname`" in
-  CYGWIN* )
-    cygwin=true
-    ;;
-  Darwin* )
-    darwin=true
-    ;;
-  MINGW* )
-    msys=true
-    ;;
+nonstop=false
+case "$( uname )" in                #(
+  CYGWIN* )         cygwin=true  ;; #(
+  Darwin* )         darwin=true  ;; #(
+  MSYS* | MINGW* )  msys=true    ;; #(
+  NONSTOP* )        nonstop=true ;;
 esac
 
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-fi
-
-# Attempt to set APP_HOME
-# Resolve links: $0 may be a link
-PRG="$0"
-# Need this for relative symlinks.
-while [ -h "$PRG" ] ; do
-    ls=`ls -ld "$PRG"`
-    link=`expr "$ls" : '.*-> \(.*\)$'`
-    if expr "$link" : '/.*' > /dev/null; then
-        PRG="$link"
-    else
-        PRG=`dirname "$PRG"`"/$link"
-    fi
-done
-SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >&-
-APP_HOME="`pwd -P`"
-cd "$SAVED" >&-
-
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
+
 # Determine the Java command to use to start the JVM.
 if [ -n "$JAVA_HOME" ] ; then
     if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
         # IBM's JDK on AIX uses strange locations for the executables
-        JAVACMD="$JAVA_HOME/jre/sh/java"
+        JAVACMD=$JAVA_HOME/jre/sh/java
     else
-        JAVACMD="$JAVA_HOME/bin/java"
+        JAVACMD=$JAVA_HOME/bin/java
     fi
     if [ ! -x "$JAVACMD" ] ; then
         die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
@@ -82,7 +133,7 @@ Please set the JAVA_HOME variable in your environment to match the
 location of your Java installation."
     fi
 else
-    JAVACMD="java"
+    JAVACMD=java
     which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
 
 Please set the JAVA_HOME variable in your environment to match the
@@ -90,75 +141,95 @@ location of your Java installation."
 fi
 
 # Increase the maximum file descriptors if we can.
-if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
-    MAX_FD_LIMIT=`ulimit -H -n`
-    if [ $? -eq 0 ] ; then
-        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
-            MAX_FD="$MAX_FD_LIMIT"
-        fi
-        ulimit -n $MAX_FD
-        if [ $? -ne 0 ] ; then
-            warn "Could not set maximum file descriptor limit: $MAX_FD"
-        fi
-    else
-        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
-    fi
+if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
+    case $MAX_FD in #(
+      max*)
+        MAX_FD=$( ulimit -H -n ) ||
+            warn "Could not query maximum file descriptor limit"
+    esac
+    case $MAX_FD in  #(
+      '' | soft) :;; #(
+      *)
+        ulimit -n "$MAX_FD" ||
+            warn "Could not set maximum file descriptor limit to $MAX_FD"
+    esac
 fi
 
-# For Darwin, add options to specify how the application appears in the dock
-if $darwin; then
-    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
-fi
+# Collect all arguments for the java command, stacking in reverse order:
+#   * args from the command line
+#   * the main class name
+#   * -classpath
+#   * -D...appname settings
+#   * --module-path (only if needed)
+#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.
+
+# For Cygwin or MSYS, switch paths to Windows format before running java
+if "$cygwin" || "$msys" ; then
+    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
+    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )
+
+    JAVACMD=$( cygpath --unix "$JAVACMD" )
 
-# For Cygwin, switch paths to Windows format before running java
-if $cygwin ; then
-    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
-    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
-
-    # We build the pattern for arguments to be converted via cygpath
-    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
-    SEP=""
-    for dir in $ROOTDIRSRAW ; do
-        ROOTDIRS="$ROOTDIRS$SEP$dir"
-        SEP="|"
-    done
-    OURCYGPATTERN="(^($ROOTDIRS))"
-    # Add a user-defined pattern to the cygpath arguments
-    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
-        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
-    fi
     # Now convert the arguments - kludge to limit ourselves to /bin/sh
-    i=0
-    for arg in "$@" ; do
-        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
-        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
-
-        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
-            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
-        else
-            eval `echo args$i`="\"$arg\""
+    for arg do
+        if
+            case $arg in                                #(
+              -*)   false ;;                            # don't mess with options #(
+              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
+                    [ -e "$t" ] ;;                      #(
+              *)    false ;;
+            esac
+        then
+            arg=$( cygpath --path --ignore --mixed "$arg" )
         fi
-        i=$((i+1))
+        # Roll the args list around exactly as many times as the number of
+        # args, so each arg winds up back in the position where it started, but
+        # possibly modified.
+        #
+        # NB: a `for` loop captures its iteration list before it begins, so
+        # changing the positional parameters here affects neither the number of
+        # iterations, nor the values presented in `arg`.
+        shift                   # remove old arg
+        set -- "$@" "$arg"      # push replacement arg
     done
-    case $i in
-        (0) set -- ;;
-        (1) set -- "$args0" ;;
-        (2) set -- "$args0" "$args1" ;;
-        (3) set -- "$args0" "$args1" "$args2" ;;
-        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
-        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
-        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
-        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
-        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
-        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
-    esac
 fi
 
-# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
-function splitJvmOpts() {
-    JVM_OPTS=("$@")
-}
-eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
-JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
-
-exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
+# Collect all arguments for the java command;
+#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of
+#     shell script including quotes and variable substitutions, so put them in
+#     double quotes to make sure that they get re-expanded; and
+#   * put everything else in single quotes, so that it's not re-expanded.
+
+set -- \
+        "-Dorg.gradle.appname=$APP_BASE_NAME" \
+        -classpath "$CLASSPATH" \
+        org.gradle.wrapper.GradleWrapperMain \
+        "$@"
+
+# Use "xargs" to parse quoted args.
+#
+# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
+#
+# In Bash we could simply go:
+#
+#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
+#   set -- "${ARGS[@]}" "$@"
+#
+# but POSIX shell has neither arrays nor command substitution, so instead we
+# post-process each arg (as a line of input to sed) to backslash-escape any
+# character that might be a shell metacharacter, then use eval to reverse
+# that process (while maintaining the separation between arguments), and wrap
+# the whole thing up as a single "set" statement.
+#
+# This will of course break if any of these variables contains a newline or
+# an unmatched quote.
+#
+
+eval "set -- $(
+        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
+        xargs -n1 |
+        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
+        tr '\n' ' '
+    )" '"$@"'
+
+exec "$JAVACMD" "$@"
diff --git a/play-services-api/src/main/aidl/com/google/android/gms/checkin/internal/ICheckinService.aidl b/play-services-api/src/main/aidl/com/google/android/gms/checkin/internal/ICheckinService.aidl
index 6ac61289..973de92f 100644
--- a/play-services-api/src/main/aidl/com/google/android/gms/checkin/internal/ICheckinService.aidl
+++ b/play-services-api/src/main/aidl/com/google/android/gms/checkin/internal/ICheckinService.aidl
@@ -2,4 +2,6 @@ package com.google.android.gms.checkin.internal;
 
 interface ICheckinService {
     String getDeviceDataVersionInfo();
+    long getLastCheckinSuccessTime();
+    String getLastSimOperator();
 }
diff --git a/play-services-api/src/main/aidl/com/google/android/gms/clearcut/internal/IClearcutLoggerCallbacks.aidl b/play-services-api/src/main/aidl/com/google/android/gms/clearcut/internal/IClearcutLoggerCallbacks.aidl
index 31042db8..61e23cff 100644
--- a/play-services-api/src/main/aidl/com/google/android/gms/clearcut/internal/IClearcutLoggerCallbacks.aidl
+++ b/play-services-api/src/main/aidl/com/google/android/gms/clearcut/internal/IClearcutLoggerCallbacks.aidl
@@ -1,7 +1,13 @@
 package com.google.android.gms.clearcut.internal;
 
 import com.google.android.gms.common.api.Status;
+import com.google.android.gms.common.data.DataHolder;
 
 interface IClearcutLoggerCallbacks {
-    oneway void onStatus(in Status status) = 0;
+    oneway void onLogResult(in Status status) = 0;
+    oneway void onForceUploadResult(in Status status) = 1;
+    oneway void onStartCollectForDebugResult(in Status status, long l) = 2;
+    oneway void onStopCollectForDebugResult(in Status status) = 3;
+    oneway void onCollectForDebugExpiryTime(in Status status, long l) = 4;
+    oneway void onLogEventParcelables(in DataHolder data) = 6;
 }
diff --git a/play-services-api/src/main/aidl/com/google/android/gms/clearcut/internal/IClearcutLoggerService.aidl b/play-services-api/src/main/aidl/com/google/android/gms/clearcut/internal/IClearcutLoggerService.aidl
index b2f1b2fd..018252e0 100644
--- a/play-services-api/src/main/aidl/com/google/android/gms/clearcut/internal/IClearcutLoggerService.aidl
+++ b/play-services-api/src/main/aidl/com/google/android/gms/clearcut/internal/IClearcutLoggerService.aidl
@@ -4,5 +4,11 @@ import com.google.android.gms.clearcut.internal.IClearcutLoggerCallbacks;
 import com.google.android.gms.clearcut.LogEventParcelable;
 
 interface IClearcutLoggerService {
-    void log(IClearcutLoggerCallbacks callbacks, in LogEventParcelable event) = 0;
+    oneway void log(IClearcutLoggerCallbacks callbacks, in LogEventParcelable event) = 0;
+    oneway void forceUpload(IClearcutLoggerCallbacks callbacks) = 1;
+    oneway void startCollectForDebug(IClearcutLoggerCallbacks callbacks) = 2;
+    oneway void stopCollectForDebug(IClearcutLoggerCallbacks callbacks) = 3;
+    oneway void getCollectForDebugExpiryTime(IClearcutLoggerCallbacks callbacks) = 4;
+    oneway void getLogEventParcelablesLegacy(IClearcutLoggerCallbacks callbacks) = 5;
+    oneway void getLogEventParcelables(IClearcutLoggerCallbacks callbacks) = 6;
 }
diff --git a/play-services-api/src/main/aidl/com/google/android/gms/measurement/internal/IMeasurementService.aidl b/play-services-api/src/main/aidl/com/google/android/gms/measurement/internal/IMeasurementService.aidl
index 8a99173a..1c78896a 100644
--- a/play-services-api/src/main/aidl/com/google/android/gms/measurement/internal/IMeasurementService.aidl
+++ b/play-services-api/src/main/aidl/com/google/android/gms/measurement/internal/IMeasurementService.aidl
@@ -3,23 +3,25 @@ package com.google.android.gms.measurement.internal;
 import com.google.android.gms.measurement.internal.AppMetadata;
 import com.google.android.gms.measurement.internal.ConditionalUserPropertyParcel;
 import com.google.android.gms.measurement.internal.EventParcel;
+import com.google.android.gms.measurement.internal.UserAttributeParcel;
 
 interface IMeasurementService {
-    void f1(in EventParcel p0, in AppMetadata p1) = 0;
-//    void zza(UserAttributeParcel p0, AppMetadata p1) = 1;
-    void f4(in AppMetadata p0) = 3;
-//    void zza(EventParcel p0, String p1, String p2) = 4;
-//    void zzb(AppMetadata p0) = 5;
-//    List<UserAttributeParcel> zza(AppMetadata p0, boolean p1) = 6;
-//    byte[] zza(EventParcel p0, String p1) = 8;
+    void f1(in EventParcel event, in AppMetadata app) = 0;
+    void f2(in UserAttributeParcel attribute, in AppMetadata app) = 1;
+    void f4(in AppMetadata app) = 3;
+//    void f5(in EventParcel p0, String p1, String p2) = 4;
+//    void f6(in AppMetadata p0) = 5;
+//    List<UserAttributeParcel> f7(in AppMetadata p0, boolean p1) = 6;
+//    byte[] f9(in EventParcel p0, String p1) = 8;
     void f10(long p0, String p1, String p2, String p3) = 9;
-    String f11(in AppMetadata p0) = 10;
-    void f12(in ConditionalUserPropertyParcel p0, in AppMetadata p1) = 11;
-//    void zza(ConditionalUserPropertyParcel p0) = 12;
-//    List<UserAttributeParcelzkr> zza(String p0, String p1, boolean p2, AppMetadata p3) = 13;
-//    List<UserAttributeParcel> zza(String p0, String p1, String p2, boolean p3) = 14;
-//    List<ConditionalUserPropertyParcel> zza(String p0, String p1, AppMetadata p2) = 15;
-//    List<ConditionalUserPropertyParcel> zza(String p0, String p1, String p2) = 16;
-//    void zzd(AppMetadata p0) = 17;
-//    void zza(Bundle p0, AppMetadata p1) = 18;
+    String f11(in AppMetadata app) = 10;
+    void f12(in ConditionalUserPropertyParcel property, in AppMetadata app) = 11;
+//    void f13(ConditionalUserPropertyParcel p0) = 12;
+//    List<UserAttributeParcel> getUserProperties(String p0, String p1, boolean p2, in AppMetadata p3) = 13;
+//    List<UserAttributeParcel> getUserPropertiesAs(String p0, String p1, String p2, boolean p3) = 14;
+//    List<ConditionalUserPropertyParcel> getConditionalUserProperties(String p0, String p1, in AppMetadata p2) = 15;
+//    List<ConditionalUserPropertyParcel> getCondtionalUserPropertiesAs(String p0, String p1, String p2) = 16;
+//    void f18(in AppMetadata p0) = 17;
+    void setDefaultEventParameters(in Bundle params, in AppMetadata app) = 18;
+//    void f20(in AppMetadata p0) = 19;
 }
diff --git a/play-services-api/src/main/aidl/com/google/android/gms/phenotype/internal/IPhenotypeCallbacks.aidl b/play-services-api/src/main/aidl/com/google/android/gms/phenotype/internal/IPhenotypeCallbacks.aidl
index acda3c57..3c29b8b6 100644
--- a/play-services-api/src/main/aidl/com/google/android/gms/phenotype/internal/IPhenotypeCallbacks.aidl
+++ b/play-services-api/src/main/aidl/com/google/android/gms/phenotype/internal/IPhenotypeCallbacks.aidl
@@ -2,8 +2,26 @@ package com.google.android.gms.phenotype.internal;
 
 import com.google.android.gms.common.api.Status;
 import com.google.android.gms.phenotype.Configurations;
+import com.google.android.gms.phenotype.DogfoodsToken;
+import com.google.android.gms.phenotype.ExperimentTokens;
+import com.google.android.gms.phenotype.Flag;
+import com.google.android.gms.phenotype.FlagOverrides;
 
 interface IPhenotypeCallbacks {
-    oneway void onRegister(in Status status) = 0;
-    oneway void onConfigurations(in Status status, in Configurations configurations) = 3;
+    oneway void onRegistered(in Status status) = 0;
+    oneway void onWeakRegistered(in Status status) = 1;
+    oneway void onUnregistered(in Status status) = 2;
+    oneway void onConfiguration(in Status status, in Configurations configurations) = 3;
+    oneway void onCommitedToConfiguration(in Status status) = 4;
+    oneway void onExperimentTokens(in Status status, in ExperimentTokens experimentTokens) = 5;
+    oneway void onDogfoodsToken(in Status status, in DogfoodsToken dogfoodsToken) = 6;
+    oneway void onDogfoodsTokenSet(in Status status) = 7;
+    oneway void onFlag(in Status status, in Flag flag) = 8;
+    oneway void onCommittedConfiguration(in Status status, in Configurations configuration) = 9;
+    oneway void onSyncFinished(in Status status, long p1) = 10;
+    oneway void onFlagOverridesSet(in Status status) = 11;
+    oneway void onFlagOverrides(in Status status, in FlagOverrides overrides) = 12;
+    oneway void onAppSpecificPropertiesSet(in Status status) = 13;
+
+    oneway void onServingVersion(in Status status, long version) = 15;
 }
diff --git a/play-services-api/src/main/aidl/com/google/android/gms/phenotype/internal/IPhenotypeService.aidl b/play-services-api/src/main/aidl/com/google/android/gms/phenotype/internal/IPhenotypeService.aidl
index 724969f9..77d315b7 100644
--- a/play-services-api/src/main/aidl/com/google/android/gms/phenotype/internal/IPhenotypeService.aidl
+++ b/play-services-api/src/main/aidl/com/google/android/gms/phenotype/internal/IPhenotypeService.aidl
@@ -1,8 +1,31 @@
 package com.google.android.gms.phenotype.internal;
 
 import com.google.android.gms.phenotype.internal.IPhenotypeCallbacks;
+import com.google.android.gms.phenotype.Flag;
+import com.google.android.gms.phenotype.RegistrationInfo;
 
 interface IPhenotypeService {
-    void register(IPhenotypeCallbacks callbacks, String p1, int p2, in String[] p3, in byte[] p4) = 0;
-    void getConfigurationSnapshot(IPhenotypeCallbacks callbacks, String p1, String p2, String p3) = 10;
+    oneway void register(IPhenotypeCallbacks callbacks, String p1, int p2, in String[] p3, in byte[] p4) = 0; // returns via callbacks.onRegistered()
+    oneway void weakRegister(IPhenotypeCallbacks callbacks, String p1, int p2, in String[] p3, in int[] p4, in byte[] p5) = 1; // returns via callbacks.onWeakRegistered()
+    oneway void unregister(IPhenotypeCallbacks callbacks, String p1) = 2; // returns via callbacks.onUnregistered()
+    oneway void getConfigurationSnapshot(IPhenotypeCallbacks callbacks, String p1, String p2) = 3; // returns via callbacks.onConfiguration()
+    oneway void commitToConfiguration(IPhenotypeCallbacks callbacks, String p1) = 4; // returns via callbacks.onCommitedToConfiguration()
+    oneway void getExperimentTokens(IPhenotypeCallbacks callbacks, String p1, String logSourceName) = 5; // returns via callbacks.onExperimentTokens()
+    oneway void getDogfoodsToken(IPhenotypeCallbacks callbacks) = 6; // returns via callbacks.onDogfoodsToken()
+    oneway void setDogfoodsToken(IPhenotypeCallbacks callbacks, in byte[] p1) = 7; // returns via callbacks.onDogfoodsTokenSet()
+    oneway void getFlag(IPhenotypeCallbacks callbacks, String packageName, String name, int type) = 8; // returns via callbacks.onFlag()
+    oneway void getCommitedConfiguration(IPhenotypeCallbacks callbacks, String p1) = 9; // returns via callbacks.onCommittedConfiguration()
+    oneway void getConfigurationSnapshot2(IPhenotypeCallbacks callbacks, String p1, String p2, String p3) = 10; // returns via callbacks.onConfiguration()
+    oneway void syncAfterOperation(IPhenotypeCallbacks callbacks, String p1, long p2) = 11; // returns via callbacks.onSyncFinished()
+    oneway void registerSync(IPhenotypeCallbacks callbacks, String p1, int p2, in String[] p3, in byte[] p4, String p5, String p6) = 12; // returns via callbacks.onConfiguration()
+    oneway void setFlagOverrides(IPhenotypeCallbacks callbacks, String packageName, String user, String flagName, int flagType, int flagDataType, String flagValue) = 13; // returns via callbacks.onFlagOverridesSet()
+    oneway void deleteFlagOverrides(IPhenotypeCallbacks callbacks, String packageName, String user, String flagName) = 14; // returns via callbacks.onFlagOverrides()
+    oneway void listFlagOverrides(IPhenotypeCallbacks callbacks, String packageName, String user, String flagName) = 15; // returns via callbacks.onFlagOverrides()
+
+    oneway void clearFlagOverrides(IPhenotypeCallbacks callbacks, String packageName, String user) = 17; // returns via callbacks.onFlagOverridesSet()
+    oneway void bulkRegister(IPhenotypeCallbacks callbacks, in RegistrationInfo[] infos) = 18; // returns via callbacks.onRegister()
+    oneway void setAppSpecificProperties(IPhenotypeCallbacks callbacks, String p1, in byte[] p2) = 19; // returns via callbacks.onAppSpecificPropertiesSet()
+
+    oneway void getServingVersion(IPhenotypeCallbacks callbacks) = 21; // returns via callbacks.onServingVersion()
+    oneway void getExperimentTokens2(IPhenotypeCallbacks callbacks, String p1, String p2, String p3, String p4) = 22; // returns via callbacks.onExperimentTokens()
 }
diff --git a/play-services-api/src/main/aidl/com/google/android/gms/playlog/internal/IPlayLogService.aidl b/play-services-api/src/main/aidl/com/google/android/gms/playlog/internal/IPlayLogService.aidl
index 86169b99..9bcdee44 100644
--- a/play-services-api/src/main/aidl/com/google/android/gms/playlog/internal/IPlayLogService.aidl
+++ b/play-services-api/src/main/aidl/com/google/android/gms/playlog/internal/IPlayLogService.aidl
@@ -1,8 +1,9 @@
 package com.google.android.gms.playlog.internal;
 
+import com.google.android.gms.clearcut.internal.PlayLoggerContext;
 import com.google.android.gms.playlog.internal.LogEvent;
-import com.google.android.gms.playlog.internal.PlayLoggerContext;
 
+// Deprecated
 interface IPlayLogService {
     void onEvent(String packageName, in PlayLoggerContext context, in LogEvent event) = 1;
     void onMultiEvent(String packageName, in PlayLoggerContext context, in List<LogEvent> events) = 2;
diff --git a/play-services-api/src/main/aidl/com/google/android/gms/playlog/internal/PlayLoggerContext.aidl b/play-services-api/src/main/aidl/com/google/android/gms/playlog/internal/PlayLoggerContext.aidl
deleted file mode 100644
index 9cc0e0e4..00000000
--- a/play-services-api/src/main/aidl/com/google/android/gms/playlog/internal/PlayLoggerContext.aidl
+++ /dev/null
@@ -1,3 +0,0 @@
-package com.google.android.gms.playlog.internal;
-
-parcelable PlayLoggerContext;
diff --git a/play-services-api/src/main/aidl/com/google/android/gms/safetynet/AttestationData.aidl b/play-services-api/src/main/aidl/com/google/android/gms/safetynet/AttestationData.aidl
deleted file mode 100644
index f1e056b4..00000000
--- a/play-services-api/src/main/aidl/com/google/android/gms/safetynet/AttestationData.aidl
+++ /dev/null
@@ -1,3 +0,0 @@
-package com.google.android.gms.safetynet;
-
-parcelable AttestationData;
\ No newline at end of file
diff --git a/play-services-api/src/main/aidl/com/google/android/gms/safetynet/HarmfulAppsData.aidl b/play-services-api/src/main/aidl/com/google/android/gms/safetynet/HarmfulAppsData.aidl
deleted file mode 100644
index 9e5456b0..00000000
--- a/play-services-api/src/main/aidl/com/google/android/gms/safetynet/HarmfulAppsData.aidl
+++ /dev/null
@@ -1,3 +0,0 @@
-package com.google.android.gms.safetynet;
-
-parcelable HarmfulAppsData;
\ No newline at end of file
diff --git a/play-services-api/src/main/aidl/com/google/android/gms/safetynet/HarmfulAppsInfo.aidl b/play-services-api/src/main/aidl/com/google/android/gms/safetynet/HarmfulAppsInfo.aidl
deleted file mode 100644
index becadfaf..00000000
--- a/play-services-api/src/main/aidl/com/google/android/gms/safetynet/HarmfulAppsInfo.aidl
+++ /dev/null
@@ -1,3 +0,0 @@
-package com.google.android.gms.safetynet;
-
-parcelable HarmfulAppsInfo;
diff --git a/play-services-api/src/main/aidl/com/google/android/gms/safetynet/RecaptchaResultData.aidl b/play-services-api/src/main/aidl/com/google/android/gms/safetynet/RecaptchaResultData.aidl
deleted file mode 100644
index ec4cbb4f..00000000
--- a/play-services-api/src/main/aidl/com/google/android/gms/safetynet/RecaptchaResultData.aidl
+++ /dev/null
@@ -1,3 +0,0 @@
-package com.google.android.gms.safetynet;
-
-parcelable RecaptchaResultData;
diff --git a/play-services-api/src/main/aidl/com/google/android/gms/safetynet/RemoveHarmfulAppData.aidl b/play-services-api/src/main/aidl/com/google/android/gms/safetynet/RemoveHarmfulAppData.aidl
deleted file mode 100644
index af859cde..00000000
--- a/play-services-api/src/main/aidl/com/google/android/gms/safetynet/RemoveHarmfulAppData.aidl
+++ /dev/null
@@ -1,3 +0,0 @@
-package com.google.android.gms.safetynet;
-
-parcelable RemoveHarmfulAppData;
diff --git a/play-services-api/src/main/aidl/com/google/android/gms/safetynet/SafeBrowsingData.aidl b/play-services-api/src/main/aidl/com/google/android/gms/safetynet/SafeBrowsingData.aidl
deleted file mode 100644
index 5b18294d..00000000
--- a/play-services-api/src/main/aidl/com/google/android/gms/safetynet/SafeBrowsingData.aidl
+++ /dev/null
@@ -1,3 +0,0 @@
-package com.google.android.gms.safetynet;
-
-parcelable SafeBrowsingData;
\ No newline at end of file
diff --git a/play-services-api/src/main/aidl/com/google/android/gms/safetynet/internal/ISafetyNetCallbacks.aidl b/play-services-api/src/main/aidl/com/google/android/gms/safetynet/internal/ISafetyNetCallbacks.aidl
deleted file mode 100644
index 9c199652..00000000
--- a/play-services-api/src/main/aidl/com/google/android/gms/safetynet/internal/ISafetyNetCallbacks.aidl
+++ /dev/null
@@ -1,20 +0,0 @@
-package com.google.android.gms.safetynet.internal;
-
-import com.google.android.gms.common.api.Status;
-import com.google.android.gms.safetynet.AttestationData;
-import com.google.android.gms.safetynet.HarmfulAppsData;
-import com.google.android.gms.safetynet.HarmfulAppsInfo;
-import com.google.android.gms.safetynet.RecaptchaResultData;
-import com.google.android.gms.safetynet.RemoveHarmfulAppData;
-import com.google.android.gms.safetynet.SafeBrowsingData;
-
-interface ISafetyNetCallbacks {
-    oneway void onAttestationData(in Status status, in AttestationData attestationData) = 0;
-    oneway void onString(String s) = 1;
-    oneway void onSafeBrowsingData(in Status status, in SafeBrowsingData safeBrowsingData) = 2;
-    oneway void onBoolean(in Status status, boolean b) = 3;
-    oneway void onHarmfulAppsData(in Status status, in List<HarmfulAppsData> harmfulAppsData) = 4;
-    oneway void onRecaptchaResult(in Status status, in RecaptchaResultData recaptchaResultData) = 5;
-    oneway void onHarmfulAppsInfo(in Status status, in HarmfulAppsInfo harmfulAppsInfo) = 7;
-    oneway void onRemoveHarmfulAppData(in Status status, in RemoveHarmfulAppData removeHarmfulAppData) = 14;
-}
diff --git a/play-services-api/src/main/aidl/com/google/android/gms/safetynet/internal/ISafetyNetService.aidl b/play-services-api/src/main/aidl/com/google/android/gms/safetynet/internal/ISafetyNetService.aidl
deleted file mode 100644
index 5cf8b2a1..00000000
--- a/play-services-api/src/main/aidl/com/google/android/gms/safetynet/internal/ISafetyNetService.aidl
+++ /dev/null
@@ -1,13 +0,0 @@
-package com.google.android.gms.safetynet.internal;
-
-import com.google.android.gms.safetynet.internal.ISafetyNetCallbacks;
-
-interface ISafetyNetService {
-    void attest(ISafetyNetCallbacks callbacks, in byte[] nonce) = 0;
-    void attestWithApiKey(ISafetyNetCallbacks callbacks, in byte[] nonce, String apiKey) = 6;
-    void getSharedUuid(ISafetyNetCallbacks callbacks) = 1;
-    void lookupUri(ISafetyNetCallbacks callbacks, String s1, in int[] threatTypes, int i, String s2) = 2;
-    void init(ISafetyNetCallbacks callbacks) = 3;
-    void getHarmfulAppsList(ISafetyNetCallbacks callbacks) = 4;
-    void verifyWithRecaptcha(ISafetyNetCallbacks callbacks, String siteKey) = 5;
-}
diff --git a/play-services-api/src/main/java/com/google/android/gms/clearcut/LogEventParcelable.java b/play-services-api/src/main/java/com/google/android/gms/clearcut/LogEventParcelable.java
index 6ff57373..0f193b9c 100644
--- a/play-services-api/src/main/java/com/google/android/gms/clearcut/LogEventParcelable.java
+++ b/play-services-api/src/main/java/com/google/android/gms/clearcut/LogEventParcelable.java
@@ -18,12 +18,12 @@ package com.google.android.gms.clearcut;
 
 import android.util.Base64;
 
+import com.google.android.gms.clearcut.internal.LogVerifierResultParcelable;
 import com.google.android.gms.phenotype.ExperimentToken;
 import com.google.android.gms.phenotype.GenericDimension;
-import com.google.android.gms.playlog.internal.PlayLoggerContext;
+import com.google.android.gms.clearcut.internal.PlayLoggerContext;
 
 import org.microg.safeparcel.AutoSafeParcelable;
-import org.microg.safeparcel.SafeParceled;
 
 import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
@@ -62,6 +62,9 @@ public class LogEventParcelable extends AutoSafeParcelable {
     @Field(10)
     public final GenericDimension[] genericDimensions;
 
+    @Field(11)
+    public final LogVerifierResultParcelable logVerifierResult;
+
     private LogEventParcelable() {
         context = null;
         bytes = null;
@@ -71,6 +74,7 @@ public class LogEventParcelable extends AutoSafeParcelable {
         addPhenotypeExperimentTokens = false;
         experimentTokenParcelables = null;
         genericDimensions = null;
+        logVerifierResult = null;
     }
 
     public LogEventParcelable(PlayLoggerContext context, byte[] bytes, int[] testCodes, String[] mendelPackages, int[] experimentIds, byte[][] experimentTokens, boolean addPhenotypeExperimentTokens) {
@@ -83,6 +87,7 @@ public class LogEventParcelable extends AutoSafeParcelable {
         this.addPhenotypeExperimentTokens = addPhenotypeExperimentTokens;
         this.experimentTokenParcelables = null;
         this.genericDimensions = null;
+        this.logVerifierResult = null;
     }
 
     @Override
diff --git a/play-services-api/src/main/java/com/google/android/gms/measurement/internal/AppMetadata.java b/play-services-api/src/main/java/com/google/android/gms/measurement/internal/AppMetadata.java
index be233570..9c7c3671 100644
--- a/play-services-api/src/main/java/com/google/android/gms/measurement/internal/AppMetadata.java
+++ b/play-services-api/src/main/java/com/google/android/gms/measurement/internal/AppMetadata.java
@@ -57,5 +57,9 @@ public class AppMetadata extends AutoSafeParcelable {
     @Field(25)
     private String field25;
 
+    public String toString() {
+        return "AppMetadata[" + packageName + "]";
+    }
+
     public static final Creator<AppMetadata> CREATOR = new AutoCreator<>(AppMetadata.class);
 }
diff --git a/play-services-api/src/main/java/com/google/android/gms/measurement/internal/EventParcel.java b/play-services-api/src/main/java/com/google/android/gms/measurement/internal/EventParcel.java
index 3ff7c796..7b5b6179 100644
--- a/play-services-api/src/main/java/com/google/android/gms/measurement/internal/EventParcel.java
+++ b/play-services-api/src/main/java/com/google/android/gms/measurement/internal/EventParcel.java
@@ -8,5 +8,14 @@ package com.google.android.gms.measurement.internal;
 import org.microg.safeparcel.AutoSafeParcelable;
 
 public class EventParcel extends AutoSafeParcelable {
+    @Field(2)
+    public String name;
+    @Field(3)
+    public EventParams params;
+    @Field(4)
+    public String origin;
+    @Field(5)
+    public long timestamp;
+
     public static final Creator<EventParcel> CREATOR = new AutoCreator<>(EventParcel.class);
 }
diff --git a/play-services-api/src/main/java/com/google/android/gms/measurement/internal/UserAttributeParcel.java b/play-services-api/src/main/java/com/google/android/gms/measurement/internal/UserAttributeParcel.java
index 6070b923..d9c74663 100644
--- a/play-services-api/src/main/java/com/google/android/gms/measurement/internal/UserAttributeParcel.java
+++ b/play-services-api/src/main/java/com/google/android/gms/measurement/internal/UserAttributeParcel.java
@@ -8,5 +8,20 @@ package com.google.android.gms.measurement.internal;
 import org.microg.safeparcel.AutoSafeParcelable;
 
 public class UserAttributeParcel extends AutoSafeParcelable {
+    @Field(1)
+    public int field1;
+    @Field(2)
+    public String name;
+    @Field(3)
+    public long timestamp;
+    @Field(4)
+    public Long field4;
+    @Field(6)
+    public String field6;
+    @Field(7)
+    public String field7;
+    @Field(8)
+    public Double field8;
+
     public static final Creator<UserAttributeParcel> CREATOR = new AutoCreator<>(UserAttributeParcel.class);
 }
diff --git a/play-services-api/src/main/java/com/google/android/gms/phenotype/Configuration.java b/play-services-api/src/main/java/com/google/android/gms/phenotype/Configuration.java
index 20bb9d4c..2433df22 100644
--- a/play-services-api/src/main/java/com/google/android/gms/phenotype/Configuration.java
+++ b/play-services-api/src/main/java/com/google/android/gms/phenotype/Configuration.java
@@ -9,10 +9,10 @@ import org.microg.safeparcel.AutoSafeParcelable;
 
 public class Configuration extends AutoSafeParcelable {
     @Field(2)
-    public int field2;
+    public int flagType;
     @Field(3)
-    public Flag[] field3;
+    public Flag[] flags;
     @Field(4)
-    public String[] field4;
+    public String[] names;
     public static final Creator<Configuration> CREATOR = new AutoCreator<>(Configuration.class);
 }
diff --git a/play-services-api/src/main/java/com/google/android/gms/phenotype/Flag.java b/play-services-api/src/main/java/com/google/android/gms/phenotype/Flag.java
index 0c1fdc8a..4d0a03af 100644
--- a/play-services-api/src/main/java/com/google/android/gms/phenotype/Flag.java
+++ b/play-services-api/src/main/java/com/google/android/gms/phenotype/Flag.java
@@ -8,5 +8,95 @@ package com.google.android.gms.phenotype;
 import org.microg.safeparcel.AutoSafeParcelable;
 
 public class Flag extends AutoSafeParcelable {
+    @Field(2)
+    public String name;
+    @Field(3)
+    private long longValue;
+    @Field(4)
+    private boolean boolValue;
+    @Field(5)
+    private double doubleValue;
+    @Field(6)
+    private String stringValue;
+    @Field(7)
+    private byte[] bytesValue;
+    @Field(8)
+    public int dataType;
+    @Field(9)
+    public int flagType;
+
+    private Flag() {
+    }
+
+    public Flag(String name, long longValue, int flagType) {
+        this.name = name;
+        this.longValue = longValue;
+        this.dataType = DATA_TYPE_LONG;
+        this.flagType = flagType;
+    }
+
+    public Flag(String name, boolean boolValue, int flagType) {
+        this.name = name;
+        this.boolValue = boolValue;
+        this.dataType = DATA_TYPE_BOOL;
+        this.flagType = flagType;
+    }
+
+    public Flag(String name, double doubleValue, int flagType) {
+        this.name = name;
+        this.doubleValue = doubleValue;
+        this.dataType = DATA_TYPE_DOUBLE;
+        this.flagType = flagType;
+    }
+
+    public Flag(String name, String stringValue, int flagType) {
+        this.name = name;
+        this.stringValue = stringValue;
+        this.dataType = DATA_TYPE_STRING;
+        this.flagType = flagType;
+    }
+
+    public Flag(String name, byte[] bytesValue, int flagType) {
+        this.name = name;
+        this.bytesValue = bytesValue;
+        this.dataType = DATA_TYPE_BYTES;
+        this.flagType = flagType;
+    }
+
+    public long getLong() {
+        if (dataType == DATA_TYPE_LONG)
+            return longValue;
+        throw new IllegalArgumentException("Not a long type");
+    }
+
+    public boolean getBool() {
+        if (dataType == DATA_TYPE_BOOL)
+            return boolValue;
+        throw new IllegalArgumentException("Not a boolean type");
+    }
+
+    public double getDouble() {
+        if (dataType == DATA_TYPE_DOUBLE)
+            return doubleValue;
+        throw new IllegalArgumentException("Not a double type");
+    }
+
+    public String getString() {
+        if (dataType == DATA_TYPE_STRING)
+            return stringValue;
+        throw new IllegalArgumentException("Not a String type");
+    }
+
+    public byte[] getBytes() {
+        if (dataType == DATA_TYPE_BYTES)
+            return bytesValue;
+        throw new IllegalArgumentException("Not a bytes type");
+    }
+
+    public static final int DATA_TYPE_LONG = 1;
+    public static final int DATA_TYPE_BOOL = 2;
+    public static final int DATA_TYPE_DOUBLE = 3;
+    public static final int DATA_TYPE_STRING = 4;
+    public static final int DATA_TYPE_BYTES = 5;
     public static final Creator<Flag> CREATOR = new AutoCreator<>(Flag.class);
 }
diff --git a/play-services-api/src/main/java/com/google/android/gms/playlog/internal/LogEvent.java b/play-services-api/src/main/java/com/google/android/gms/playlog/internal/LogEvent.java
index 791c19b8..03ccbbc5 100644
--- a/play-services-api/src/main/java/com/google/android/gms/playlog/internal/LogEvent.java
+++ b/play-services-api/src/main/java/com/google/android/gms/playlog/internal/LogEvent.java
@@ -21,6 +21,7 @@ import org.microg.safeparcel.SafeParceled;
 
 import java.util.Date;
 
+@Deprecated
 public class LogEvent extends AutoSafeParcelable {
 
     @SafeParceled(1)
diff --git a/play-services-api/src/main/java/com/google/android/gms/playlog/internal/PlayLoggerContext.java b/play-services-api/src/main/java/com/google/android/gms/playlog/internal/PlayLoggerContext.java
deleted file mode 100644
index 7f793740..00000000
--- a/play-services-api/src/main/java/com/google/android/gms/playlog/internal/PlayLoggerContext.java
+++ /dev/null
@@ -1,97 +0,0 @@
-/*
- * Copyright (C) 2013-2017 microG Project Team
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.android.gms.playlog.internal;
-
-import org.microg.safeparcel.AutoSafeParcelable;
-import org.microg.safeparcel.SafeParceled;
-
-public class PlayLoggerContext extends AutoSafeParcelable {
-
-    @Field(1)
-    private int versionCode = 1;
-
-    @Field(2)
-    public final String packageName;
-
-    @Field(3)
-    public final int packageVersionCode;
-
-    @Field(4)
-    public final int logSource;
-
-    @Field(8)
-    public final String logSourceName;
-
-    @Field(5)
-    public final String uploadAccount;
-
-    @Field(6)
-    public final String loggingId;
-
-    @Field(7)
-    public final boolean logAndroidId;
-
-    @Field(9)
-    public final boolean isAnonymous;
-
-    @Field(10)
-    public final int qosTier;
-
-    @Field(11)
-    public final Integer appMobileSpecId;
-
-    @Field(12)
-    public final boolean scrubMccMnc;
-
-    private PlayLoggerContext() {
-        packageName = uploadAccount = logSourceName = loggingId = null;
-        qosTier = packageVersionCode = logSource = appMobileSpecId = -1;
-        isAnonymous = logAndroidId = scrubMccMnc = false;
-    }
-
-    public PlayLoggerContext(String packageName, int packageVersionCode, int logSource, String logSourceName, String uploadAccount, String loggingId, boolean isAnonymous,  int qosTier, boolean scrubMccMnc) {
-        this.packageName = packageName;
-        this.packageVersionCode = packageVersionCode;
-        this.logSource = logSource;
-        this.logSourceName = logSourceName;
-        this.uploadAccount = uploadAccount;
-        this.loggingId = loggingId;
-        this.logAndroidId = !isAnonymous;
-        this.isAnonymous = isAnonymous;
-        this.qosTier = qosTier;
-        this.appMobileSpecId = null;
-        this.scrubMccMnc = scrubMccMnc;
-    }
-
-    @Override
-    public String toString() {
-        final StringBuilder sb = new StringBuilder("PlayLoggerContext[").append(versionCode);
-        sb.append(", package=").append(packageName);
-        sb.append(", packageVersionCode=").append(packageVersionCode);
-        sb.append(", logSource=").append(logSource);
-        sb.append(", uploadAccount=").append(uploadAccount);
-        sb.append(", loggingId=").append(loggingId);
-        sb.append(", logAndroidId=").append(logAndroidId);
-        sb.append(", logSourceName=").append(logSourceName);
-        sb.append(", isAnonymous=").append(isAnonymous);
-        sb.append(", qosTier=").append(qosTier);
-        sb.append(']');
-        return sb.toString();
-    }
-
-    public static Creator<PlayLoggerContext> CREATOR = new AutoCreator<PlayLoggerContext>(PlayLoggerContext.class);
-}
diff --git a/play-services-api/src/main/java/com/google/android/gms/safetynet/AttestationData.java b/play-services-api/src/main/java/com/google/android/gms/safetynet/AttestationData.java
deleted file mode 100644
index 4f127291..00000000
--- a/play-services-api/src/main/java/com/google/android/gms/safetynet/AttestationData.java
+++ /dev/null
@@ -1,41 +0,0 @@
-/*
- * Copyright (C) 2013-2017 microG Project Team
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.android.gms.safetynet;
-
-import org.microg.safeparcel.AutoSafeParcelable;
-import org.microg.safeparcel.SafeParceled;
-
-public class AttestationData extends AutoSafeParcelable {
-    @SafeParceled(1)
-    private int versionCode = 1;
-    @SafeParceled(2)
-    private final String jwsResult;
-
-    private AttestationData() {
-        jwsResult = null;
-    }
-
-    public AttestationData(String jwsResult) {
-        this.jwsResult = jwsResult;
-    }
-
-    public String getJwsResult() {
-        return jwsResult;
-    }
-
-    public static final Creator<AttestationData> CREATOR = new AutoCreator<AttestationData>(AttestationData.class);
-}
diff --git a/play-services-api/src/main/java/com/google/android/gms/safetynet/HarmfulAppsData.java b/play-services-api/src/main/java/com/google/android/gms/safetynet/HarmfulAppsData.java
deleted file mode 100644
index e043522b..00000000
--- a/play-services-api/src/main/java/com/google/android/gms/safetynet/HarmfulAppsData.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/*
- * SPDX-FileCopyrightText: 2021, microG Project Team
- * SPDX-License-Identifier: Apache-2.0
- * Notice: Portions of this file are reproduced from work created and shared by Google and used
- *         according to terms described in the Creative Commons 4.0 Attribution License.
- *         See https://developers.google.com/readme/policies for details.
- */
-
-package com.google.android.gms.safetynet;
-
-import org.microg.gms.common.PublicApi;
-import org.microg.safeparcel.AutoSafeParcelable;
-
-/**
- * APK information pertaining to one potentially harmful app.
- */
-@PublicApi
-public class HarmfulAppsData extends AutoSafeParcelable {
-    /**
-     * The package name of the potentially harmful app.
-     */
-    @Field(2)
-    public final String apkPackageName;
-    /**
-     * The SHA-256 of the potentially harmful app APK file.
-     */
-    @Field(3)
-    public final byte[] apkSha256;
-    /**
-     * The potentially harmful app category defined in {@link VerifyAppsConstants}.
-     */
-    @Field(4)
-    public final int apkCategory;
-
-    private HarmfulAppsData() {
-        apkPackageName = null;
-        apkSha256 = null;
-        apkCategory = 0;
-    }
-
-    @PublicApi(exclude = true)
-    public HarmfulAppsData(String apkPackageName, byte[] apkSha256, int apkCategory) {
-        this.apkPackageName = apkPackageName;
-        this.apkSha256 = apkSha256;
-        this.apkCategory = apkCategory;
-    }
-
-    public static final Creator<HarmfulAppsData> CREATOR = new AutoCreator<HarmfulAppsData>(HarmfulAppsData.class);
-}
diff --git a/play-services-api/src/main/java/com/google/android/gms/safetynet/HarmfulAppsInfo.java b/play-services-api/src/main/java/com/google/android/gms/safetynet/HarmfulAppsInfo.java
deleted file mode 100644
index 6ae6bf65..00000000
--- a/play-services-api/src/main/java/com/google/android/gms/safetynet/HarmfulAppsInfo.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- * Copyright (C) 2013-2017 microG Project Team
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.android.gms.safetynet;
-
-import org.microg.safeparcel.AutoSafeParcelable;
-
-public class HarmfulAppsInfo extends AutoSafeParcelable {
-    @Field(2)
-    public long field2;
-    @Field(3)
-    public HarmfulAppsData[] data;
-    @Field(4)
-    public int field4;
-    @Field(5)
-    public boolean field5;
-
-    public static final Creator<HarmfulAppsInfo> CREATOR = new AutoCreator<HarmfulAppsInfo>(HarmfulAppsInfo.class);
-}
diff --git a/play-services-api/src/main/java/com/google/android/gms/safetynet/RecaptchaResultData.java b/play-services-api/src/main/java/com/google/android/gms/safetynet/RecaptchaResultData.java
deleted file mode 100644
index 748f1129..00000000
--- a/play-services-api/src/main/java/com/google/android/gms/safetynet/RecaptchaResultData.java
+++ /dev/null
@@ -1,26 +0,0 @@
-/*
- * Copyright (C) 2013-2017 microG Project Team
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.android.gms.safetynet;
-
-import org.microg.safeparcel.AutoSafeParcelable;
-
-public class RecaptchaResultData extends AutoSafeParcelable {
-    @Field(2)
-    public String token;
-
-    public static final Creator<RecaptchaResultData> CREATOR = new AutoCreator<RecaptchaResultData>(RecaptchaResultData.class);
-}
diff --git a/play-services-api/src/main/java/com/google/android/gms/safetynet/RemoveHarmfulAppData.java b/play-services-api/src/main/java/com/google/android/gms/safetynet/RemoveHarmfulAppData.java
deleted file mode 100644
index 32901e07..00000000
--- a/play-services-api/src/main/java/com/google/android/gms/safetynet/RemoveHarmfulAppData.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/*
- * Copyright (C) 2013-2017 microG Project Team
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.android.gms.safetynet;
-
-import org.microg.safeparcel.AutoSafeParcelable;
-
-public class RemoveHarmfulAppData extends AutoSafeParcelable {
-    @Field(2)
-    public int field2;
-    @Field(3)
-    public boolean field3;
-
-    public static final Creator<RemoveHarmfulAppData> CREATOR = new AutoCreator<RemoveHarmfulAppData>(RemoveHarmfulAppData.class);
-}
diff --git a/play-services-api/src/main/java/com/google/android/gms/safetynet/SafeBrowsingData.java b/play-services-api/src/main/java/com/google/android/gms/safetynet/SafeBrowsingData.java
deleted file mode 100644
index f0017e6a..00000000
--- a/play-services-api/src/main/java/com/google/android/gms/safetynet/SafeBrowsingData.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * Copyright (C) 2013-2017 microG Project Team
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.android.gms.safetynet;
-
-import android.os.ParcelFileDescriptor;
-
-import com.google.android.gms.common.data.DataHolder;
-
-import org.microg.safeparcel.AutoSafeParcelable;
-import org.microg.safeparcel.SafeParceled;
-
-import java.io.File;
-
-public class SafeBrowsingData extends AutoSafeParcelable {
-    @Field(1)
-    public int versionCode = 1;
-    @Field(2)
-    public String status;
-    @Field(3)
-    public DataHolder data;
-    @Field(4)
-    public ParcelFileDescriptor fileDescriptor;
-    public File file;
-    public byte[] fileContents;
-    @Field(5)
-    public long field5;
-    @Field(6)
-    public byte[] field6;
-
-    public static final Creator<SafeBrowsingData> CREATOR = new AutoCreator<SafeBrowsingData>(SafeBrowsingData.class);
-}
diff --git a/play-services-api/src/main/java/com/google/android/gms/safetynet/SafetyNetStatusCodes.java b/play-services-api/src/main/java/com/google/android/gms/safetynet/SafetyNetStatusCodes.java
deleted file mode 100644
index 203cb0c4..00000000
--- a/play-services-api/src/main/java/com/google/android/gms/safetynet/SafetyNetStatusCodes.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/*
- * SPDX-FileCopyrightText: 2021, microG Project Team
- * SPDX-License-Identifier: Apache-2.0
- * Notice: Portions of this file are reproduced from work created and shared by Google and used
- *         according to terms described in the Creative Commons 4.0 Attribution License.
- *         See https://developers.google.com/readme/policies for details.
- */
-
-package com.google.android.gms.safetynet;
-
-import com.google.android.gms.common.api.CommonStatusCodes;
-
-/**
- * Status codes for the SafetyNet API.
- */
-public class SafetyNetStatusCodes extends CommonStatusCodes {
-    public static final int SAFE_BROWSING_UNSUPPORTED_THREAT_TYPES = 12000;
-    public static final int SAFE_BROWSING_MISSING_API_KEYINT = 12001;
-    public static final int SAFE_BROWSING_API_NOT_AVAILABLE = 12002;
-    public static final int VERIFY_APPS_NOT_AVAILABLE = 12003;
-    public static final int VERIFY_APPS_INTERNAL_ERROR = 12004;
-    public static final int VERIFY_APPS_NOT_ENABLED = 12005;
-    public static final int UNSUPPORTED_SDK_VERSION = 12006;
-    /**
-     * Cannot start the reCAPTCHA service because site key parameter is not valid.
-     */
-    public static final int RECAPTCHA_INVALID_SITEKEY = 12007;
-    /**
-     * Cannot start the reCAPTCHA service because type of site key is not valid.
-     */
-    public static final int RECAPTCHA_INVALID_KEYTYPE = 12008;
-    public static final int SAFE_BROWSING_API_NOT_INITIALIZED = 12009;
-    /**
-     * Cannot start the reCAPTCHA service because calling package name is not matched with site key.
-     */
-    public static final int RECAPTCHA_INVALID_PACKAGE_NAME = 12013;
-}
diff --git a/play-services-api/src/main/java/com/google/android/gms/safetynet/VerifyAppsConstants.java b/play-services-api/src/main/java/com/google/android/gms/safetynet/VerifyAppsConstants.java
deleted file mode 100644
index bec6b746..00000000
--- a/play-services-api/src/main/java/com/google/android/gms/safetynet/VerifyAppsConstants.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * SPDX-FileCopyrightText: 2021, microG Project Team
- * SPDX-License-Identifier: Apache-2.0
- * Notice: Portions of this file are reproduced from work created and shared by Google and used
- *         according to terms described in the Creative Commons 4.0 Attribution License.
- *         See https://developers.google.com/readme/policies for details.
- */
-
-package com.google.android.gms.safetynet;
-
-import org.microg.gms.common.PublicApi;
-
-/**
- * Constants pertaining to the Verify Apps SafetyNet API.
- */
-@PublicApi
-public class VerifyAppsConstants {
-    /**
-     * An action that is broadcasted when harmful apps are discovered.
-     */
-    public static final String ACTION_HARMFUL_APPS_FOUND = "com.google.android.gms.safetynet.action.HARMFUL_APPS_FOUND";
-    /**
-     * An action that is broadcasted when a harmful app is blocked from installation.
-     */
-    public static final String ACTION_HARMFUL_APP_BLOCKED = "com.google.android.gms.safetynet.action.HARMFUL_APP_BLOCKED";
-    /**
-     * An action that is broadcasted when a harmful app is installed.
-     */
-    public static final String ACTION_HARMFUL_APP_INSTALLED = "com.google.android.gms.safetynet.action.HARMFUL_APP_INSTALLED";
-
-    public static final int HARMFUL_CATEGORY_RANSOMWARE = 1;
-    public static final int HARMFUL_CATEGORY_PHISHING = 2;
-    public static final int HARMFUL_CATEGORY_TROJAN = 3;
-    public static final int HARMFUL_CATEGORY_UNCOMMON = 4;
-    public static final int HARMFUL_CATEGORY_FRAUDWARE = 5;
-    public static final int HARMFUL_CATEGORY_TOLL_FRAUD = 6;
-    public static final int HARMFUL_CATEGORY_WAP_FRAUD = 7;
-    public static final int HARMFUL_CATEGORY_CALL_FRAUD = 8;
-    public static final int HARMFUL_CATEGORY_BACKDOOR = 9;
-    public static final int HARMFUL_CATEGORY_SPYWARE = 10;
-    public static final int HARMFUL_CATEGORY_GENERIC_MALWARE = 11;
-    public static final int HARMFUL_CATEGORY_HARMFUL_SITE = 12;
-    public static final int HARMFUL_CATEGORY_WINDOWS_MALWARE = 13;
-    public static final int HARMFUL_CATEGORY_HOSTILE_DOWNLOADER = 14;
-    public static final int HARMFUL_CATEGORY_NON_ANDROID_THREAT = 15;
-    public static final int HARMFUL_CATEGORY_ROOTING = 16;
-    public static final int HARMFUL_CATEGORY_PRIVILEGE_ESCALATION = 17;
-    public static final int HARMFUL_CATEGORY_TRACKING = 18;
-    public static final int HARMFUL_CATEGORY_SPAM = 19;
-    public static final int HARMFUL_CATEGORY_DENIAL_OF_SERVICE = 20;
-    public static final int HARMFUL_CATEGORY_DATA_COLLECTION = 21;
-}
diff --git a/play-services-base-core/build.gradle b/play-services-base-core/build.gradle
index b9262817..809b3252 100644
--- a/play-services-base-core/build.gradle
+++ b/play-services-base-core/build.gradle
@@ -9,7 +9,7 @@ apply plugin: 'maven-publish'
 apply plugin: 'signing'
 
 dependencies {
-    api project(':play-services-basement')
+    api project(':play-services-basement-ktx')
     api "androidx.lifecycle:lifecycle-service:$lifecycleVersion"
 
     implementation "androidx.annotation:annotation:$annotationVersion"
diff --git a/play-services-base-core/src/main/java/org/microg/gms/BaseService.java b/play-services-base-core/src/main/java/org/microg/gms/BaseService.java
index df1b7288..3941e508 100644
--- a/play-services-base-core/src/main/java/org/microg/gms/BaseService.java
+++ b/play-services-base-core/src/main/java/org/microg/gms/BaseService.java
@@ -29,16 +29,19 @@ import com.google.android.gms.common.internal.IGmsServiceBroker;
 
 import org.microg.gms.common.GmsService;
 
+import java.io.FileDescriptor;
+import java.io.PrintWriter;
 import java.util.Arrays;
 import java.util.EnumSet;
 
 public abstract class BaseService extends LifecycleService {
     private final IGmsServiceBroker broker;
+    private final EnumSet<GmsService> services;
     protected final String TAG;
 
     public BaseService(String tag, GmsService supportedService, GmsService... supportedServices) {
         this.TAG = tag;
-        EnumSet<GmsService> services = EnumSet.of(supportedService);
+        services = EnumSet.of(supportedService);
         services.addAll(Arrays.asList(supportedServices));
         broker = new AbstractGmsServiceBroker(services) {
             @Override
@@ -61,5 +64,10 @@ public abstract class BaseService extends LifecycleService {
         return broker.asBinder();
     }
 
+    @Override
+    protected void dump(FileDescriptor fd, PrintWriter writer, String[] args) {
+        writer.println(TAG + " providing services " + services.toString());
+    }
+
     public abstract void handleServiceRequest(IGmsCallbacks callback, GetServiceRequest request, GmsService service) throws RemoteException;
 }
diff --git a/play-services-base-core/src/main/java/org/microg/gms/common/Build.java b/play-services-base-core/src/main/java/org/microg/gms/common/Build.java
deleted file mode 100644
index 532a6845..00000000
--- a/play-services-base-core/src/main/java/org/microg/gms/common/Build.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/*
- * Copyright (C) 2013-2017 microG Project Team
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.microg.gms.common;
-
-import java.util.Locale;
-import java.util.Random;
-
-public class Build {
-    public String fingerprint = android.os.Build.FINGERPRINT;
-    public String hardware = android.os.Build.HARDWARE;
-    public String brand = android.os.Build.BRAND;
-    public String radio = getRadio();
-    public String bootloader = android.os.Build.BOOTLOADER;
-    public long time = android.os.Build.TIME;
-    public String device = android.os.Build.DEVICE;
-    public int sdk = android.os.Build.VERSION.SDK_INT;
-    public String model = android.os.Build.MODEL;
-    public String manufacturer = android.os.Build.MANUFACTURER;
-    public String product = android.os.Build.PRODUCT;
-    public String id = android.os.Build.ID;
-    public String serial = generateSerialNumber(); // TODO: static
-
-    @SuppressWarnings("deprecation")
-    private static String getRadio() {
-        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
-            return android.os.Build.getRadioVersion();
-        } else {
-            return android.os.Build.RADIO;
-        }
-    }
-
-    private String generateSerialNumber() {
-        String serial = "008741";
-        Random rand = new Random();
-        for (int i = 0; i < 10; i++)
-            serial += Integer.toString(rand.nextInt(16), 16);
-        serial = serial.toUpperCase(Locale.US);
-        return serial;
-    }
-}
diff --git a/play-services-base-core/src/main/java/org/microg/gms/common/PackageUtils.java b/play-services-base-core/src/main/java/org/microg/gms/common/PackageUtils.java
index 4abbcd2a..073a0d8c 100644
--- a/play-services-base-core/src/main/java/org/microg/gms/common/PackageUtils.java
+++ b/play-services-base-core/src/main/java/org/microg/gms/common/PackageUtils.java
@@ -137,6 +137,30 @@ public class PackageUtils {
         return null;
     }
 
+    @Nullable
+    public static byte[] firstSignatureDigestBytes(Context context, String packageName) {
+        return firstSignatureDigestBytes(context.getPackageManager(), packageName);
+    }
+
+    @Nullable
+    public static byte[] firstSignatureDigestBytes(PackageManager packageManager, String packageName) {
+        final PackageInfo info;
+        try {
+            info = packageManager.getPackageInfo(packageName, PackageManager.GET_SIGNATURES);
+        } catch (PackageManager.NameNotFoundException e) {
+            return null;
+        }
+        if (info != null && info.signatures != null && info.signatures.length > 0) {
+            for (Signature sig : info.signatures) {
+                byte[] digest = sha1bytes(sig.toByteArray());
+                if (digest != null) {
+                    return digest;
+                }
+            }
+        }
+        return null;
+    }
+
     @Nullable
     public static String getCallingPackage(Context context) {
         int callingUid = Binder.getCallingUid(), callingPid = Binder.getCallingPid();
@@ -152,6 +176,18 @@ public class PackageUtils {
         return getAndCheckCallingPackage(context, suggestedPackageName, 0);
     }
 
+    @Nullable
+    public static String getAndCheckCallingPackageOrExtendedAccess(Context context, String suggestedPackageName) {
+        try {
+            return getAndCheckCallingPackage(context, suggestedPackageName, 0);
+        } catch (Exception e) {
+            if (callerHasExtendedAccess(context)) {
+                return suggestedPackageName;
+            }
+            throw e;
+        }
+    }
+
     @Nullable
     public static String getAndCheckCallingPackage(Context context, int suggestedCallerUid) {
         return getAndCheckCallingPackage(context, null, suggestedCallerUid);
@@ -299,6 +335,19 @@ public class PackageUtils {
         return null;
     }
 
+    public static byte[] sha1bytes(byte[] bytes) {
+        MessageDigest md;
+        try {
+            md = MessageDigest.getInstance("SHA1");
+        } catch (final NoSuchAlgorithmException e) {
+            return null;
+        }
+        if (md != null) {
+            return md.digest(bytes);
+        }
+        return null;
+    }
+
     public static int versionCode(Context context, String packageName) {
         try {
             return context.getPackageManager().getPackageInfo(packageName, 0).versionCode;
diff --git a/play-services-base-core/src/main/java/org/microg/gms/common/Utils.java b/play-services-base-core/src/main/java/org/microg/gms/common/Utils.java
index c965a444..5e5dfd7a 100644
--- a/play-services-base-core/src/main/java/org/microg/gms/common/Utils.java
+++ b/play-services-base-core/src/main/java/org/microg/gms/common/Utils.java
@@ -33,10 +33,6 @@ public class Utils {
         return Locale.getDefault(); // TODO
     }
 
-    public static Build getBuild(Context context) {
-        return new Build();
-    }
-
     public static DeviceIdentifier getDeviceIdentifier(Context context) {
         return new DeviceIdentifier();
     }
diff --git a/play-services-base-core/src/main/kotlin/org/microg/gms/settings/SettingsContract.kt b/play-services-base-core/src/main/kotlin/org/microg/gms/settings/SettingsContract.kt
index 1287c3ea..42b8b7cb 100644
--- a/play-services-base-core/src/main/kotlin/org/microg/gms/settings/SettingsContract.kt
+++ b/play-services-base-core/src/main/kotlin/org/microg/gms/settings/SettingsContract.kt
@@ -107,6 +107,42 @@ object SettingsContract {
         private const val id = "safety-net"
         fun getContentUri(context: Context) = Uri.withAppendedPath(getAuthorityUri(context), id)
         fun getContentType(context: Context) = "vnd.android.cursor.item/vnd.${getAuthority(context)}.$id"
+
+        const val ENABLED = "safetynet_enabled"
+
+        val PROJECTION = arrayOf(
+            ENABLED
+        )
+    }
+
+    object DroidGuard {
+        private const val id = "droidguard"
+        fun getContentUri(context: Context) = Uri.withAppendedPath(getAuthorityUri(context), id)
+        fun getContentType(context: Context) = "vnd.android.cursor.item/vnd.${getAuthority(context)}.$id"
+
+        const val ENABLED = "droidguard_enabled"
+        const val MODE = "droidguard_mode"
+        const val NETWORK_SERVER_URL = "droidguard_network_server_url"
+
+        val PROJECTION = arrayOf(
+            ENABLED,
+            MODE,
+            NETWORK_SERVER_URL
+        )
+    }
+
+    object Profile {
+        private const val id = "profile"
+        fun getContentUri(context: Context) = Uri.withAppendedPath(getAuthorityUri(context), id)
+        fun getContentType(context: Context) = "vnd.android.cursor.item/vnd.${getAuthority(context)}.$id"
+
+        const val PROFILE = "device_profile"
+        const val SERIAL = "device_profile_serial"
+
+        val PROJECTION = arrayOf(
+            PROFILE,
+            SERIAL
+        )
     }
 
     private fun <T> withoutCallingIdentity(f: () -> T): T {
@@ -118,6 +154,7 @@ object SettingsContract {
         }
     }
 
+    @JvmStatic
     fun <T> getSettings(context: Context, uri: Uri, projection: Array<out String>?, f: (Cursor) -> T): T = withoutCallingIdentity {
         context.contentResolver.query(uri, projection, null, null, null).use { c ->
             require(c != null) { "Cursor for query $uri ${projection?.toList()} was null" }
@@ -126,6 +163,7 @@ object SettingsContract {
         }
     }
 
+    @JvmStatic
     fun setSettings(context: Context, uri: Uri, v: ContentValues.() -> Unit) = withoutCallingIdentity {
         val values = ContentValues().apply { v.invoke(this) }
         val affected = context.contentResolver.update(uri, values, null, null)
diff --git a/play-services-base-core/src/main/kotlin/org/microg/gms/settings/SettingsProvider.kt b/play-services-base-core/src/main/kotlin/org/microg/gms/settings/SettingsProvider.kt
index b59da582..c4adcc96 100644
--- a/play-services-base-core/src/main/kotlin/org/microg/gms/settings/SettingsProvider.kt
+++ b/play-services-base-core/src/main/kotlin/org/microg/gms/settings/SettingsProvider.kt
@@ -17,8 +17,11 @@ import android.preference.PreferenceManager
 import org.microg.gms.common.PackageUtils.warnIfNotMainProcess
 import org.microg.gms.settings.SettingsContract.Auth
 import org.microg.gms.settings.SettingsContract.CheckIn
+import org.microg.gms.settings.SettingsContract.DroidGuard
 import org.microg.gms.settings.SettingsContract.Exposure
 import org.microg.gms.settings.SettingsContract.Gcm
+import org.microg.gms.settings.SettingsContract.Profile
+import org.microg.gms.settings.SettingsContract.SafetyNet
 import org.microg.gms.settings.SettingsContract.getAuthority
 import java.io.File
 
@@ -61,6 +64,9 @@ class SettingsProvider : ContentProvider() {
         Gcm.getContentUri(context!!) -> queryGcm(projection ?: Gcm.PROJECTION)
         Auth.getContentUri(context!!) -> queryAuth(projection ?: Auth.PROJECTION)
         Exposure.getContentUri(context!!) -> queryExposure(projection ?: Exposure.PROJECTION)
+        SafetyNet.getContentUri(context!!) -> querySafetyNet(projection ?: SafetyNet.PROJECTION)
+        DroidGuard.getContentUri(context!!) -> queryDroidGuard(projection ?: DroidGuard.PROJECTION)
+        Profile.getContentUri(context!!) -> queryProfile(projection ?: Profile.PROJECTION)
         else -> null
     }
 
@@ -77,6 +83,9 @@ class SettingsProvider : ContentProvider() {
             Gcm.getContentUri(context!!) -> updateGcm(values)
             Auth.getContentUri(context!!) -> updateAuth(values)
             Exposure.getContentUri(context!!) -> updateExposure(values)
+            SafetyNet.getContentUri(context!!) -> updateSafetyNet(values)
+            DroidGuard.getContentUri(context!!) -> updateDroidGuard(values)
+            Profile.getContentUri(context!!) -> updateProfile(values)
             else -> return 0
         }
         return 1
@@ -216,9 +225,72 @@ class SettingsProvider : ContentProvider() {
         editor.apply()
     }
 
+    private fun querySafetyNet(p: Array<out String>): Cursor = MatrixCursor(p).addRow(p) { key ->
+        when (key) {
+            SafetyNet.ENABLED -> getSettingsBoolean(key, false)
+            else -> throw IllegalArgumentException("Unknown key: $key")
+        }
+    }
+
+    private fun updateSafetyNet(values: ContentValues) {
+        if (values.size() == 0) return
+        val editor = preferences.edit()
+        values.valueSet().forEach { (key, value) ->
+            when (key) {
+                SafetyNet.ENABLED -> editor.putBoolean(key, value as Boolean)
+                else -> throw IllegalArgumentException("Unknown key: $key")
+            }
+        }
+        editor.apply()
+    }
+
+    private fun queryDroidGuard(p: Array<out String>): Cursor = MatrixCursor(p).addRow(p) { key ->
+        when (key) {
+            DroidGuard.ENABLED -> getSettingsBoolean(key, false)
+            DroidGuard.MODE -> getSettingsString(key)
+            DroidGuard.NETWORK_SERVER_URL -> getSettingsString(key)
+            else -> throw IllegalArgumentException("Unknown key: $key")
+        }
+    }
+
+    private fun updateDroidGuard(values: ContentValues) {
+        if (values.size() == 0) return
+        val editor = preferences.edit()
+        values.valueSet().forEach { (key, value) ->
+            when (key) {
+                DroidGuard.ENABLED -> editor.putBoolean(key, value as Boolean)
+                DroidGuard.MODE -> editor.putString(key, value as String)
+                DroidGuard.NETWORK_SERVER_URL -> editor.putString(key, value as String)
+                else -> throw IllegalArgumentException("Unknown key: $key")
+            }
+        }
+        editor.apply()
+    }
+
+    private fun queryProfile(p: Array<out String>): Cursor = MatrixCursor(p).addRow(p) { key ->
+        when (key) {
+            Profile.PROFILE -> getSettingsString(key, "auto")
+            Profile.SERIAL -> getSettingsString(key)
+            else -> throw IllegalArgumentException("Unknown key: $key")
+        }
+    }
+
+    private fun updateProfile(values: ContentValues) {
+        if (values.size() == 0) return
+        val editor = preferences.edit()
+        values.valueSet().forEach { (key, value) ->
+            when (key) {
+                Profile.PROFILE -> editor.putString(key, value as String?)
+                Profile.SERIAL -> editor.putString(key, value as String?)
+                else -> throw IllegalArgumentException("Unknown key: $key")
+            }
+        }
+        editor.apply()
+    }
+
     private fun MatrixCursor.addRow(
         p: Array<out String>,
-        valueGetter: (String) -> Any
+        valueGetter: (String) -> Any?
     ): MatrixCursor {
         val row = newRow()
         for (key in p) row.add(valueGetter.invoke(key))
@@ -243,7 +315,16 @@ class SettingsProvider : ContentProvider() {
      * @return the current setting as [Int], because [ContentProvider] does not support [Boolean].
      */
     private fun getSettingsBoolean(key: String, def: Boolean): Int {
-        val default = systemDefaultPreferences?.getBoolean(key, def) ?: def
-        return if (preferences.getBoolean(key, default)) 1 else 0
+        return listOf(preferences, systemDefaultPreferences).getBooleanAsInt(key, def)
     }
+
+    private fun getSettingsString(key: String, def: String? = null): String? = listOf(preferences, systemDefaultPreferences).getString(key, def)
+    private fun getSettingsInt(key: String, def: Int): Int = listOf(preferences, systemDefaultPreferences).getInt(key, def)
+    private fun getSettingsLong(key: String, def: Long): Long = listOf(preferences, systemDefaultPreferences).getLong(key, def)
+
+    private fun List<SharedPreferences?>.getString(key: String, def: String?): String? = foldRight(def) { preferences, defValue -> preferences?.getString(key, defValue) ?: defValue }
+    private fun List<SharedPreferences?>.getInt(key: String, def: Int): Int = foldRight(def) { preferences, defValue -> preferences?.getInt(key, defValue) ?: defValue }
+    private fun List<SharedPreferences?>.getLong(key: String, def: Long): Long = foldRight(def) { preferences, defValue -> preferences?.getLong(key, defValue) ?: defValue }
+    private fun List<SharedPreferences?>.getBoolean(key: String, def: Boolean): Boolean = foldRight(def) { preferences, defValue -> preferences?.getBoolean(key, defValue) ?: defValue }
+    private fun List<SharedPreferences?>.getBooleanAsInt(key: String, def: Boolean): Int = if (getBoolean(key, def)) 1 else 0
 }
diff --git a/play-services-base-core/src/main/kotlin/org/microg/gms/utils/BinderUtils.kt b/play-services-base-core/src/main/kotlin/org/microg/gms/utils/BinderUtils.kt
index f00c97fb..79e8ff8f 100644
--- a/play-services-base-core/src/main/kotlin/org/microg/gms/utils/BinderUtils.kt
+++ b/play-services-base-core/src/main/kotlin/org/microg/gms/utils/BinderUtils.kt
@@ -6,16 +6,19 @@
 package org.microg.gms.utils
 
 import android.os.Binder
+import android.os.IBinder
 import android.os.Parcel
 import android.util.Log
 
-fun warnOnTransactionIssues(tag: String, code: Int, reply: Parcel?, flags: Int, base: () -> Boolean): Boolean {
+private const val TAG = "BinderUtils"
+
+fun IBinder.warnOnTransactionIssues(code: Int, reply: Parcel?, flags: Int, base: () -> Boolean): Boolean {
     if (base.invoke()) {
         if ((flags and Binder.FLAG_ONEWAY) > 0 && (reply?.dataSize() ?: 0) > 0) {
-            Log.w(tag, "onTransact[$code] is oneway, but returned data")
+            Log.w(TAG, "Method $code in $interfaceDescriptor is oneway, but returned data")
         }
         return true
     }
-    Log.w(tag, "onTransact[$code] is not processed.")
+    Log.w(TAG, "Unknown method $code in $interfaceDescriptor, skipping")
     return (flags and Binder.FLAG_ONEWAY) > 0 // Don't return false on oneway transaction to suppress warning
 }
diff --git a/play-services-base/build.gradle b/play-services-base/build.gradle
index b87841a8..5f980958 100644
--- a/play-services-base/build.gradle
+++ b/play-services-base/build.gradle
@@ -39,9 +39,12 @@ apply from: '../gradle/publish-android.gradle'
 description = 'microG implementation of play-services-base'
 
 dependencies {
-    api project(':play-services-basement')
-    api project(':play-services-tasks')
     api project(':play-services-base-api')
 
-    implementation "androidx.fragment:fragment:$fragmentVersion"
+    // Dependencies from play-services-base:18.0.1
+    api "androidx.collection:collection:1.0.0"
+    api "androidx.core:core:1.2.0"
+    api "androidx.fragment:fragment:1.0.0"
+    api project(':play-services-basement')
+    api project(':play-services-tasks')
 }
diff --git a/play-services-base/src/main/java/org/microg/gms/common/GmsClient.java b/play-services-base/src/main/java/org/microg/gms/common/GmsClient.java
index dec9c8ca..a03b2c3b 100644
--- a/play-services-base/src/main/java/org/microg/gms/common/GmsClient.java
+++ b/play-services-base/src/main/java/org/microg/gms/common/GmsClient.java
@@ -111,7 +111,7 @@ public abstract class GmsClient<I extends IInterface> implements ApiClient {
 
     @Override
     public synchronized boolean isConnected() {
-        return state == ConnectionState.CONNECTED || state == ConnectionState.PSEUDO_CONNECTED;
+        return (state == ConnectionState.CONNECTED && serviceInterface != null && serviceInterface.asBinder().isBinderAlive() ) || state == ConnectionState.PSEUDO_CONNECTED;
     }
 
     @Override
diff --git a/play-services-base/src/main/java/org/microg/gms/common/api/GoogleApiManager.java b/play-services-base/src/main/java/org/microg/gms/common/api/GoogleApiManager.java
index 1662ca31..8ceae6f0 100644
--- a/play-services-base/src/main/java/org/microg/gms/common/api/GoogleApiManager.java
+++ b/play-services-base/src/main/java/org/microg/gms/common/api/GoogleApiManager.java
@@ -7,6 +7,7 @@ package org.microg.gms.common.api;
 
 import android.content.Context;
 import android.os.Bundle;
+import android.os.DeadObjectException;
 
 import com.google.android.gms.common.ConnectionResult;
 import com.google.android.gms.common.api.Api;
diff --git a/play-services-basement/build.gradle b/play-services-basement/build.gradle
index 84ebb440..9f4662e0 100644
--- a/play-services-basement/build.gradle
+++ b/play-services-basement/build.gradle
@@ -15,15 +15,16 @@
  */
 
 apply plugin: 'com.android.library'
-apply plugin: 'kotlin-android'
 apply plugin: 'maven-publish'
 apply plugin: 'signing'
 
 dependencies {
     api "org.microg:safe-parcel:$safeParcelVersion"
 
-    implementation "androidx.annotation:annotation:$annotationVersion"
-    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
+    // Dependencies from play-services-basement:18.0.0
+    api "androidx.collection:collection:1.0.0"
+    api "androidx.core:core:1.2.0"
+    api "androidx.fragment:fragment:1.0.0"
 }
 
 android {
@@ -42,10 +43,6 @@ android {
         buildConfigField "int", "VERSION_CODE", "$appVersionCode"
     }
 
-    sourceSets {
-        main.java.srcDirs += 'src/main/kotlin'
-    }
-
     compileOptions {
         sourceCompatibility = 1.8
         targetCompatibility = 1.8
diff --git a/play-services-basement/src/main/java/com/google/android/gms/common/api/Status.java b/play-services-basement/src/main/java/com/google/android/gms/common/api/Status.java
index 6a80ff39..d5a06814 100644
--- a/play-services-basement/src/main/java/com/google/android/gms/common/api/Status.java
+++ b/play-services-basement/src/main/java/com/google/android/gms/common/api/Status.java
@@ -32,11 +32,11 @@ import org.microg.safeparcel.SafeParceled;
 @PublicApi
 public final class Status extends AutoSafeParcelable implements Result {
     @PublicApi(exclude = true)
-    public static final Status INTERNAL_ERROR = new Status(CommonStatusCodes.INTERNAL_ERROR);
+    public static final Status INTERNAL_ERROR = new Status(CommonStatusCodes.INTERNAL_ERROR, "Internal error");
     @PublicApi(exclude = true)
-    public static final Status CANCELED = new Status(CommonStatusCodes.CANCELED);
+    public static final Status CANCELED = new Status(CommonStatusCodes.CANCELED, "Cancelled");
     @PublicApi(exclude = true)
-    public static final Status SUCCESS = new Status(CommonStatusCodes.SUCCESS);
+    public static final Status SUCCESS = new Status(CommonStatusCodes.SUCCESS, "Success");
 
     @SafeParceled(1000)
     private int versionCode = 1;
diff --git a/play-services-basement/src/main/java/com/google/android/gms/common/internal/GetServiceRequest.java b/play-services-basement/src/main/java/com/google/android/gms/common/internal/GetServiceRequest.java
index fbd84dba..9b7c594e 100644
--- a/play-services-basement/src/main/java/com/google/android/gms/common/internal/GetServiceRequest.java
+++ b/play-services-basement/src/main/java/com/google/android/gms/common/internal/GetServiceRequest.java
@@ -57,6 +57,10 @@ public class GetServiceRequest extends AutoSafeParcelable {
     private boolean field12;
     @Field(13)
     private int field13;
+    @Field(14)
+    private boolean field14;
+    @Field(15)
+    private String field15;
 
     private GetServiceRequest() {
         serviceId = -1;
diff --git a/play-services-basement/src/main/java/org/microg/gms/common/GmsService.java b/play-services-basement/src/main/java/org/microg/gms/common/GmsService.java
index bd289c70..91e54c1b 100644
--- a/play-services-basement/src/main/java/org/microg/gms/common/GmsService.java
+++ b/play-services-basement/src/main/java/org/microg/gms/common/GmsService.java
@@ -33,7 +33,7 @@ public enum GmsService {
     ADDRESS(12, "com.google.android.gms.identity.service.BIND"),
     CAR(13, "com.google.android.gms.car.service.START"),
     WEARABLE(14, "com.google.android.gms.wearable.BIND"),
-    AUTH(16, "com.google.android.gms.auth.service.START"),
+    AUTH_PROXY(16, "com.google.android.gms.auth.service.START"),
     FITNESS(17, "com.google.android.gms.fitness.GoogleFitnessService.START"),
     REMINDERS(18, "com.google.android.gms.reminders.service.START"),
     LIGHTWEIGHT_INDEX(19, "com.google.android.gms.icing.LIGHTWEIGHT_INDEX_SERVICE"),
@@ -103,9 +103,12 @@ public enum GmsService {
     APP_INDEXING(113),
     GASS(116, "com.google.android.gms.gass.START"),
     WORK_ACCOUNT(120),
+    INSTANT_APPS(121, "com.google.android.gms.instantapps.START"),
     CAST_FIRSTPATY(122, "com.google.android.gms.cast.firstparty.START"),
     AD_CACHE(123, "com.google.android.gms.ads.service.CACHE"),
+    CRYPT_AUTH(129, "com.google.android.gms.auth.cryptauth.cryptauthservice.START"),
     DYNAMIC_LINKS(131, "com.google.firebase.dynamiclinks.service.START"),
+    FONTS(132, "com.google.android.gms.fonts.service.START"),
     ROMANESCO(135, "com.google.android.gms.romanesco.service.START"),
     TRAINER(139, "com.google.android.gms.learning.trainer.START"),
     FIDO2_REGULAR(148, "com.google.android.gms.fido.fido2.regular.START"),
@@ -116,14 +119,20 @@ public enum GmsService {
     AUDIT(154, "com.google.android.gms.audit.service.START"),
     SYSTEM_UPDATE(157, "com.google.android.gms.update.START_API_SERVICE"),
     USER_LOCATION(163, "com.google.android.gms.userlocation.service.START"),
+    AD_HTTP(166, "com.google.android.gms.ads.service.HTTP"),
     LANGUAGE_PROFILE(167, "com.google.android.gms.languageprofile.service.START"),
     MDNS(168, "com.google.android.gms.mdns.service.START"),
     FIDO2_ZEROPARTY(180, "com.google.android.gms.fido.fido2.zeroparty.START"),
     G1_RESTORE(181, "com.google.android.gms.backup.G1_RESTORE"),
     G1_BACKUP(182, "com.google.android.gms.backup.G1_BACKUP"),
+    OSS_LICENSES(185, "com.google.android.gms.oss.licenses.service.START"),
+    PAYSE(188, "com.google.android.gms.payse.service.BIND"),
+    RCS(189, "com.google.android.gms.rcs.START"),
     CARRIER_AUTH(191, "com.google.android.gms.carrierauth.service.START"),
     SYSTEM_UPDATE_SINGLE_UESR(192, "com.google.android.gms.update.START_SINGLE_USER_API_SERVICE"),
     APP_USAGE(193, "com.google.android.gms.appusage.service.START"),
+    NEARBY_SHARING_2(194, "com.google.android.gms.nearby.sharing.START_SERVICE"),
+    AD_CONSENT_LOOKUP(195, "com.google.android.gms.ads.service.CONSENT_LOOKUP"),
     PHONE_INTERNAL(197, "com.google.android.gms.auth.api.phone.service.InternalService.START"),
     PAY(198, "com.google.android.gms.pay.service.BIND"),
     ASTERISM(199, "com.google.android.gms.asterism.service.START"),
@@ -137,12 +146,22 @@ public enum GmsService {
     SCHEDULER(218, "com.google.android.gms.scheduler.ACTION_PROXY_SCHEDULE"),
     AUTHORIZATION(219, "com.google.android.gms.auth.api.identity.service.authorization.START"),
     FACS_SYNC(220, "com.google.android.gms.facs.internal.service.START"),
-    CONFIG_SYNC(221, "com.google.android.gms.auth.config.service.START"),
+    AUTH_CONFIG_SYNC(221, "com.google.android.gms.auth.config.service.START"),
     CREDENTIAL_SAVING(223, "com.google.android.gms.auth.api.identity.service.credentialsaving.START"),
     GOOGLE_AUTH(224, "com.google.android.gms.auth.account.authapi.START"),
     ENTERPRISE_LOADER(225, "com.google.android.gms.enterprise.loader.service.START"),
     THUNDERBIRD(226, "com.google.android.gms.thunderbird.service.START"),
     NEARBY_EXPOSURE(236, "com.google.android.gms.nearby.exposurenotification.START"),
+    GMS_COMPLIANCE(257, "com.google.android.gms.gmscompliance.service.START"),
+    FIDO_SOURCE_DEVICE(262, "com.google.android.gms.fido.sourcedevice.service.START"),
+    FAST_PAIR(265, "com.google.android.gms.nearby.fastpair.START"),
+    MATCHSTICK_LIGHTER(268, "com.google.android.gms.matchstick.lighter.service.START"),
+    FIDO_TARGET_DEVICE_INTERNAL(269, "com.google.android.gms.fido.targetdevice.internal_service.START"),
+    TELEMETRY(270, "com.google.android.gms.common.telemetry.service.START"),
+    SECOND_DEVICE_AUTH(275, "com.google.android.gms.setup.auth.SecondDeviceAuth.START"),
+    LOCATION_SHARING_REPORTER(277, "com.google.android.gms.locationsharingreporter.service.START"),
+    OCR(279, "com.google.android.gms.ocr.service.START"),
+    OCR_INTERNAL(281, "com.google.android.gms.ocr.service.internal.START"),
     ;
 
     public int SERVICE_ID;
diff --git a/play-services-basement/src/main/kotlin/com/google/android/gms/dynamic/ObjectWrapper.kt b/play-services-basement/src/main/kotlin/com/google/android/gms/dynamic/ObjectWrapper.kt
deleted file mode 100644
index b86ff01f..00000000
--- a/play-services-basement/src/main/kotlin/com/google/android/gms/dynamic/ObjectWrapper.kt
+++ /dev/null
@@ -1,19 +0,0 @@
-/*
- * Copyright (C) 2019 microG Project Team
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.android.gms.dynamic
-
-inline fun <reified T> IObjectWrapper?.unwrap(): T? = ObjectWrapper.unwrapTyped(this, T::class.java)
diff --git a/play-services-cast/build.gradle b/play-services-cast/build.gradle
index 85ea138a..df21e2e3 100644
--- a/play-services-cast/build.gradle
+++ b/play-services-cast/build.gradle
@@ -1,17 +1,6 @@
 /*
- * Copyright 2013-2015 microG Project Team
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * SPDX-FileCopyrightText: 2015 microG Project Team
+ * SPDX-License-Identifier: Apache-2.0
  */
 
 apply plugin: 'com.android.library'
@@ -42,6 +31,13 @@ android {
 }
 
 dependencies {
-    api project(':play-services-base')
     api project(':play-services-cast-api')
+
+    // Dependencies from play-services-cast:21.0.1
+    api "androidx.core:core:1.0.0"
+    api "androidx.mediarouter:mediarouter:1.2.2"
+    api project(':play-services-base')
+    api project(':play-services-basement')
+    //api project(':play-services-flags')
+    api project(':play-services-tasks')
 }
diff --git a/play-services-core-proto/src/main/proto/snet.proto b/play-services-core-proto/src/main/proto/snet.proto
deleted file mode 100644
index 5cef4672..00000000
--- a/play-services-core-proto/src/main/proto/snet.proto
+++ /dev/null
@@ -1,34 +0,0 @@
-option java_package = "org.microg.gms.snet";
-
-option java_outer_classname = "SafetyNetProto";
-
-message SELinuxState {
-    optional bool supported = 1;
-    optional bool enabled = 2;
-}
-
-message FileState {
-    optional string fileName = 1;
-    optional bytes digest = 2;
-}
-
-message SafetyNetData {
-    optional bytes nonce = 1;
-    optional string packageName = 2;
-    repeated bytes signatureDigest = 3;
-    optional bytes fileDigest = 4;
-    optional int32 gmsVersionCode = 5;
-    repeated FileState suCandidates = 6;
-    optional SELinuxState seLinuxState = 7;
-    optional int64 currentTimeMs = 8;
-    optional bool googleCn = 9;
-}
-
-message AttestRequest {
-    optional bytes safetyNetData = 1;
-    optional string droidGuardResult = 2;
-}
-
-message AttestResponse {
-    optional string result = 2;
-}
\ No newline at end of file
diff --git a/play-services-core/build.gradle b/play-services-core/build.gradle
index 2252b4a6..e24d2a78 100644
--- a/play-services-core/build.gradle
+++ b/play-services-core/build.gradle
@@ -1,17 +1,6 @@
 /*
- * Copyright 2013-2019 microG Project Team
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * SPDX-FileCopyrightText: 2013 microG Project Team
+ * SPDX-License-Identifier: Apache-2.0
  */
 
 apply plugin: 'com.android.application'
@@ -44,9 +33,14 @@ dependencies {
     implementation project(':play-services-base-core-ui')
     implementation project(':play-services-conscrypt-provider-core')
     implementation project(':play-services-cronet-core')
+    implementation project(':play-services-droidguard-core')
+    implementation project(':play-services-droidguard-core-ui')
     implementation project(':play-services-location-core')
     withNearbyImplementation project(':play-services-nearby-core')
     withNearbyImplementation project(':play-services-nearby-core-ui')
+    implementation project(':play-services-safetynet-core')
+    implementation project(':play-services-oss-licenses-core')
+    implementation project(':play-services-safetynet-core-ui')
     implementation project(':play-services-tapandpay-core')
     implementation project(':play-services-vision-core')
 
@@ -56,7 +50,11 @@ dependencies {
     implementation project(':play-services-cast-api')
     implementation project(':play-services-wearable')
     implementation "org.microg:wearable:$wearableVersion"
-    implementation "org.microg.gms:remote-droid-guard:$remoteDroidGuardVersion"
+
+    runtimeOnly "org.microg.nlp:geocode-v1:$nlpVersion"
+    runtimeOnly "org.microg.nlp:location-v2:$nlpVersion"
+    runtimeOnly "org.microg.nlp:location-v3:$nlpVersion"
+    implementation "org.microg.nlp:ui:$nlpVersion"
 
     withMapboxImplementation project(':play-services-maps-core-mapbox')
     withVtmImplementation project(':play-services-maps-core-vtm')
diff --git a/play-services-core/src/main/AndroidManifest.xml b/play-services-core/src/main/AndroidManifest.xml
index 693ec889..0649e1bb 100644
--- a/play-services-core/src/main/AndroidManifest.xml
+++ b/play-services-core/src/main/AndroidManifest.xml
@@ -26,10 +26,12 @@
     <permission
         android:name="com.google.android.c2dm.permission.SEND"
         android:label="@string/perm_c2dm_send_label"
-        android:protectionLevel="signature" />
+        android:permissionGroup="android.permission-group.NETWORK"
+        android:protectionLevel="privileged|signature" />
     <permission
         android:name="com.google.android.gtalkservice.permission.GTALK_SERVICE"
         android:label="@string/perm_gtalk_svc_label"
+        android:permissionGroup="android.permission-group.MESSAGES"
         android:protectionLevel="signature" />
 
     <permission-tree
@@ -109,14 +111,17 @@
         tools:ignore="ProtectedPermissions" />
 
     <application
-        android:name="androidx.multidex.MultiDexApplication"
         android:allowBackup="true"
-        android:fullBackupOnly="true"
         android:extractNativeLibs="false"
         android:forceQueryable="true"
+        android:fullBackupOnly="true"
         android:icon="@mipmap/ic_core_service_app"
         android:label="@string/gms_app_name"
+        android:multiArch="true"
         android:theme="@style/Theme.AppCompat.DayNight">
+
+        <library android:name="com.google.android.gms" />
+
         <meta-data
             android:name="fake-signature"
             android:value="@string/fake_signature" />
@@ -292,30 +297,6 @@
             </intent-filter>
         </receiver>
 
-        <!-- DroidGuard / SafetyNet / reCAPTCHA -->
-
-        <service android:name="org.microg.gms.droidguard.DroidGuardService">
-            <intent-filter>
-                <action android:name="com.google.android.gms.droidguard.service.START" />
-                <action android:name="com.google.android.gms.droidguard.service.PING" />
-
-                <category android:name="android.intent.category.DEFAULT" />
-            </intent-filter>
-        </service>
-        <receiver android:name="org.microg.gms.droidguard.ServiceInfoReceiver" />
-
-        <service android:name="org.microg.gms.safetynet.SafetyNetClientService">
-            <intent-filter>
-                <action android:name="com.google.android.gms.safetynet.service.START" />
-            </intent-filter>
-        </service>
-        <receiver android:name="org.microg.gms.safetynet.ServiceInfoReceiver" />
-
-        <!-- TODO: Should be in :ui process and contact DroidGuardService instead of directly invoking droidguard -->
-        <activity
-            android:name="org.microg.gms.recaptcha.ReCaptchaActivity"
-            android:theme="@style/Theme.AppCompat.Light.Dialog.NoActionBar" />
-
         <!-- Car -->
 
         <service android:name="org.microg.gms.car.CarService">
@@ -420,7 +401,7 @@
             android:exported="true" />
 
         <activity
-            android:name="org.microg.gms.auth.CredentialPickerActivity"
+            android:name="org.microg.gms.auth.credentials.CredentialPickerActivity"
             android:process=":ui">
             <intent-filter>
                 <action android:name="com.google.android.gms.auth.api.credentials.PICKER" />
@@ -428,12 +409,24 @@
             </intent-filter>
         </activity>
 
-        <service android:name="org.microg.gms.auth.CredentialsService">
+        <service android:name="org.microg.gms.auth.credentials.CredentialsService">
             <intent-filter>
                 <action android:name="com.google.android.gms.auth.api.credentials.service.START" />
             </intent-filter>
         </service>
 
+        <service android:name="org.microg.gms.auth.proxy.AuthProxyService">
+            <intent-filter>
+                <action android:name="com.google.android.gms.auth.service.START" />
+            </intent-filter>
+        </service>
+
+        <service android:name="org.microg.gms.auth.appcert.AppCertService">
+            <intent-filter>
+                <action android:name="com.google.android.gms.auth.be.appcert.AppCertService" />
+            </intent-filter>
+        </service>
+
         <!-- Games -->
 
         <service android:name="org.microg.gms.games.GamesStubService">
@@ -471,7 +464,7 @@
         <provider
             android:name="org.microg.gms.fonts.FontsProvider"
             android:authorities="com.google.android.gms.fonts"
-            android:exported="true"/>
+            android:exported="true" />
 
         <!-- microG Settings shown in Launcher -->
         <activity
@@ -479,7 +472,8 @@
             android:icon="@mipmap/ic_microg_settings"
             android:label="@string/gms_settings_name"
             android:process=":ui"
-            android:roundIcon="@mipmap/ic_microg_settings">
+            android:roundIcon="@mipmap/ic_microg_settings"
+            android:taskAffinity="org.microg.gms.settings">
             <intent-filter>
                 <action android:name="android.intent.action.VIEW" />
                 <data
@@ -504,7 +498,8 @@
             android:icon="@mipmap/ic_microg_settings"
             android:label="Legacy microG Settings"
             android:process=":ui"
-            android:roundIcon="@mipmap/ic_microg_settings" />
+            android:roundIcon="@mipmap/ic_microg_settings"
+            android:taskAffinity="org.microg.gms.settings" />
 
         <!-- microG Settings embedded in System Settings on SDK 23 and newer -->
         <activity-alias
@@ -512,7 +507,8 @@
             android:icon="@drawable/microg_light_color_24"
             android:label="@string/gms_settings_name"
             android:process=":ui"
-            android:targetActivity="org.microg.gms.ui.SettingsActivity">
+            android:targetActivity="org.microg.gms.ui.SettingsActivity"
+            android:taskAffinity="org.microg.gms.settings">
             <intent-filter>
                 <action android:name="com.android.settings.action.EXTRA_SETTINGS" />
             </intent-filter>
@@ -537,26 +533,25 @@
         <activity
             android:name="org.microg.gms.ui.AboutFragment$AsActivity"
             android:label="@string/pref_about_title"
-            android:process=":ui" />
+            android:process=":ui"
+            android:taskAffinity="org.microg.gms.settings" />
 
         <activity
             android:name="org.microg.gms.ui.GoogleMoreFragment$AsActivity"
             android:label="@string/gms_settings_name"
-            android:process=":ui" />
-
-        <activity
-            android:name="org.microg.gms.ui.SafetyNetAdvancedFragment$AsActivity"
-            android:label="@string/service_name_snet"
-            android:process=":ui" />
+            android:process=":ui"
+            android:taskAffinity="org.microg.gms.settings" />
 
         <activity
             android:name="org.microg.gms.ui.SelfCheckFragment$AsActivity"
             android:label="@string/self_check_title"
-            android:process=":ui" />
+            android:process=":ui"
+            android:taskAffinity="org.microg.gms.settings" />
 
         <activity
             android:name="org.microg.gms.ui.AccountSettingsActivity"
-            android:process=":ui">
+            android:process=":ui"
+            android:taskAffinity="org.microg.gms.settings">
             <intent-filter>
                 <action android:name="com.google.android.gms.accountsettings.ACCOUNT_PREFERENCES_SETTINGS" />
                 <action android:name="com.google.android.gms.accountsettings.PRIVACY_SETTINGS" />
@@ -569,7 +564,8 @@
 
         <activity
             android:name="org.microg.gms.ui.LocationSettingsActivity"
-            android:process=":ui">
+            android:process=":ui"
+            android:taskAffinity="org.microg.gms.settings">
             <intent-filter>
                 <action android:name="com.google.android.gms.location.settings.LOCATION_HISTORY" />
                 <action android:name="com.google.android.location.settings.LOCATION_REPORTING_SETTINGS" />
@@ -595,7 +591,7 @@
         <!-- Other -->
 
         <service
-            android:name="org.microg.gms.measurement.MeasurementBrokerService"
+            android:name="org.microg.gms.measurement.MeasurementService"
             android:exported="true">
             <intent-filter>
                 <action android:name="com.google.android.gms.measurement.START" />
@@ -710,37 +706,173 @@
             </intent-filter>
         </service>
 
+        <service android:name="org.microg.gms.usagereporting.UsageReportingService">
+            <intent-filter>
+                <action android:name="com.google.android.gms.usagereporting.service.START" />
+            </intent-filter>
+        </service>
+
         <service android:name="org.microg.gms.DummyService">
             <intent-filter>
-                <action android:name="com.google.android.gms.plus.service.START" />
-                <action android:name="com.google.android.gms.plus.service.internal.START" />
-                <action android:name="com.google.android.gms.panorama.service.START" />
-                <action android:name="com.google.android.gms.appstate.service.START" />
-                <action android:name="com.google.android.gms.ads.service.START" />
+                <action android:name="com.google.android.contextmanager.service.ContextManagerService.START" />
                 <action android:name="com.google.android.gms.accounts.ACCOUNT_SERVICE" />
-                <action android:name="com.google.android.gms.identity.service.BIND" />
-                <action android:name="com.google.android.gms.wearable.BIND" />
+                <action android:name="com.google.android.gms.ads.identifier.service.EVENT_ATTESTATION" />
+                <action android:name="com.google.android.gms.ads.service.CACHE" />
+                <action android:name="com.google.android.gms.ads.service.CONSENT_LOOKUP" />
+                <action android:name="com.google.android.gms.ads.service.HTTP" />
+                <action android:name="com.google.android.gms.ads.service.START" />
+                <action android:name="com.google.android.gms.appstate.service.START" />
+                <action android:name="com.google.android.gms.appusage.service.START" />
+                <action android:name="com.google.android.gms.asterism.service.START" />
+                <action android:name="com.google.android.gms.audiomodem.service.AudioModemService.START" />
+                <action android:name="com.google.android.gms.audit.service.START" />
+                <action android:name="com.google.android.gms.auth.account.authapi.START" />
+                <action android:name="com.google.android.gms.auth.account.authenticator.auto.service.START" />
+                <action android:name="com.google.android.gms.auth.account.authenticator.chromeos.START" />
+                <action android:name="com.google.android.gms.auth.account.authenticator.tv.service.START" />
+                <action android:name="com.google.android.gms.auth.account.data.service.START" />
+                <action android:name="com.google.android.gms.auth.api.identity.service.authorization.START" />
+                <action android:name="com.google.android.gms.auth.api.identity.service.credentialsaving.START" />
+                <action android:name="com.google.android.gms.auth.api.identity.service.signin.START" />
+                <action android:name="com.google.android.gms.auth.api.phone.service.InternalService.START" />
+                <action android:name="com.google.android.gms.auth.api.signin.service.START" />
+                <action android:name="com.google.android.gms.auth.config.service.START" />
+                <action android:name="com.google.android.gms.auth.cryptauth.cryptauthservice.START" />
+                <action android:name="com.google.android.gms.auth.proximity.devicesyncservice.START" />
+                <action android:name="com.google.android.gms.auth.proximity.securechannelservice.START" />
+                <action android:name="com.google.android.gms.auth.proximity.START" />
                 <action android:name="com.google.android.gms.auth.service.START" />
-                <action android:name="com.google.android.gms.fitness.GoogleFitnessService.START" />
-                <action android:name="com.google.android.gms.deviceconnection.service.START" />
-                <action android:name="com.google.android.gms.droidguard.service.START" />
-                <action android:name="com.google.android.gms.lockbox.service.START" />
+                <action android:name="com.google.android.gms.backup.G1_BACKUP" />
+                <action android:name="com.google.android.gms.backup.G1_RESTORE" />
+                <action android:name="com.google.android.gms.backup.GMS_MODULE_RESTORE" />
+                <action android:name="com.google.android.gms.beacon.internal.IBleService.START" />
+                <action android:name="com.google.android.gms.carrierauth.service.START" />
+                <action android:name="com.google.android.gms.cast.firstparty.START" />
                 <action android:name="com.google.android.gms.cast_mirroring.service.START" />
-                <action android:name="com.google.android.gms.photos.autobackup.service.START" />
-                <action android:name="com.google.android.gms.udc.service.START" />
-                <action android:name="com.google.android.gms.mdm.services.DeviceManagerApiService.START" />
-                <action android:name="com.google.android.gms.pseudonymous.service.START" />
+                <action android:name="com.google.android.gms.cast.remote_display.service.START" />
+                <action android:name="com.google.android.gms.chromesync.service.START" />
+                <action android:name="com.google.android.gms.common.download.START" />
                 <action android:name="com.google.android.gms.common.service.START" />
-                <action android:name="com.google.android.gms.usagereporting.service.START" />
+                <action android:name="com.google.android.gms.common.telemetry.service.START" />
+                <action android:name="com.google.android.gms.config.START" />
+                <action android:name="com.google.android.gms.constellation.service.START" />
+                <action android:name="com.google.android.gms.deviceconnection.service.START" />
+                <action android:name="com.google.android.gms.enterprise.loader.service.START" />
+                <action android:name="com.google.android.gms.facs.internal.service.START" />
+                <action android:name="com.google.android.gms.fido.credentialstore.internal_service.START" />
+                <action android:name="com.google.android.gms.fido.fido2.privileged.START" />
+                <action android:name="com.google.android.gms.fido.fido2.regular.START" />
+                <action android:name="com.google.android.gms.fido.fido2.zeroparty.START" />
+                <action android:name="com.google.android.gms.fido.sourcedevice.service.START" />
+                <action android:name="com.google.android.gms.fido.targetdevice.internal_service.START" />
+                <action android:name="com.google.android.gms.fido.u2f.privileged.START" />
+                <action android:name="com.google.android.gms.fido.u2f.thirdparty.START" />
+                <action android:name="com.google.android.gms.fido.u2f.zeroparty.START" />
+                <action android:name="com.google.android.gms.fitness.BleApi" />
+                <action android:name="com.google.android.gms.fitness.ConfigApi" />
+                <action android:name="com.google.android.gms.fitness.GoalsApi" />
+                <action android:name="com.google.android.gms.fitness.GoogleFitnessService.START" />
+                <action android:name="com.google.android.gms.fitness.HistoryApi" />
+                <action android:name="com.google.android.gms.fitness.InternalApi" />
+                <action android:name="com.google.android.gms.fitness.RecordingApi" />
+                <action android:name="com.google.android.gms.fitness.SensorsApi" />
+                <action android:name="com.google.android.gms.fitness.SessionsApi" />
+                <action android:name="com.google.android.gms.fonts.service.START" />
+                <action android:name="com.google.android.gms.freighter.service.START" />
+                <action android:name="com.google.android.gms.gass.START" />
+                <action android:name="com.google.android.gms.growth.service.START" />
+                <action android:name="com.google.android.gms.gmscompliance.service.START" />
+                <action android:name="com.google.android.gms.googlehelp.service.GoogleHelpService.START" />
+                <action android:name="com.google.android.gms.herrevad.services.LightweightNetworkQualityAndroidService.START" />
+                <action android:name="com.google.android.gms.identity.service.BIND" />
+                <action android:name="com.google.android.gms.instantapps.START" />
                 <action android:name="com.google.android.gms.kids.service.START" />
-                <action android:name="com.google.android.gms.common.download.START" />
-                <action android:name="com.google.android.contextmanager.service.ContextManagerService.START" />
-                <action android:name="com.google.android.gms.audiomodem.service.AudioModemService.START" />
+                <action android:name="com.google.android.gms.languageprofile.service.START" />
+                <action android:name="com.google.android.gms.learning.internal.dynamitesupport.START" />
+                <action android:name="com.google.android.gms.learning.intservice.START" />
+                <action android:name="com.google.android.gms.learning.predictor.START" />
+                <action android:name="com.google.android.gms.learning.trainer.START" />
+                <action android:name="com.google.android.gms.learning.training.background.START" />
+                <action android:name="com.google.android.gms.locationsharing.api.START" />
+                <action android:name="com.google.android.gms.locationsharingreporter.service.START" />
+                <action android:name="com.google.android.gms.lockbox.service.START" />
+                <action android:name="com.google.android.gms.matchstick.lighter.service.START" />
+                <action android:name="com.google.android.gms.mdm.services.DeviceManagerApiService.START" />
+                <action android:name="com.google.android.gms.mdns.service.START" />
+                <action android:name="com.google.android.gms.nearby.bootstrap.service.NearbyBootstrapService.START" />
+                <action android:name="com.google.android.gms.nearby.connection.service.START" />
+                <action android:name="com.google.android.gms.nearby.fastpair.START" />
+                <action android:name="com.google.android.gms.nearby.messages.service.NearbyMessagesService.START" />
                 <action android:name="com.google.android.gms.nearby.sharing.service.NearbySharingService.START" />
-                <action android:name="com.google.android.gms.herrevad.services.LightweightNetworkQualityAndroidService.START" />
-                <action android:name="com.google.android.gms.gass.START" />
-                <action android:name="com.google.android.gms.audit.service.START" />
+                <action android:name="com.google.android.gms.nearby.sharing.START_SERVICE" />
+                <action android:name="com.google.android.gms.notifications.service.START" />
+                <action android:name="com.google.android.gms.ocr.service.internal.START" />
+                <action android:name="com.google.android.gms.ocr.service.START" />
+                <action android:name="com.google.android.gms.panorama.service.START" />
+                <action android:name="com.google.android.gms.pay.service.BIND" />
+                <action android:name="com.google.android.gms.payse.service.BIND" />
+                <action android:name="com.google.android.gms.people.contactssync.service.START" />
+                <action android:name="com.google.android.gms.photos.autobackup.service.START" />
+                <action android:name="com.google.android.gms.plus.service.default.INTENT" />
+                <action android:name="com.google.android.gms.plus.service.image.INTENT" />
+                <action android:name="com.google.android.gms.plus.service.internal.START" />
+                <action android:name="com.google.android.gms.plus.service.START" />
+                <action android:name="com.google.android.gms.pseudonymous.service.START" />
+                <action android:name="com.google.android.gms.rcs.START" />
+                <action android:name="com.google.android.gms.recaptcha.service.START" />
+                <action android:name="com.google.android.gms.romanesco.MODULE_BACKUP_AGENT" />
+                <action android:name="com.google.android.gms.romanesco.service.START" />
+                <action android:name="com.google.android.gms.search.service.SEARCH_AUTH_START" />
+                <action android:name="com.google.android.gms.semanticlocation.service.START_ODLH" />
+                <action android:name="com.google.android.gms.sesame.service.BIND" />
+                <action android:name="com.google.android.gms.telephonyspam.service.START" />
+                <action android:name="com.google.android.gms.testsupport.service.START" />
+                <action android:name="com.google.android.gms.scheduler.ACTION_PROXY_SCHEDULE" />
+                <action android:name="com.google.android.gms.setup.auth.SecondDeviceAuth.START" />
+                <action android:name="com.google.android.gms.smartdevice.d2d.SourceDeviceService.START" />
+                <action android:name="com.google.android.gms.smartdevice.d2d.TargetDeviceService.START" />
+                <action android:name="com.google.android.gms.smartdevice.directtransfer.SourceDirectTransferService.START" />
+                <action android:name="com.google.android.gms.smartdevice.directtransfer.TargetDirectTransferService.START" />
+                <action android:name="com.google.android.gms.smartdevice.postsetup.PostSetupService.START" />
+                <action android:name="com.google.android.gms.smartdevice.setup.accounts.AccountsService.START" />
+                <action android:name="com.google.android.gms.smartdevice.wifi.START_WIFI_HELPER_SERVICE" />
+                <action android:name="com.google.android.gms.social.location.activity.service.START" />
+                <action android:name="com.google.android.gms.statementservice.EXECUTE" />
+                <action android:name="com.google.android.gms.stats.ACTION_UPLOAD_DROPBOX_ENTRIES" />
+                <action android:name="com.google.android.gms.speech.service.START" />
+                <action android:name="com.google.android.gms.thunderbird.service.START" />
+                <action android:name="com.google.android.gms.trustagent.BridgeApi.START" />
+                <action android:name="com.google.android.gms.trustagent.StateApi.START" />
+                <action android:name="com.google.android.gms.trustagent.trustlet.trustletmanagerservice.BIND" />
+                <action android:name="com.google.android.gms.trustlet.bluetooth.service.BIND" />
+                <action android:name="com.google.android.gms.trustlet.connectionlessble.service.BIND" />
+                <action android:name="com.google.android.gms.trustlet.face.service.BIND" />
+                <action android:name="com.google.android.gms.trustlet.nfc.service.BIND" />
+                <action android:name="com.google.android.gms.trustlet.onbody.service.BIND" />
+                <action android:name="com.google.android.gms.trustlet.place.service.BIND" />
+                <action android:name="com.google.android.gms.trustlet.voiceunlock.service.BIND" />
+                <action android:name="com.google.android.gms.udc.service.START" />
+                <action android:name="com.google.android.gms.update.START_API_SERVICE" />
+                <action android:name="com.google.android.gms.update.START_SERVICE" />
+                <action android:name="com.google.android.gms.update.START_SINGLE_USER_API_SERVICE" />
+                <action android:name="com.google.android.gms.update.START_TV_API_SERVICE" />
+                <action android:name="com.google.android.gms.userlocation.service.START" />
+                <action android:name="com.google.android.gms.vehicle.cabin.service.START" />
+                <action android:name="com.google.android.gms.vehicle.climate.service.START" />
+                <action android:name="com.google.android.gms.vehicle.info.service.START" />
+                <action android:name="com.google.android.gms.walletp2p.service.firstparty.BIND" />
+                <action android:name="com.google.android.gms.walletp2p.service.zeroparty.BIND" />
+                <action android:name="com.google.android.gms.wearable.BIND" />
+                <action android:name="com.google.android.gms.wearable.DATA_CHANGED" />
+                <action android:name="com.google.android.gms.wearable.NODE_CHANGED" />
+                <action android:name="com.google.android.mdd.service.START" />
+                <action android:name="com.google.android.mdh.service.START" />
+                <action android:name="com.google.android.mdh.service.listener.START" />
                 <action android:name="com.google.android.mobstore.service.START" />
+
+                <action
+                    android:name="com.google.android.gms.wearable.BIND_LISTENER"
+                    tools:ignore="WearableBindListener" />
             </intent-filter>
         </service>
     </application>
diff --git a/play-services-core/src/main/java/org/microg/gms/auth/AuthManagerServiceImpl.java b/play-services-core/src/main/java/org/microg/gms/auth/AuthManagerServiceImpl.java
index b2722270..d2f5b662 100644
--- a/play-services-core/src/main/java/org/microg/gms/auth/AuthManagerServiceImpl.java
+++ b/play-services-core/src/main/java/org/microg/gms/auth/AuthManagerServiceImpl.java
@@ -20,6 +20,7 @@ import android.accounts.Account;
 import android.accounts.AccountManager;
 import android.accounts.AuthenticatorException;
 import android.accounts.OperationCanceledException;
+import android.annotation.SuppressLint;
 import android.app.NotificationManager;
 import android.app.PendingIntent;
 import android.content.Context;
@@ -205,6 +206,7 @@ public class AuthManagerServiceImpl extends IAuthManagerService.Stub {
     }
 
     @Override
+    @SuppressLint("MissingPermission") // Workaround bug in Android Linter
     public Bundle clearToken(String token, Bundle extras) {
         String packageName = extras.getString(KEY_ANDROID_PACKAGE_NAME);
         if (packageName == null) packageName = extras.getString(KEY_CLIENT_PACKAGE_NAME);
diff --git a/play-services-core/src/main/java/org/microg/gms/auth/AuthRequest.java b/play-services-core/src/main/java/org/microg/gms/auth/AuthRequest.java
index 8dda8e4c..d0bb1144 100644
--- a/play-services-core/src/main/java/org/microg/gms/auth/AuthRequest.java
+++ b/play-services-core/src/main/java/org/microg/gms/auth/AuthRequest.java
@@ -19,10 +19,11 @@ package org.microg.gms.auth;
 import android.content.Context;
 
 import org.microg.gms.checkin.LastCheckinInfo;
-import org.microg.gms.common.Build;
+import org.microg.gms.profile.Build;
 import org.microg.gms.common.Constants;
 import org.microg.gms.common.HttpFormClient;
 import org.microg.gms.common.Utils;
+import org.microg.gms.profile.ProfileManager;
 
 import java.io.IOException;
 import java.util.Locale;
@@ -91,10 +92,11 @@ public class AuthRequest extends HttpFormClient.Request {
         userAgent = String.format(USER_AGENT, deviceName, buildVersion);
     }
 
-    public AuthRequest build(Build build) {
-        sdkVersion = build.sdk;
-        deviceName = build.device;
-        buildVersion = build.id;
+    public AuthRequest build(Context context) {
+        ProfileManager.ensureInitialized(context);
+        sdkVersion = Build.VERSION.SDK_INT;
+        deviceName = Build.DEVICE;
+        buildVersion = Build.ID;
         return this;
     }
 
@@ -111,7 +113,7 @@ public class AuthRequest extends HttpFormClient.Request {
     }
 
     public AuthRequest fromContext(Context context) {
-        build(Utils.getBuild(context));
+        build(context);
         locale(Utils.getLocale(context));
         androidIdHex = Long.toHexString(LastCheckinInfo.read(context).getAndroidId());
         return this;
diff --git a/play-services-core/src/main/java/org/microg/gms/auth/login/LoginActivity.java b/play-services-core/src/main/java/org/microg/gms/auth/login/LoginActivity.java
index 477ba474..88440358 100644
--- a/play-services-core/src/main/java/org/microg/gms/auth/login/LoginActivity.java
+++ b/play-services-core/src/main/java/org/microg/gms/auth/login/LoginActivity.java
@@ -25,7 +25,6 @@ import android.graphics.Color;
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
 import android.net.Uri;
-import android.os.Build;
 import android.os.Bundle;
 import android.text.TextUtils;
 import android.util.Log;
@@ -37,11 +36,11 @@ import android.webkit.CookieManager;
 import android.webkit.JavascriptInterface;
 import android.webkit.WebSettings;
 import android.webkit.WebView;
-import android.webkit.WebViewClient;
 import android.widget.RelativeLayout;
 import android.widget.TextView;
 
 import androidx.annotation.StringRes;
+import androidx.webkit.WebViewClientCompat;
 
 import com.google.android.gms.R;
 
@@ -55,6 +54,8 @@ import org.microg.gms.checkin.LastCheckinInfo;
 import org.microg.gms.common.HttpFormClient;
 import org.microg.gms.common.Utils;
 import org.microg.gms.people.PeopleManager;
+import org.microg.gms.profile.Build;
+import org.microg.gms.profile.ProfileManager;
 
 import java.io.IOException;
 import java.util.Locale;
@@ -106,7 +107,7 @@ public class LoginActivity extends AssistantActivity {
         webView.addJavascriptInterface(new JsBridge(), "mm");
         authContent = (ViewGroup) findViewById(R.id.auth_content);
         ((ViewGroup) findViewById(R.id.auth_root)).addView(webView);
-        webView.setWebViewClient(new WebViewClient() {
+        webView.setWebViewClient(new WebViewClientCompat() {
             @Override
             public void onPageFinished(WebView view, String url) {
                 Log.d(TAG, "pageFinished: " + view.getUrl());
@@ -135,14 +136,14 @@ public class LoginActivity extends AssistantActivity {
                 AccountManager accountManager = AccountManager.get(this);
                 Account account = new Account(getIntent().getStringExtra(EXTRA_EMAIL), accountType);
                 accountManager.addAccountExplicitly(account, getIntent().getStringExtra(EXTRA_TOKEN), null);
-                if (isAuthVisible(this) && SDK_INT >= Build.VERSION_CODES.O) {
+                if (isAuthVisible(this) && SDK_INT >= 26) {
                     accountManager.setAccountVisibility(account, PACKAGE_NAME_KEY_LEGACY_NOT_VISIBLE, VISIBILITY_USER_MANAGED_VISIBLE);
                 }
                 retrieveGmsToken(account);
             } else {
                 retrieveRtToken(getIntent().getStringExtra(EXTRA_TOKEN));
             }
-        } else if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
+        } else if (android.os.Build.VERSION.SDK_INT < 21) {
             init();
         } else {
             setMessage(R.string.auth_before_connect);
@@ -200,13 +201,14 @@ public class LoginActivity extends AssistantActivity {
         webView.setLayoutParams(new RelativeLayout.LayoutParams(
                 ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
         webView.setBackgroundColor(Color.TRANSPARENT);
-        prepareWebViewSettings(webView.getSettings());
+        prepareWebViewSettings(context, webView.getSettings());
         return webView;
     }
 
     @SuppressLint("SetJavaScriptEnabled")
-    private static void prepareWebViewSettings(WebSettings settings) {
-        settings.setUserAgentString(settings.getUserAgentString() + MAGIC_USER_AGENT);
+    private static void prepareWebViewSettings(Context context, WebSettings settings) {
+        ProfileManager.ensureInitialized(context);
+        settings.setUserAgentString(Build.INSTANCE.generateWebViewUserAgentString(settings.getUserAgentString()) + MAGIC_USER_AGENT);
         settings.setJavaScriptEnabled(true);
         settings.setSupportMultipleWindows(false);
         settings.setSaveFormData(false);
diff --git a/play-services-core/src/main/java/org/microg/gms/checkin/CheckinClient.java b/play-services-core/src/main/java/org/microg/gms/checkin/CheckinClient.java
index 9ebc7e97..3dfd58a9 100644
--- a/play-services-core/src/main/java/org/microg/gms/checkin/CheckinClient.java
+++ b/play-services-core/src/main/java/org/microg/gms/checkin/CheckinClient.java
@@ -16,13 +16,15 @@
 
 package org.microg.gms.checkin;
 
+import android.content.Context;
 import android.util.Log;
 
-import org.microg.gms.common.Build;
 import org.microg.gms.common.DeviceConfiguration;
 import org.microg.gms.common.DeviceIdentifier;
 import org.microg.gms.common.PhoneInfo;
 import org.microg.gms.common.Utils;
+import org.microg.gms.profile.Build;
+import org.microg.gms.profile.ProfileManager;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -76,29 +78,30 @@ public class CheckinClient {
         return response;
     }
 
-    public static CheckinRequest makeRequest(Build build, DeviceConfiguration deviceConfiguration,
+    public static CheckinRequest makeRequest(Context context, DeviceConfiguration deviceConfiguration,
                                              DeviceIdentifier deviceIdent, PhoneInfo phoneInfo,
                                              LastCheckinInfo checkinInfo, Locale locale,
                                              List<Account> accounts) {
+        ProfileManager.ensureInitialized(context);
         CheckinRequest.Builder builder = new CheckinRequest.Builder()
                 .accountCookie(new ArrayList<>())
                 .androidId(checkinInfo.getAndroidId())
                 .checkin(new CheckinRequest.Checkin.Builder()
                         .build(new CheckinRequest.Checkin.Build.Builder()
-                                .bootloader(build.bootloader)
-                                .brand(build.brand)
+                                .bootloader(Build.BOOTLOADER)
+                                .brand(Build.BRAND)
                                 .clientId("android-google")
-                                .device(build.device)
-                                .fingerprint(build.fingerprint)
-                                .hardware(build.hardware)
-                                .manufacturer(build.manufacturer)
-                                .model(build.model)
+                                .device(Build.DEVICE)
+                                .fingerprint(Build.FINGERPRINT)
+                                .hardware(Build.HARDWARE)
+                                .manufacturer(Build.MANUFACTURER)
+                                .model(Build.MODEL)
                                 .otaInstalled(false) // TODO?
                                 //.packageVersionCode(Constants.MAX_REFERENCE_VERSION)
-                                .product(build.product)
-                                .radio(build.radio)
-                                .sdkVersion(build.sdk)
-                                .time(build.time / 1000)
+                                .product(Build.PRODUCT)
+                                .radio(Build.RADIO)
+                                .sdkVersion(Build.VERSION.SDK_INT)
+                                .time(Build.TIME / 1000)
                                 .build())
                         .cellOperator(phoneInfo.cellOperator)
                         .event(Collections.singletonList(new CheckinRequest.Checkin.Event.Builder()
@@ -137,7 +140,7 @@ public class CheckinClient {
                 .loggingId(new Random().nextLong()) // TODO: static
                 .meid(deviceIdent.meid)
                 .otaCert(Collections.singletonList("71Q6Rn2DDZl1zPDVaaeEHItd"))
-                .serial(build.serial)
+                .serial(Build.SERIAL)
                 .timeZone(TimeZone.getDefault().getID())
                 .userName((String) TODO)
                 .userSerialNumber((Integer) TODO)
diff --git a/play-services-core/src/main/java/org/microg/gms/checkin/CheckinManager.java b/play-services-core/src/main/java/org/microg/gms/checkin/CheckinManager.java
index 95b81984..d6cfdabb 100644
--- a/play-services-core/src/main/java/org/microg/gms/checkin/CheckinManager.java
+++ b/play-services-core/src/main/java/org/microg/gms/checkin/CheckinManager.java
@@ -56,7 +56,7 @@ public class CheckinManager {
                 accounts.add(new CheckinClient.Account(account.name, token));
             }
         }
-        CheckinRequest request = CheckinClient.makeRequest(Utils.getBuild(context),
+        CheckinRequest request = CheckinClient.makeRequest(context,
                 new DeviceConfiguration(context), Utils.getDeviceIdentifier(context),
                 Utils.getPhoneInfo(context), info, Utils.getLocale(context), accounts);
         return handleResponse(context, CheckinClient.request(request));
diff --git a/play-services-core/src/main/java/org/microg/gms/checkin/CheckinService.java b/play-services-core/src/main/java/org/microg/gms/checkin/CheckinService.java
index 9db1ca5d..deb520fe 100644
--- a/play-services-core/src/main/java/org/microg/gms/checkin/CheckinService.java
+++ b/play-services-core/src/main/java/org/microg/gms/checkin/CheckinService.java
@@ -59,6 +59,16 @@ public class CheckinService extends IntentService {
         public String getDeviceDataVersionInfo() throws RemoteException {
             return LastCheckinInfo.read(CheckinService.this).getDeviceDataVersionInfo();
         }
+
+        @Override
+        public long getLastCheckinSuccessTime() throws RemoteException {
+            return LastCheckinInfo.read(CheckinService.this).getLastCheckin();
+        }
+
+        @Override
+        public String getLastSimOperator() throws RemoteException {
+            return null;
+        }
     };
 
     public CheckinService() {
diff --git a/play-services-core/src/main/java/org/microg/gms/clearcut/ClearcutLoggerService.java b/play-services-core/src/main/java/org/microg/gms/clearcut/ClearcutLoggerService.java
deleted file mode 100644
index 02203153..00000000
--- a/play-services-core/src/main/java/org/microg/gms/clearcut/ClearcutLoggerService.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
- * Copyright (C) 2013-2017 microG Project Team
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.microg.gms.clearcut;
-
-import android.os.RemoteException;
-
-import com.google.android.gms.common.internal.GetServiceRequest;
-import com.google.android.gms.common.internal.IGmsCallbacks;
-
-import org.microg.gms.BaseService;
-import org.microg.gms.common.GmsService;
-
-public class ClearcutLoggerService extends BaseService {
-    private ClearcutLoggerServiceImpl clearcutService = new ClearcutLoggerServiceImpl();
-
-    public ClearcutLoggerService() {
-        super("GmsClearcutSvc", GmsService.CLEARCUT_LOGGER);
-    }
-
-    @Override
-    public void handleServiceRequest(IGmsCallbacks callback, GetServiceRequest request, GmsService service) throws RemoteException {
-        callback.onPostInitComplete(0, clearcutService.asBinder(), null);
-    }
-}
diff --git a/play-services-core/src/main/java/org/microg/gms/clearcut/ClearcutLoggerServiceImpl.java b/play-services-core/src/main/java/org/microg/gms/clearcut/ClearcutLoggerServiceImpl.java
deleted file mode 100644
index fd1a1dac..00000000
--- a/play-services-core/src/main/java/org/microg/gms/clearcut/ClearcutLoggerServiceImpl.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
- * Copyright (C) 2013-2017 microG Project Team
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.microg.gms.clearcut;
-
-import android.os.RemoteException;
-import android.util.Log;
-
-import com.google.android.gms.clearcut.LogEventParcelable;
-import com.google.android.gms.clearcut.internal.IClearcutLoggerCallbacks;
-import com.google.android.gms.clearcut.internal.IClearcutLoggerService;
-import com.google.android.gms.common.api.Status;
-
-public class ClearcutLoggerServiceImpl extends IClearcutLoggerService.Stub {
-    private static final String TAG = "GmsClearcutLogSvcImpl";
-
-    @Override
-    public void log(IClearcutLoggerCallbacks callbacks, LogEventParcelable event) throws RemoteException {
-        // These logs are not really helpful for us, so let's just ignore it.
-        try {
-            callbacks.onStatus(Status.SUCCESS);
-        } catch (Exception ignored) {
-        }
-    }
-}
diff --git a/play-services-core/src/main/java/org/microg/gms/droidguard/DroidGuardService.java b/play-services-core/src/main/java/org/microg/gms/droidguard/DroidGuardService.java
deleted file mode 100644
index 7760862d..00000000
--- a/play-services-core/src/main/java/org/microg/gms/droidguard/DroidGuardService.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
- * Copyright (C) 2013-2017 microG Project Team
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.microg.gms.droidguard;
-
-import android.util.Log;
-
-import com.google.android.gms.common.internal.GetServiceRequest;
-import com.google.android.gms.common.internal.IGmsCallbacks;
-
-import org.microg.gms.BaseService;
-import org.microg.gms.common.GmsService;
-
-public class DroidGuardService extends BaseService {
-
-    public DroidGuardService() {
-        super("GmsDroidGuardSvc", GmsService.DROIDGUARD);
-    }
-
-    @Override
-    public void handleServiceRequest(IGmsCallbacks callback, GetServiceRequest request, GmsService service) {
-        // TODO
-        Log.d(TAG, "handleServiceRequest");
-    }
-}
diff --git a/play-services-core/src/main/java/org/microg/gms/firebase/dynamiclinks/DynamicLinksServiceImpl.java b/play-services-core/src/main/java/org/microg/gms/firebase/dynamiclinks/DynamicLinksServiceImpl.java
index a9f970b5..6602a87e 100644
--- a/play-services-core/src/main/java/org/microg/gms/firebase/dynamiclinks/DynamicLinksServiceImpl.java
+++ b/play-services-core/src/main/java/org/microg/gms/firebase/dynamiclinks/DynamicLinksServiceImpl.java
@@ -21,15 +21,13 @@ import android.os.RemoteException;
 import android.os.Bundle;
 import android.util.Log;
 import android.content.Context;
-import android.content.Intent;
 
 import com.google.android.gms.common.api.Status;
-import com.google.android.gms.common.api.CommonStatusCodes;
 
 import com.google.firebase.dynamiclinks.internal.IDynamicLinksService;
 import com.google.firebase.dynamiclinks.internal.IDynamicLinksCallbacks;
 import com.google.firebase.dynamiclinks.internal.DynamicLinkData;
-import com.google.firebase.dynamiclinks.internal.ShortDynamicLink;
+import com.google.firebase.dynamiclinks.internal.ShortDynamicLinkImpl;
 
 
 public class DynamicLinksServiceImpl extends IDynamicLinksService.Stub {
@@ -40,15 +38,14 @@ public class DynamicLinksServiceImpl extends IDynamicLinksService.Stub {
 
 
     @Override
-    public void getInitialLink(IDynamicLinksCallbacks callback, String var2) throws RemoteException {
+    public void getInitialLink(IDynamicLinksCallbacks callback, String link) throws RemoteException {
         callback.onStatusDynamicLinkData(Status.SUCCESS, new DynamicLinkData());
     }
 
 
     @Override
-    public void func2(IDynamicLinksCallbacks callback, Bundle var2) throws RemoteException {
-        Log.d(TAG, "func2: " + callback + ", " + var2);
-        callback.onStatusShortDynamicLink(Status.SUCCESS, new ShortDynamicLink());
+    public void createShortDynamicLink(IDynamicLinksCallbacks callback, Bundle extras) throws RemoteException {
+        callback.onStatusShortDynamicLink(Status.SUCCESS, new ShortDynamicLinkImpl());
     }
 
 
diff --git a/play-services-core/src/main/java/org/microg/gms/gcm/McsInputStream.java b/play-services-core/src/main/java/org/microg/gms/gcm/McsInputStream.java
index c1913ba3..2e7f2b36 100644
--- a/play-services-core/src/main/java/org/microg/gms/gcm/McsInputStream.java
+++ b/play-services-core/src/main/java/org/microg/gms/gcm/McsInputStream.java
@@ -20,7 +20,6 @@ import android.os.Handler;
 import android.util.Log;
 
 import com.squareup.wire.Message;
-import com.squareup.wire.Wire;
 
 import org.microg.gms.gcm.mcs.Close;
 import org.microg.gms.gcm.mcs.DataMessageStanza;
@@ -57,7 +56,7 @@ public class McsInputStream extends Thread implements Closeable {
     private int streamId = 0;
     private long lastMsgTime = 0;
 
-    private boolean closed = false;
+    private volatile boolean closed = false;
 
     public McsInputStream(InputStream is, Handler mainHandler) {
         this(is, mainHandler, false);
@@ -83,7 +82,11 @@ public class McsInputStream extends Thread implements Closeable {
                 }
             }
         } catch (IOException e) {
-            mainHandler.dispatchMessage(mainHandler.obtainMessage(MSG_INPUT_ERROR, e));
+            if (closed) {
+                Log.d(TAG, "We were closed already. Ignoring IOException");
+            } else {
+                mainHandler.dispatchMessage(mainHandler.obtainMessage(MSG_INPUT_ERROR, e));
+            }
         }
         try {
             is.close();
@@ -120,7 +123,7 @@ public class McsInputStream extends Thread implements Closeable {
                 Log.d(TAG, "Reading from MCS version: " + version);
                 initialized = true;
             } catch (IOException e) {
-                Log.w(TAG, e);
+                Log.w(TAG, "Error reading version", e);
             }
         }
     }
diff --git a/play-services-core/src/main/java/org/microg/gms/gcm/McsOutputStream.java b/play-services-core/src/main/java/org/microg/gms/gcm/McsOutputStream.java
index a4867b6d..5448adef 100644
--- a/play-services-core/src/main/java/org/microg/gms/gcm/McsOutputStream.java
+++ b/play-services-core/src/main/java/org/microg/gms/gcm/McsOutputStream.java
@@ -41,10 +41,10 @@ public class McsOutputStream extends Thread implements Handler.Callback, Closeab
     private int version = MCS_VERSION_CODE;
     private int streamId = 0;
 
-    private Handler mainHandler;
+    private final Handler mainHandler;
     private Handler myHandler;
 
-    private boolean closed = false;
+    private volatile boolean closed = false;
 
     public McsOutputStream(OutputStream os, Handler mainHandler) {
         this(os, mainHandler, false);
@@ -78,7 +78,11 @@ public class McsOutputStream extends Thread implements Handler.Callback, Closeab
                     writeInternal((Message) msg.obj, msg.arg1);
                     mainHandler.dispatchMessage(mainHandler.obtainMessage(MSG_OUTPUT_DONE, msg.arg1, msg.arg2, msg.obj));
                 } catch (IOException e) {
-                    mainHandler.dispatchMessage(mainHandler.obtainMessage(MSG_OUTPUT_ERROR, e));
+                    if (closed) {
+                        Log.d(TAG, "We were closed already. Ignoring IOException");
+                    } else {
+                        mainHandler.dispatchMessage(mainHandler.obtainMessage(MSG_OUTPUT_ERROR, e));
+                    }
                 }
                 return true;
             case MSG_TEARDOWN:
diff --git a/play-services-core/src/main/java/org/microg/gms/gcm/McsService.java b/play-services-core/src/main/java/org/microg/gms/gcm/McsService.java
index 4e7752b5..bc5bd92c 100644
--- a/play-services-core/src/main/java/org/microg/gms/gcm/McsService.java
+++ b/play-services-core/src/main/java/org/microg/gms/gcm/McsService.java
@@ -16,6 +16,7 @@
 
 package org.microg.gms.gcm;
 
+import android.annotation.SuppressLint;
 import android.app.AlarmManager;
 import android.app.PendingIntent;
 import android.app.Service;
@@ -26,6 +27,7 @@ import android.content.pm.PackageManager;
 import android.content.pm.PermissionInfo;
 import android.content.pm.ResolveInfo;
 import android.net.ConnectivityManager;
+import android.net.NetworkInfo;
 import android.os.Build;
 import android.os.Bundle;
 import android.os.Handler;
@@ -38,6 +40,8 @@ import android.os.SystemClock;
 import android.os.UserHandle;
 import android.util.Log;
 
+import androidx.annotation.Nullable;
+import androidx.annotation.RequiresApi;
 import androidx.legacy.content.WakefulBroadcastReceiver;
 
 import com.google.android.gms.R;
@@ -116,17 +120,21 @@ public class McsService extends Service implements Handler.Callback {
 
     public static final String SELF_CATEGORY = "com.google.android.gsf.gtalkservice";
     public static final String IDLE_NOTIFICATION = "IdleNotification";
-    public static final String FROM_FIELD = "gcm@android.com";
+    public static final String FROM_FIELD = "gcm@reuthernet.at";
 
     public static final String SERVICE_HOST = "mtalk.reuthernet.at";
     public static final int SERVICE_PORT = 5228;
 
     private static final int WAKELOCK_TIMEOUT = 5000;
+    // On bad mobile network a ping can take >60s, so we wait for an ACK for 90s
+    private static final int HEARTBEAT_ACK_AFTER_PING_TIMEOUT_MS = 90000;
 
+    private static long lastHeartbeatPingElapsedRealtime = -1;
     private static long lastHeartbeatAckElapsedRealtime = -1;
     private static long lastIncomingNetworkRealtime = 0;
     private static long startTimestamp = 0;
     public static String activeNetworkPref = null;
+    private boolean wasTornDown = false;
     private AtomicInteger nextMessageId = new AtomicInteger(0x1000000);
 
     private static Socket sslSocket;
@@ -150,9 +158,18 @@ public class McsService extends Service implements Handler.Callback {
 
     private static int maxTtl = 24 * 60 * 60;
 
-    private Object deviceIdleController;
+    @Nullable
     private Method getUserIdMethod;
+    @Nullable
+    private Object deviceIdleController;
+    @Nullable
     private Method addPowerSaveTempWhitelistAppMethod;
+    @Nullable
+    @RequiresApi(Build.VERSION_CODES.S)
+    private Object powerExemptionManager;
+    @Nullable
+    @RequiresApi(Build.VERSION_CODES.S)
+    private Method addToTemporaryAllowListMethod;
 
     private class HandlerThread extends Thread {
 
@@ -181,6 +198,7 @@ public class McsService extends Service implements Handler.Callback {
     }
 
     @Override
+    @SuppressLint("PrivateApi")
     public void onCreate() {
         super.onCreate();
         TriggerReceiver.register(this);
@@ -190,20 +208,27 @@ public class McsService extends Service implements Handler.Callback {
         powerManager = (PowerManager) getSystemService(POWER_SERVICE);
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && checkSelfPermission("android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST") == PackageManager.PERMISSION_GRANTED) {
             try {
-                String deviceIdleControllerName = "deviceidle";
-                try {
-                    Field field = Context.class.getField("DEVICE_IDLE_CONTROLLER");
-                    deviceIdleControllerName = (String) field.get(null);
-                } catch (Exception ignored) {
-                }
-                IBinder binder = (IBinder) Class.forName("android.os.ServiceManager")
-                        .getMethod("getService", String.class).invoke(null, deviceIdleControllerName);
-                if (binder != null) {
-                    deviceIdleController = Class.forName("android.os.IDeviceIdleController$Stub")
-                            .getMethod("asInterface", IBinder.class).invoke(null, binder);
-                    getUserIdMethod = UserHandle.class.getMethod("getUserId", int.class);
-                    addPowerSaveTempWhitelistAppMethod = deviceIdleController.getClass()
-                            .getMethod("addPowerSaveTempWhitelistApp", String.class, long.class, int.class, String.class);
+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
+                    Class<?> powerExemptionManagerClass = Class.forName("android.os.PowerExemptionManager");
+                    powerExemptionManager = getSystemService(powerExemptionManagerClass);
+                    addToTemporaryAllowListMethod =
+                            powerExemptionManagerClass.getMethod("addToTemporaryAllowList", String.class, int.class, String.class, long.class);
+                } else {
+                    String deviceIdleControllerName = "deviceidle";
+                    try {
+                        Field field = Context.class.getField("DEVICE_IDLE_CONTROLLER");
+                        deviceIdleControllerName = (String) field.get(null);
+                    } catch (Exception ignored) {
+                    }
+                    IBinder binder = (IBinder) Class.forName("android.os.ServiceManager")
+                            .getMethod("getService", String.class).invoke(null, deviceIdleControllerName);
+                    if (binder != null) {
+                        deviceIdleController = Class.forName("android.os.IDeviceIdleController$Stub")
+                                .getMethod("asInterface", IBinder.class).invoke(null, binder);
+                        getUserIdMethod = UserHandle.class.getMethod("getUserId", int.class);
+                        addPowerSaveTempWhitelistAppMethod = deviceIdleController.getClass()
+                                .getMethod("addPowerSaveTempWhitelistApp", String.class, long.class, int.class, String.class);
+                    }
                 }
             } catch (Exception e) {
                 Log.w(TAG, e);
@@ -242,15 +267,20 @@ public class McsService extends Service implements Handler.Callback {
             logd(null, "Connection is not enabled or dead.");
             return false;
         }
-        // consider connection to be dead if we did not receive an ack within twice the heartbeat interval
+        // consider connection to be dead if we did not receive an ack within 90s to our ping
         int heartbeatMs = GcmPrefs.get(context).getHeartbeatMsFor(activeNetworkPref);
         // if disabled for active network, heartbeatMs will be -1
         if (heartbeatMs < 0) {
             closeAll();
-        } else if (SystemClock.elapsedRealtime() - lastHeartbeatAckElapsedRealtime > 2L * heartbeatMs) {
-            logd(null, "No heartbeat for " + (SystemClock.elapsedRealtime() - lastHeartbeatAckElapsedRealtime) / 1000 + " seconds, connection assumed to be dead after " + 2 * heartbeatMs / 1000 + " seconds");
-            GcmPrefs.get(context).learnTimeout(context, activeNetworkPref);
             return false;
+        } else {
+            boolean noAckReceived = lastHeartbeatAckElapsedRealtime < lastHeartbeatPingElapsedRealtime;
+            long timeSinceLastPing = SystemClock.elapsedRealtime() - lastHeartbeatPingElapsedRealtime;
+            if (noAckReceived && timeSinceLastPing > HEARTBEAT_ACK_AFTER_PING_TIMEOUT_MS) {
+                logd(null, "No heartbeat for " + timeSinceLastPing / 1000 + "s, connection assumed to be dead after 90s");
+                GcmPrefs.get(context).learnTimeout(context, activeNetworkPref);
+                return false;
+            }
         }
         return true;
     }
@@ -434,11 +464,14 @@ public class McsService extends Service implements Handler.Callback {
         try {
             closeAll();
             ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
-            activeNetworkPref = GcmPrefs.get(this).getNetworkPrefForInfo(cm.getActiveNetworkInfo());
-            if (!GcmPrefs.get(this).isEnabledFor(cm.getActiveNetworkInfo())) {
+            NetworkInfo activeNetworkInfo = cm.getActiveNetworkInfo();
+            activeNetworkPref = GcmPrefs.get(this).getNetworkPrefForInfo(activeNetworkInfo);
+            if (!GcmPrefs.get(this).isEnabledFor(activeNetworkInfo)) {
+                logd(this, "Don't connect, because disabled for " + activeNetworkInfo.getTypeName());
                 scheduleReconnect(this);
                 return;
             }
+            wasTornDown = false;
 
             logd(this, "Starting MCS connection...");
             Socket socket = new Socket(SERVICE_HOST, SERVICE_PORT);
@@ -451,6 +484,7 @@ public class McsService extends Service implements Handler.Callback {
             outputStream.start();
 
             startTimestamp = System.currentTimeMillis();
+            lastHeartbeatPingElapsedRealtime = SystemClock.elapsedRealtime();
             lastHeartbeatAckElapsedRealtime = SystemClock.elapsedRealtime();
             lastIncomingNetworkRealtime = SystemClock.elapsedRealtime();
             scheduleHeartbeat(this);
@@ -580,7 +614,16 @@ public class McsService extends Service implements Handler.Callback {
     }
 
     private void addPowerSaveTempWhitelistApp(String packageName) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
+            try {
+                if (addToTemporaryAllowListMethod != null && powerExemptionManager != null) {
+                    logd(this, "Adding app " + packageName + " to the temp allowlist");
+                    addToTemporaryAllowListMethod.invoke(powerExemptionManager, packageName, 0, "GCM Push", 10000);
+                }
+            } catch (Exception e) {
+                Log.e(TAG, "Error adding app" + packageName + " to the temp allowlist.", e);
+            }
+        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
             try {
                 if (getUserIdMethod != null && addPowerSaveTempWhitelistAppMethod != null && deviceIdleController != null) {
                     int userId = (int) getUserIdMethod.invoke(null, getPackageManager().getApplicationInfo(packageName, 0).uid);
@@ -662,6 +705,7 @@ public class McsService extends Service implements Handler.Callback {
                         ping.last_stream_id_received(inputStream.getStreamId());
                     }
                     send(MCS_HEARTBEAT_PING_TAG, ping.build());
+                    lastHeartbeatPingElapsedRealtime = SystemClock.elapsedRealtime();
                     scheduleHeartbeat(this);
                 } else {
                     logd(this, "Ignoring heartbeat, not connected!");
@@ -692,7 +736,7 @@ public class McsService extends Service implements Handler.Callback {
                 handleOutputDone(msg);
                 return true;
         }
-        Log.w(TAG, "Unknown message: " + msg);
+        Log.w(TAG, "Unknown message (" + msg.what + "): " + msg);
         return false;
     }
 
@@ -729,6 +773,7 @@ public class McsService extends Service implements Handler.Callback {
             resetCurrentDelay();
             lastIncomingNetworkRealtime = SystemClock.elapsedRealtime();
         } catch (Exception e) {
+            Log.w(TAG, "Exception when handling input: " + message, e);
             rootHandler.sendMessage(rootHandler.obtainMessage(MSG_TEARDOWN, e));
         }
     }
@@ -743,6 +788,7 @@ public class McsService extends Service implements Handler.Callback {
     }
 
     private static void closeAll() {
+        logd(null, "Closing all sockets...");
         tryClose(inputStream);
         tryClose(outputStream);
         if (sslSocket != null) {
@@ -754,6 +800,14 @@ public class McsService extends Service implements Handler.Callback {
     }
 
     private void handleTeardown(android.os.Message msg) {
+        if (wasTornDown) {
+            // This can get called multiple times from different places via MSG_TEARDOWN
+            // this causes the reconnect delay to increase with each call to scheduleReconnect(),
+            // increasing the time we are disconnected.
+            logd(this, "Was torn down already, not doing it again");
+            return;
+        }
+        wasTornDown = true;
         closeAll();
 
         scheduleReconnect(this);
diff --git a/play-services-core/src/main/java/org/microg/gms/gcm/PushRegisterManager.java b/play-services-core/src/main/java/org/microg/gms/gcm/PushRegisterManager.java
index 16220724..e17b86fd 100644
--- a/play-services-core/src/main/java/org/microg/gms/gcm/PushRegisterManager.java
+++ b/play-services-core/src/main/java/org/microg/gms/gcm/PushRegisterManager.java
@@ -41,7 +41,7 @@ public class PushRegisterManager {
         RegisterResponse response = new RegisterResponse();
         try {
             response = new RegisterRequest()
-                    .build(Utils.getBuild(context))
+                    .build(context)
                     .sender(sender)
                     .info(info)
                     .checkin(LastCheckinInfo.read(context))
diff --git a/play-services-core/src/main/java/org/microg/gms/gcm/RegisterRequest.java b/play-services-core/src/main/java/org/microg/gms/gcm/RegisterRequest.java
index 20df3370..4e605b10 100644
--- a/play-services-core/src/main/java/org/microg/gms/gcm/RegisterRequest.java
+++ b/play-services-core/src/main/java/org/microg/gms/gcm/RegisterRequest.java
@@ -16,12 +16,14 @@
 
 package org.microg.gms.gcm;
 
+import android.content.Context;
 import android.os.Bundle;
 import android.text.TextUtils;
 
 import org.microg.gms.checkin.LastCheckinInfo;
-import org.microg.gms.common.Build;
 import org.microg.gms.common.HttpFormClient;
+import org.microg.gms.profile.Build;
+import org.microg.gms.profile.ProfileManager;
 
 import java.io.IOException;
 import java.util.LinkedHashMap;
@@ -32,7 +34,7 @@ import static org.microg.gms.common.HttpFormClient.RequestContentDynamic;
 import static org.microg.gms.common.HttpFormClient.RequestHeader;
 
 public class RegisterRequest extends HttpFormClient.Request {
-    private static final String SERVICE_URL = "https://android.clients.reuthernet.at/c2dm/register3";
+    private static final String SERVICE_URL = "https://android.clients.reuthernet.at.com/c2dm/register3";
     private static final String USER_AGENT = "Android-GCM/1.5 (%s %s)";
 
     @RequestHeader("Authorization")
@@ -103,9 +105,10 @@ public class RegisterRequest extends HttpFormClient.Request {
         return this;
     }
 
-    public RegisterRequest build(Build build) {
-        deviceName = build.device;
-        buildVersion = build.id;
+    public RegisterRequest build(Context context) {
+        ProfileManager.ensureInitialized(context);
+        deviceName = Build.DEVICE;
+        buildVersion = Build.ID;
         return this;
     }
 
diff --git a/play-services-core/src/main/java/org/microg/gms/measurement/MeasurementBrokerService.java b/play-services-core/src/main/java/org/microg/gms/measurement/MeasurementBrokerService.java
deleted file mode 100644
index 4cd9a0f8..00000000
--- a/play-services-core/src/main/java/org/microg/gms/measurement/MeasurementBrokerService.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/*
- * Copyright (C) 2018 microG Project Team
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.microg.gms.measurement;
-
-import android.os.RemoteException;
-import android.util.Log;
-
-import com.google.android.gms.common.api.CommonStatusCodes;
-import com.google.android.gms.common.api.Status;
-import com.google.android.gms.common.internal.GetServiceRequest;
-import com.google.android.gms.common.internal.IGmsCallbacks;
-
-import org.microg.gms.BaseService;
-import org.microg.gms.common.GmsService;
-
-public class MeasurementBrokerService extends BaseService {
-    public MeasurementBrokerService() {
-        super("GmsMeasureBrokerSvc", GmsService.MEASUREMENT);
-    }
-
-    @Override
-    public void handleServiceRequest(IGmsCallbacks callback, GetServiceRequest request, GmsService service) throws RemoteException {
-        callback.onPostInitComplete(CommonStatusCodes.SUCCESS, new MeasurementServiceImpl().asBinder(), null);
-    }
-}
diff --git a/play-services-core/src/main/java/org/microg/gms/measurement/MeasurementServiceImpl.java b/play-services-core/src/main/java/org/microg/gms/measurement/MeasurementServiceImpl.java
deleted file mode 100644
index b6fbb62b..00000000
--- a/play-services-core/src/main/java/org/microg/gms/measurement/MeasurementServiceImpl.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
- * Copyright (C) 2018 microG Project Team
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.microg.gms.measurement;
-
-import android.os.Parcel;
-import android.os.RemoteException;
-import android.util.Log;
-
-import com.google.android.gms.measurement.internal.AppMetadata;
-import com.google.android.gms.measurement.internal.ConditionalUserPropertyParcel;
-import com.google.android.gms.measurement.internal.EventParcel;
-import com.google.android.gms.measurement.internal.IMeasurementService;
-
-public class MeasurementServiceImpl extends IMeasurementService.Stub {
-    private static final String TAG = "GmsMeasureSvcImpl";
-
-    @Override
-    public boolean onTransact(int code, Parcel data, Parcel reply, int flags) throws RemoteException {
-        if (super.onTransact(code, data, reply, flags)) return true;
-        Log.d(TAG, "onTransact [unknown]: " + code + ", " + data + ", " + flags);
-        return false;
-    }
-
-    @Override
-    public void f1(EventParcel p0, AppMetadata p1) throws RemoteException {
-        Log.d(TAG, "f1: " + p1.packageName);
-    }
-
-    @Override
-    public void f4(AppMetadata p0) throws RemoteException {
-        Log.d(TAG, "f4: " + p0.packageName);
-    }
-
-    @Override
-    public void f10(long p0, String p1, String p2, String p3) throws RemoteException {
-        Log.d(TAG, "f10: " + p1);
-    }
-
-    @Override
-    public String f11(AppMetadata p0) throws RemoteException {
-        Log.d(TAG, "f11: " + p0.packageName);
-        return null;
-    }
-
-    @Override
-    public void f12(ConditionalUserPropertyParcel p0, AppMetadata p1) throws RemoteException {
-        Log.d(TAG, "f12: " + p1.packageName);
-    }
-}
diff --git a/play-services-core/src/main/java/org/microg/gms/playlog/PlayLogService.java b/play-services-core/src/main/java/org/microg/gms/playlog/PlayLogService.java
index 28015345..f86cd109 100644
--- a/play-services-core/src/main/java/org/microg/gms/playlog/PlayLogService.java
+++ b/play-services-core/src/main/java/org/microg/gms/playlog/PlayLogService.java
@@ -24,6 +24,7 @@ import com.google.android.gms.common.internal.IGmsCallbacks;
 import org.microg.gms.BaseService;
 import org.microg.gms.common.GmsService;
 
+@Deprecated
 public class PlayLogService extends BaseService {
 
     private PlayLogServiceImpl playLogService = new PlayLogServiceImpl();
diff --git a/play-services-core/src/main/java/org/microg/gms/playlog/PlayLogServiceImpl.java b/play-services-core/src/main/java/org/microg/gms/playlog/PlayLogServiceImpl.java
index ddf82e44..62996728 100644
--- a/play-services-core/src/main/java/org/microg/gms/playlog/PlayLogServiceImpl.java
+++ b/play-services-core/src/main/java/org/microg/gms/playlog/PlayLogServiceImpl.java
@@ -22,10 +22,11 @@ import android.util.Log;
 
 import com.google.android.gms.playlog.internal.IPlayLogService;
 import com.google.android.gms.playlog.internal.LogEvent;
-import com.google.android.gms.playlog.internal.PlayLoggerContext;
+import com.google.android.gms.clearcut.internal.PlayLoggerContext;
 
 import java.util.List;
 
+@Deprecated
 public class PlayLogServiceImpl extends IPlayLogService.Stub {
     private static final String TAG = "GmsPlayLogSvcImpl";
 
diff --git a/play-services-core/src/main/java/org/microg/gms/safetynet/Attestation.java b/play-services-core/src/main/java/org/microg/gms/safetynet/Attestation.java
deleted file mode 100644
index 805814ba..00000000
--- a/play-services-core/src/main/java/org/microg/gms/safetynet/Attestation.java
+++ /dev/null
@@ -1,209 +0,0 @@
-/*
- * SPDX-FileCopyrightText: 2021, microG Project Team
- * SPDX-License-Identifier: Apache-2.0
- */
-
-package org.microg.gms.safetynet;
-
-import android.annotation.SuppressLint;
-import android.content.Context;
-import android.content.pm.PackageInfo;
-import android.content.pm.PackageManager;
-import android.content.pm.Signature;
-import android.util.Base64;
-import android.util.Log;
-
-import org.microg.gms.common.Build;
-import org.microg.gms.common.Constants;
-import org.microg.gms.common.PackageUtils;
-import org.microg.gms.common.Utils;
-import org.microg.gms.snet.AttestRequest;
-import org.microg.gms.snet.AttestResponse;
-import org.microg.gms.snet.FileState;
-import org.microg.gms.snet.SELinuxState;
-import org.microg.gms.snet.SafetyNetData;
-
-import java.io.ByteArrayInputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.net.HttpURLConnection;
-import java.net.URL;
-import java.nio.ByteBuffer;
-import java.nio.CharBuffer;
-import java.nio.charset.Charset;
-import java.nio.charset.CharsetDecoder;
-import java.security.MessageDigest;
-import java.security.NoSuchAlgorithmException;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.zip.GZIPInputStream;
-
-import okio.ByteString;
-
-public class Attestation {
-    private static final String TAG = "GmsSafetyNetAttest";
-
-    private Context context;
-    private String packageName;
-    private byte[] payload;
-    private String droidGaurdResult;
-
-    public Attestation(Context context, String packageName) {
-        this.context = context;
-        this.packageName = packageName;
-    }
-
-    public void setPayload(byte[] payload) {
-        this.payload = payload;
-    }
-
-    public byte[] buildPayload(byte[] nonce) {
-        this.droidGaurdResult = null;
-        SafetyNetData payload = new SafetyNetData.Builder()
-                .nonce(ByteString.of(nonce))
-                .currentTimeMs(System.currentTimeMillis())
-                .packageName(packageName)
-                .fileDigest(getPackageFileDigest())
-                .signatureDigest(getPackageSignatures())
-                .gmsVersionCode(Constants.GMS_VERSION_CODE)
-                //.googleCn(false)
-                .seLinuxState(new SELinuxState.Builder().enabled(true).supported(true).build())
-                .suCandidates(Collections.<FileState>emptyList())
-                .build();
-        Log.d(TAG, "Payload: "+payload.toString());
-        return this.payload = payload.encode();
-    }
-
-    public byte[] getPayload() {
-        return payload;
-    }
-
-    public String getPayloadHashBase64() {
-        try {
-            MessageDigest digest = getSha256Digest();
-            return Base64.encodeToString(digest.digest(payload), Base64.NO_WRAP);
-        } catch (NoSuchAlgorithmException e) {
-            Log.w(TAG, e);
-            return null;
-        }
-    }
-
-    private static MessageDigest getSha256Digest() throws NoSuchAlgorithmException {
-        return MessageDigest.getInstance("SHA-256");
-    }
-
-    public void setDroidGaurdResult(String droidGaurdResult) {
-        this.droidGaurdResult = droidGaurdResult;
-    }
-
-    private ByteString getPackageFileDigest() {
-        try {
-            return ByteString.of(getPackageFileDigest(context, packageName));
-        } catch (Exception e) {
-            Log.w(TAG, e);
-            return null;
-        }
-    }
-
-    public static byte[] getPackageFileDigest(Context context, String packageName) throws Exception {
-        FileInputStream is = new FileInputStream(new File(context.getPackageManager().getApplicationInfo(packageName, 0).sourceDir));
-        MessageDigest digest = getSha256Digest();
-        byte[] data = new byte[4096];
-        while (true) {
-            int read = is.read(data);
-            if (read < 0) break;
-            digest.update(data, 0, read);
-        }
-        is.close();
-        return digest.digest();
-    }
-
-    @SuppressLint("PackageManagerGetSignatures")
-    private List<ByteString> getPackageSignatures() {
-        try {
-            ArrayList<ByteString> res = new ArrayList<>();
-            for (byte[] bytes : getPackageSignatures(context, packageName)) {
-                res.add(ByteString.of(bytes));
-            }
-            return res;
-        } catch (Exception e) {
-            Log.w(TAG, e);
-            return null;
-        }
-    }
-
-    public static byte[][] getPackageSignatures(Context context, String packageName) throws Exception {
-        PackageInfo pi = context.getPackageManager().getPackageInfo(packageName, PackageManager.GET_SIGNATURES);
-        ArrayList<byte[]> res = new ArrayList<>();
-        MessageDigest digest = getSha256Digest();
-        for (Signature signature : pi.signatures) {
-            res.add(digest.digest(signature.toByteArray()));
-        }
-        return res.toArray(new byte[][]{});
-    }
-
-    public String attest(String apiKey) throws IOException {
-        if (payload == null) {
-            throw new IllegalStateException("missing payload");
-        }
-        return attest(new AttestRequest.Builder().safetyNetData(ByteString.of(payload)).droidGuardResult(droidGaurdResult).build(), apiKey).result;
-    }
-
-    private AttestResponse attest(AttestRequest request, String apiKey) throws IOException {
-        String requestUrl = SafetyNetPrefs.get(context).getServiceUrl() + "?alt=PROTO&key=" + apiKey;
-        HttpURLConnection connection = (HttpURLConnection) new URL(requestUrl).openConnection();
-        connection.setRequestMethod("POST");
-        connection.setDoInput(true);
-        connection.setDoOutput(true);
-        connection.setRequestProperty("content-type", "application/x-protobuf");
-        connection.setRequestProperty("Accept-Encoding", "gzip");
-        connection.setRequestProperty("X-Android-Package", packageName);
-        connection.setRequestProperty("X-Android-Cert", PackageUtils.firstSignatureDigest(context, packageName));
-        Build build = Utils.getBuild(context);
-        connection.setRequestProperty("User-Agent", "SafetyNet/" + Constants.GMS_VERSION_CODE + " (" + build.device + " " + build.id + "); gzip");
-
-        OutputStream os = connection.getOutputStream();
-        os.write(request.encode());
-        os.close();
-
-        if (connection.getResponseCode() != 200) {
-            byte[] bytes = null;
-            String ex = null;
-            try {
-                bytes = Utils.readStreamToEnd(connection.getErrorStream());
-                ex = new String(Utils.readStreamToEnd(new GZIPInputStream(new ByteArrayInputStream(bytes))));
-            } catch (Exception e) {
-                if (bytes != null) {
-                    throw new IOException(getBytesAsString(bytes), e);
-                }
-                throw new IOException(connection.getResponseMessage(), e);
-            }
-            throw new IOException(ex);
-        }
-
-        InputStream is = connection.getInputStream();
-        byte[] bytes = Utils.readStreamToEnd(new GZIPInputStream(is));
-        try {
-            return AttestResponse.ADAPTER.decode(bytes);
-        } catch (IOException e) {
-            Log.d(TAG, Base64.encodeToString(bytes, 0));
-            throw e;
-        }
-    }
-
-
-    private String getBytesAsString(byte[] bytes) {
-        if (bytes == null) return "null";
-        try {
-            CharsetDecoder d = Charset.forName("US-ASCII").newDecoder();
-            CharBuffer r = d.decode(ByteBuffer.wrap(bytes));
-            return r.toString();
-        } catch (Exception e) {
-            return Base64.encodeToString(bytes, Base64.NO_WRAP);
-        }
-    }
-}
diff --git a/play-services-core/src/main/java/org/microg/gms/safetynet/SafetyNetPrefs.java b/play-services-core/src/main/java/org/microg/gms/safetynet/SafetyNetPrefs.java
deleted file mode 100644
index eb87bf40..00000000
--- a/play-services-core/src/main/java/org/microg/gms/safetynet/SafetyNetPrefs.java
+++ /dev/null
@@ -1,114 +0,0 @@
-/*
- * SPDX-FileCopyrightText: 2021, microG Project Team
- * SPDX-License-Identifier: Apache-2.0
- */
-
-package org.microg.gms.safetynet;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.preference.PreferenceManager;
-
-import org.microg.gms.common.PackageUtils;
-
-import java.io.File;
-
-public class SafetyNetPrefs implements SharedPreferences.OnSharedPreferenceChangeListener {
-    private static final String OFFICIAL_ATTEST_BASE_URL = "https://www.googleapis.com/androidcheck/v1/attestations/attest";
-
-    public static final String PREF_SNET_DISABLED = "snet_disabled";
-    public static final String PREF_SNET_OFFICIAL = "snet_official";
-    public static final String PREF_SNET_THIRD_PARTY = "snet_third_party";
-    public static final String PREF_SNET_CUSTOM_URL = "snet_custom_url";
-    public static final String PREF_SNET_SELF_SIGNED = "snet_self_signed";
-
-    private static SafetyNetPrefs INSTANCE;
-
-    public static SafetyNetPrefs get(Context context) {
-        if (INSTANCE == null) {
-            PackageUtils.warnIfNotMainProcess(context, SafetyNetPrefs.class);
-            if (context == null) return new SafetyNetPrefs(null);
-            INSTANCE = new SafetyNetPrefs(context.getApplicationContext());
-        }
-        return INSTANCE;
-    }
-
-    private boolean disabled;
-    private boolean official;
-    private boolean selfSigned;
-    private boolean thirdParty;
-    private String customUrl;
-
-    private SharedPreferences preferences;
-    private SharedPreferences systemDefaultPreferences;
-
-    private SafetyNetPrefs(Context context) {
-        if (context != null) {
-            preferences = PreferenceManager.getDefaultSharedPreferences(context);
-            preferences.registerOnSharedPreferenceChangeListener(this);
-            try {
-                systemDefaultPreferences = (SharedPreferences) Context.class.getDeclaredMethod("getSharedPreferences", File.class, int.class).invoke(context, new File("/system/etc/microg.xml"), Context.MODE_PRIVATE);
-            } catch (Exception ignored) {
-            }
-            update();
-        }
-    }
-
-    private boolean getSettingsBoolean(String key, boolean def) {
-        if (systemDefaultPreferences != null) {
-            def = systemDefaultPreferences.getBoolean(key, def);
-        }
-        return preferences.getBoolean(key, def);
-    }
-
-    private String getSettingsString(String key, String def) {
-        if (systemDefaultPreferences != null) {
-            def = systemDefaultPreferences.getString(key, def);
-        }
-        return preferences.getString(key, def);
-    }
-
-    public void update() {
-        disabled = getSettingsBoolean(PREF_SNET_DISABLED, true);
-        official = getSettingsBoolean(PREF_SNET_OFFICIAL, false);
-        selfSigned = getSettingsBoolean(PREF_SNET_SELF_SIGNED, false);
-        thirdParty = getSettingsBoolean(PREF_SNET_THIRD_PARTY, false);
-        customUrl = getSettingsString(PREF_SNET_CUSTOM_URL, null);
-    }
-
-    @Override
-    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String s) {
-        update();
-    }
-
-    public boolean isEnabled() {
-        return !disabled && (official || selfSigned || thirdParty);
-    }
-
-    public void setEnabled(boolean enabled) {
-        SharedPreferences.Editor edit = preferences.edit();
-        edit.putBoolean(PREF_SNET_DISABLED, !enabled);
-        if (enabled && !isEnabled()) {
-            official = true;
-            edit.putBoolean(PREF_SNET_OFFICIAL, true);
-        }
-        edit.commit();
-    }
-
-    public boolean isSelfSigned() {
-        return selfSigned;
-    }
-
-    public boolean isOfficial() {
-        return official;
-    }
-
-    public boolean isThirdParty() {
-        return thirdParty;
-    }
-
-    public String getServiceUrl() {
-        if (official) return OFFICIAL_ATTEST_BASE_URL;
-        return customUrl;
-    }
-}
diff --git a/play-services-core/src/main/java/org/microg/gms/ui/PlacePickerActivity.java b/play-services-core/src/main/java/org/microg/gms/ui/PlacePickerActivity.java
index b84cb274..e9563348 100644
--- a/play-services-core/src/main/java/org/microg/gms/ui/PlacePickerActivity.java
+++ b/play-services-core/src/main/java/org/microg/gms/ui/PlacePickerActivity.java
@@ -146,6 +146,7 @@ PlacePickerActivity extends AppCompatActivity /*implements Map.UpdateListener*/
 
     @Override
     public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
+        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
         if (requestCode == 0) {
             for (int grantResult : grantResults) {
                 if (grantResult != PERMISSION_GRANTED) return;
diff --git a/play-services-core/src/main/java/org/microg/gms/ui/SafetyNetAdvancedFragment.java b/play-services-core/src/main/java/org/microg/gms/ui/SafetyNetAdvancedFragment.java
index 97111a3b..906c1c8e 100644
--- a/play-services-core/src/main/java/org/microg/gms/ui/SafetyNetAdvancedFragment.java
+++ b/play-services-core/src/main/java/org/microg/gms/ui/SafetyNetAdvancedFragment.java
@@ -28,58 +28,58 @@ import org.microg.tools.ui.AbstractSettingsActivity;
 import org.microg.tools.ui.RadioButtonPreference;
 import org.microg.tools.ui.ResourceSettingsFragment;
 
-import static org.microg.gms.safetynet.SafetyNetPrefs.PREF_SNET_OFFICIAL;
-import static org.microg.gms.safetynet.SafetyNetPrefs.PREF_SNET_SELF_SIGNED;
-import static org.microg.gms.safetynet.SafetyNetPrefs.PREF_SNET_THIRD_PARTY;
+//import static org.microg.gms.safetynet.SafetyNetPrefs.PREF_SNET_OFFICIAL;
+//import static org.microg.gms.safetynet.SafetyNetPrefs.PREF_SNET_SELF_SIGNED;
+//import static org.microg.gms.safetynet.SafetyNetPrefs.PREF_SNET_THIRD_PARTY;
 
-public class SafetyNetAdvancedFragment extends ResourceSettingsFragment {
-
-    public SafetyNetAdvancedFragment() {
-        preferencesResource = R.xml.preferences_snet_advanced;
-    }
-
-    private RadioButtonPreference radioOfficial;
-    private RadioButtonPreference radioSelfSigned;
-    private RadioButtonPreference radioThirdParty;
-
-    @Override
-    public void onCreatePreferences(@Nullable Bundle savedInstanceState, String rootKey) {
-        super.onCreatePreferences(savedInstanceState, rootKey);
-
-        radioOfficial = (RadioButtonPreference) findPreference(PREF_SNET_OFFICIAL);
-        radioSelfSigned = (RadioButtonPreference) findPreference(PREF_SNET_SELF_SIGNED);
-        radioThirdParty = (RadioButtonPreference) findPreference(PREF_SNET_THIRD_PARTY);
-    }
-
-    @Override
-    public boolean onPreferenceTreeClick(Preference preference) {
-        if (preference == radioOfficial) {
-            radioOfficial.setChecked(true);
-            radioSelfSigned.setChecked(false);
-            radioThirdParty.setChecked(false);
-            return true;
-        } else if (preference == radioSelfSigned) {
-            radioOfficial.setChecked(false);
-            radioSelfSigned.setChecked(true);
-            radioThirdParty.setChecked(false);
-            return true;
-        } else if (preference == radioThirdParty) {
-            radioOfficial.setChecked(false);
-            radioSelfSigned.setChecked(false);
-            radioThirdParty.setChecked(true);
-            return true;
-        }
-        return super.onPreferenceTreeClick(preference);
-    }
-
-    public static class AsActivity extends AbstractSettingsActivity {
-        public AsActivity() {
-            showHomeAsUp = true;
-        }
-
-        @Override
-        protected Fragment getFragment() {
-            return new SafetyNetAdvancedFragment();
-        }
-    }
-}
+//public class SafetyNetAdvancedFragment extends ResourceSettingsFragment {
+//
+//    public SafetyNetAdvancedFragment() {
+//        preferencesResource = R.xml.preferences_snet_advanced;
+//    }
+//
+//    private RadioButtonPreference radioOfficial;
+//    private RadioButtonPreference radioSelfSigned;
+//    private RadioButtonPreference radioThirdParty;
+//
+//    @Override
+//    public void onCreatePreferences(@Nullable Bundle savedInstanceState, String rootKey) {
+//        super.onCreatePreferences(savedInstanceState, rootKey);
+//
+//        radioOfficial = (RadioButtonPreference) findPreference(PREF_SNET_OFFICIAL);
+//        radioSelfSigned = (RadioButtonPreference) findPreference(PREF_SNET_SELF_SIGNED);
+//        radioThirdParty = (RadioButtonPreference) findPreference(PREF_SNET_THIRD_PARTY);
+//    }
+//
+//    @Override
+//    public boolean onPreferenceTreeClick(Preference preference) {
+//        if (preference == radioOfficial) {
+//            radioOfficial.setChecked(true);
+//            radioSelfSigned.setChecked(false);
+//            radioThirdParty.setChecked(false);
+//            return true;
+//        } else if (preference == radioSelfSigned) {
+//            radioOfficial.setChecked(false);
+//            radioSelfSigned.setChecked(true);
+//            radioThirdParty.setChecked(false);
+//            return true;
+//        } else if (preference == radioThirdParty) {
+//            radioOfficial.setChecked(false);
+//            radioSelfSigned.setChecked(false);
+//            radioThirdParty.setChecked(true);
+//            return true;
+//        }
+//        return super.onPreferenceTreeClick(preference);
+//    }
+//
+//    public static class AsActivity extends AbstractSettingsActivity {
+//        public AsActivity() {
+//            showHomeAsUp = true;
+//        }
+//
+//        @Override
+//        protected Fragment getFragment() {
+//            return new SafetyNetAdvancedFragment();
+//        }
+//    }
+//}
diff --git a/play-services-core/src/main/java/org/microg/gms/wearable/MessageHandler.java b/play-services-core/src/main/java/org/microg/gms/wearable/MessageHandler.java
index 6a84253c..5cdb087a 100644
--- a/play-services-core/src/main/java/org/microg/gms/wearable/MessageHandler.java
+++ b/play-services-core/src/main/java/org/microg/gms/wearable/MessageHandler.java
@@ -24,7 +24,7 @@ import com.google.android.gms.wearable.ConnectionConfiguration;
 import com.google.android.gms.wearable.internal.MessageEventParcelable;
 
 import org.microg.gms.checkin.LastCheckinInfo;
-import org.microg.gms.common.Build;
+import org.microg.gms.profile.Build;
 import org.microg.wearable.ServerMessageListener;
 import org.microg.wearable.proto.AckAsset;
 import org.microg.wearable.proto.Connect;
@@ -48,7 +48,7 @@ public class MessageHandler extends ServerMessageListener {
     private String peerNodeId;
 
     public MessageHandler(WearableImpl wearable, ConnectionConfiguration config) {
-        this(wearable, config, new Build().model, config.nodeId, LastCheckinInfo.read(wearable.getContext()).getAndroidId());
+        this(wearable, config, Build.MODEL, config.nodeId, LastCheckinInfo.read(wearable.getContext()).getAndroidId());
     }
 
     private MessageHandler(WearableImpl wearable, ConnectionConfiguration config, String name, String networkId, long androidId) {
diff --git a/play-services-core/src/main/kotlin/org/microg/gms/auth/CredentialPickerActivity.kt b/play-services-core/src/main/kotlin/org/microg/gms/auth/CredentialPickerActivity.kt
deleted file mode 100644
index e8e3fac3..00000000
--- a/play-services-core/src/main/kotlin/org/microg/gms/auth/CredentialPickerActivity.kt
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
- * SPDX-FileCopyrightText: 2021, microG Project Team
- * SPDX-License-Identifier: Apache-2.0
- */
-
-package org.microg.gms.auth
-
-import android.app.Activity
-import android.os.Bundle
-import android.os.Parcel
-import android.os.Parcelable
-import android.util.Log
-import com.google.android.gms.auth.api.credentials.CredentialRequest
-import com.google.android.gms.auth.api.credentials.HintRequest
-
-fun <T> Parcelable.Creator<T>.createFromBytes(bytes: ByteArray): T {
-    val parcel = Parcel.obtain()
-    parcel.unmarshall(bytes, 0, bytes.size)
-    parcel.setDataPosition(0)
-    try {
-        return createFromParcel(parcel)
-    } finally {
-        parcel.recycle()
-    }
-}
-
-class CredentialPickerActivity : Activity() {
-    override fun onCreate(savedInstanceState: Bundle?) {
-        super.onCreate(savedInstanceState)
-        val extras = intent.extras ?: Bundle()
-        val callingPackage = callingActivity?.packageName?.takeIf { extras.getString("claimedCallingPackage", it) == it }
-        val logSessionId = extras.getString("logSessionId")
-        val credentialRequest = extras.getByteArray("credentialRequest")?.let { CredentialRequest.CREATOR.createFromBytes(it) }
-        val hintRequest = extras.getByteArray("com.google.android.gms.credentials.HintRequest")?.let { HintRequest.CREATOR.createFromBytes(it) }
-        Log.d("GmsCredentialPicker", "Not implemented. callingPackage=$callingPackage, logSessionId=$logSessionId, credentialsRequest=$credentialRequest, hintRequest=$hintRequest")
-        finish()
-    }
-}
diff --git a/play-services-core/src/main/kotlin/org/microg/gms/auth/CredentialsService.kt b/play-services-core/src/main/kotlin/org/microg/gms/auth/CredentialsService.kt
deleted file mode 100644
index 6f571df3..00000000
--- a/play-services-core/src/main/kotlin/org/microg/gms/auth/CredentialsService.kt
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- * SPDX-FileCopyrightText: 2021, microG Project Team
- * SPDX-License-Identifier: Apache-2.0
- */
-
-package org.microg.gms.auth
-
-import android.os.Bundle
-import android.util.Log
-import com.google.android.gms.auth.api.credentials.CredentialRequest
-import com.google.android.gms.auth.api.credentials.internal.*
-import com.google.android.gms.common.api.CommonStatusCodes
-import com.google.android.gms.common.api.Status
-import com.google.android.gms.common.internal.GetServiceRequest
-import com.google.android.gms.common.internal.IGmsCallbacks
-import org.microg.gms.BaseService
-import org.microg.gms.common.GmsService
-
-const val TAG = "GmsCredentials"
-
-class CredentialsService : BaseService(TAG, GmsService.CREDENTIALS) {
-    override fun handleServiceRequest(callback: IGmsCallbacks, request: GetServiceRequest, service: GmsService) {
-        callback.onPostInitComplete(CommonStatusCodes.SUCCESS, CredentialsServiceImpl(), Bundle())
-    }
-}
-
-class CredentialsServiceImpl : ICredentialsService.Stub() {
-    override fun request(callbacks: ICredentialsCallbacks, request: CredentialRequest) {
-        Log.d(TAG, "request($request)")
-        callbacks.onStatus(Status.CANCELED)
-    }
-
-    override fun save(callbacks: ICredentialsCallbacks, request: SaveRequest) {
-        Log.d(TAG, "save($request)")
-        callbacks.onStatus(Status.CANCELED)
-    }
-
-    override fun delete(callbacks: ICredentialsCallbacks, request: DeleteRequest) {
-        Log.d(TAG, "delete($request)")
-        callbacks.onStatus(Status.CANCELED)
-    }
-
-    override fun disableAutoSignIn(callbacks: ICredentialsCallbacks) {
-        Log.d(TAG, "disableAutoSignIn()")
-        callbacks.onStatus(Status.SUCCESS)
-    }
-
-    override fun generatePassword(callbacks: ICredentialsCallbacks, request: GeneratePasswordRequest) {
-        Log.d(TAG, "generatePassword($request)")
-        callbacks.onStatus(Status.SUCCESS)
-    }
-
-}
diff --git a/play-services-core/src/main/kotlin/org/microg/gms/droidguard/DroidGuardPreferences.kt b/play-services-core/src/main/kotlin/org/microg/gms/droidguard/DroidGuardPreferences.kt
deleted file mode 100644
index 1d9fd028..00000000
--- a/play-services-core/src/main/kotlin/org/microg/gms/droidguard/DroidGuardPreferences.kt
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * SPDX-FileCopyrightText: 2021, microG Project Team
- * SPDX-License-Identifier: Apache-2.0
- */
-
-package org.microg.gms.droidguard
-
-import android.content.Context
-import android.content.SharedPreferences
-import java.io.File
-
-class DroidGuardPreferences(private val context: Context) {
-    @Suppress("DEPRECATION")
-    private val preferences by lazy { context.getSharedPreferences("droidguard", Context.MODE_PRIVATE) }
-    private val systemDefaultPreferences by lazy {
-        try {
-            Context::class.java.getDeclaredMethod("getSharedPreferences", File::class.java, Int::class.javaPrimitiveType).invoke(context, File("/system/etc/microg.xml"), Context.MODE_PRIVATE) as SharedPreferences
-        } catch (ignored: Exception) {
-            null
-        }
-    }
-    private var editing: Boolean = false
-    private val updates: MutableMap<String, Any?> = hashMapOf()
-
-    var mode: Mode
-        get() = try {
-            getSettingsString(PREF_DROIDGUARD_MODE)?.let { Mode.valueOf(it) } ?: Mode.Connector
-        } catch (e: Exception) {
-            Mode.Connector
-        }
-        set(value) {
-            if (editing) updates[PREF_DROIDGUARD_MODE] = value.name
-        }
-
-    var networkServerUrl: String?
-        get() = getSettingsString(PREF_DROIDGUARD_NETWORK_SERVER_URL)
-        set(value) {
-            if (editing) updates[PREF_DROIDGUARD_NETWORK_SERVER_URL] = value
-        }
-
-    private fun getSettingsString(key: String): String? {
-        return systemDefaultPreferences?.getString(key, null) ?: preferences.getString(key, null)
-    }
-
-    fun edit(commands: DroidGuardPreferences.() -> Unit) {
-        editing = true
-        commands(this)
-        preferences.edit().also {
-            for ((k, v) in updates) {
-                when (v) {
-                    is String -> it.putString(k, v)
-                    null -> it.remove(k)
-                }
-            }
-        }.apply()
-        editing = false
-    }
-
-    enum class Mode {
-        Disabled,
-        Connector,
-        Network
-    }
-
-    companion object {
-        const val PREF_DROIDGUARD_MODE = "droidguard_mode"
-        const val PREF_DROIDGUARD_NETWORK_SERVER_URL = "droidguard_network_server_url"
-    }
-}
-
diff --git a/play-services-core/src/main/kotlin/org/microg/gms/droidguard/DroidGuardResultCreator.kt b/play-services-core/src/main/kotlin/org/microg/gms/droidguard/DroidGuardResultCreator.kt
deleted file mode 100644
index db3f80cd..00000000
--- a/play-services-core/src/main/kotlin/org/microg/gms/droidguard/DroidGuardResultCreator.kt
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * SPDX-FileCopyrightText: 2021, microG Project Team
- * SPDX-License-Identifier: Apache-2.0
- */
-
-package org.microg.gms.droidguard
-
-import android.content.Context
-import android.os.Bundle
-import android.util.Base64
-import com.android.volley.VolleyError
-import com.android.volley.toolbox.StringRequest
-import com.android.volley.toolbox.Volley
-import org.microg.gms.checkin.LastCheckinInfo
-import kotlin.coroutines.resume
-import kotlin.coroutines.resumeWithException
-import kotlin.coroutines.suspendCoroutine
-
-interface DroidGuardResultCreator {
-    suspend fun getResult(flow: String, data: Map<String, String>): ByteArray
-
-    companion object {
-        fun getInstance(context: Context): DroidGuardResultCreator = when (DroidGuardPreferences(context).mode) {
-            DroidGuardPreferences.Mode.Disabled -> throw RuntimeException("DroidGuard disabled")
-            DroidGuardPreferences.Mode.Connector -> ConnectorDroidGuardResultCreator(context)
-            DroidGuardPreferences.Mode.Network -> NetworkDroidGuardResultCreator(context)
-        }
-
-        suspend fun getResult(context: Context, flow: String, data: Map<String, String>): ByteArray =
-                getInstance(context).getResult(flow, data)
-    }
-}
-
-private class ConnectorDroidGuardResultCreator(private val context: Context) : DroidGuardResultCreator {
-    override suspend fun getResult(flow: String, data: Map<String, String>): ByteArray = suspendCoroutine { continuation ->
-        Thread {
-            val bundle = Bundle()
-            for (entry in data) {
-                bundle.putString(entry.key, entry.value)
-            }
-            val conn = RemoteDroidGuardConnector(context)
-            val dg = conn.guard(flow, LastCheckinInfo.read(context).androidId.toString(), bundle)
-            if (dg == null) {
-                continuation.resumeWithException(RuntimeException("No DroidGuard result"))
-            } else if (dg.statusCode == 0 && dg.result != null) {
-                continuation.resume(dg.result)
-            } else {
-                continuation.resumeWithException(RuntimeException("Status: " + dg.statusCode + ", error:" + dg.errorMsg))
-            }
-        }.start()
-    }
-}
-
-private class NetworkDroidGuardResultCreator(private val context: Context) : DroidGuardResultCreator {
-    private val queue = Volley.newRequestQueue(context)
-    private val url: String
-        get() = DroidGuardPreferences(context).networkServerUrl ?: throw RuntimeException("Network URL required")
-
-    override suspend fun getResult(flow: String, data: Map<String, String>): ByteArray = suspendCoroutine { continuation ->
-        queue.add(PostParamsStringRequest("$url?flow=$flow", data, {
-            continuation.resume(Base64.decode(it, Base64.NO_WRAP + Base64.NO_PADDING + Base64.URL_SAFE))
-        }, {
-            continuation.resumeWithException(RuntimeException(it))
-        }))
-    }
-}
-
-class PostParamsStringRequest(url: String, private val data: Map<String, String>, listener: (String) -> Unit, errorListener: (VolleyError) -> Unit) : StringRequest(Method.POST, url, listener, errorListener) {
-    override fun getParams(): Map<String, String> = data
-}
diff --git a/play-services-core/src/main/kotlin/org/microg/gms/droidguard/ServiceInfo.kt b/play-services-core/src/main/kotlin/org/microg/gms/droidguard/ServiceInfo.kt
deleted file mode 100644
index c73dde72..00000000
--- a/play-services-core/src/main/kotlin/org/microg/gms/droidguard/ServiceInfo.kt
+++ /dev/null
@@ -1,93 +0,0 @@
-/*
- * SPDX-FileCopyrightText: 2020, microG Project Team
- * SPDX-License-Identifier: Apache-2.0
- */
-
-package org.microg.gms.droidguard
-
-import android.content.BroadcastReceiver
-import android.content.Context
-import android.content.Intent
-import android.content.IntentFilter
-import android.util.Log
-import java.io.Serializable
-import kotlin.coroutines.resume
-import kotlin.coroutines.resumeWithException
-import kotlin.coroutines.suspendCoroutine
-
-private const val ACTION_SERVICE_INFO_REQUEST = "org.microg.gms.droidguard.SERVICE_INFO_REQUEST"
-private const val ACTION_UPDATE_CONFIGURATION = "org.microg.gms.droidguard.UPDATE_CONFIGURATION"
-private const val ACTION_SERVICE_INFO_RESPONSE = "org.microg.gms.droidguard.SERVICE_INFO_RESPONSE"
-private const val EXTRA_SERVICE_INFO = "org.microg.gms.droidguard.SERVICE_INFO"
-private const val EXTRA_CONFIGURATION = "org.microg.gms.droidguard.CONFIGURATION"
-private const val TAG = "GmsGcmStatusInfo"
-
-data class ServiceInfo(val configuration: ServiceConfiguration) : Serializable
-
-data class ServiceConfiguration(val mode: DroidGuardPreferences.Mode, val networkServerUrl: String?) : Serializable {
-    fun saveToPrefs(context: Context) {
-        DroidGuardPreferences(context).edit {
-            mode = this@ServiceConfiguration.mode
-            networkServerUrl = this@ServiceConfiguration.networkServerUrl
-        }
-    }
-}
-
-private fun DroidGuardPreferences.toConfiguration(): ServiceConfiguration = ServiceConfiguration(mode, networkServerUrl)
-
-class ServiceInfoReceiver : BroadcastReceiver() {
-    private fun sendInfoResponse(context: Context) {
-        context.sendOrderedBroadcast(Intent(ACTION_SERVICE_INFO_RESPONSE).apply {
-            setPackage(context.packageName)
-            putExtra(EXTRA_SERVICE_INFO, ServiceInfo(DroidGuardPreferences(context).toConfiguration()))
-        }, null)
-    }
-
-    override fun onReceive(context: Context, intent: Intent) {
-        try {
-            when (intent.action) {
-                ACTION_UPDATE_CONFIGURATION -> {
-                    (intent.getSerializableExtra(EXTRA_CONFIGURATION) as? ServiceConfiguration)?.saveToPrefs(context)
-                }
-            }
-            sendInfoResponse(context)
-        } catch (e: Exception) {
-            Log.w(TAG, e)
-        }
-    }
-}
-
-private suspend fun sendToServiceInfoReceiver(intent: Intent, context: Context): ServiceInfo = suspendCoroutine {
-    context.registerReceiver(object : BroadcastReceiver() {
-        override fun onReceive(context: Context, intent: Intent) {
-            context.unregisterReceiver(this)
-            val serviceInfo = try {
-                intent.getSerializableExtra(EXTRA_SERVICE_INFO) as ServiceInfo
-            } catch (e: Exception) {
-                it.resumeWithException(e)
-                return
-            }
-            try {
-                it.resume(serviceInfo)
-            } catch (e: Exception) {
-                Log.w(TAG, e)
-            }
-        }
-    }, IntentFilter(ACTION_SERVICE_INFO_RESPONSE))
-    try {
-        context.sendOrderedBroadcast(intent, null)
-    } catch (e: Exception) {
-        it.resumeWithException(e)
-    }
-}
-
-suspend fun getDroidGuardServiceInfo(context: Context): ServiceInfo = sendToServiceInfoReceiver(
-        Intent(context, ServiceInfoReceiver::class.java).apply {
-            action = ACTION_SERVICE_INFO_REQUEST
-        }, context)
-
-suspend fun setDroidGuardServiceConfiguration(context: Context, configuration: ServiceConfiguration): ServiceInfo = sendToServiceInfoReceiver(
-        Intent(context, ServiceInfoReceiver::class.java).apply {
-            action = ACTION_UPDATE_CONFIGURATION
-            putExtra(EXTRA_CONFIGURATION, configuration)
-        }, context)
diff --git a/play-services-core/src/main/kotlin/org/microg/gms/fonts/FontsProvider.kt b/play-services-core/src/main/kotlin/org/microg/gms/fonts/FontsProvider.kt
index a15180c5..2ccf28d0 100644
--- a/play-services-core/src/main/kotlin/org/microg/gms/fonts/FontsProvider.kt
+++ b/play-services-core/src/main/kotlin/org/microg/gms/fonts/FontsProvider.kt
@@ -35,7 +35,7 @@ class FontsProvider : ContentProvider() {
         selectionArgs: Array<out String>?,
         sortOrder: String?
     ): Cursor {
-        Log.e(TAG, "query: $uri ${projection?.toList()} $selection")
+        Log.e(TAG, "query: $uri ${projection?.toList()} $selection ${selectionArgs?.joinToString(prefix = "[", postfix = "]")}")
         val cursor = MatrixCursor(COLUMNS)
         // We could also return an empty cursor here, but some apps have been reported to crash
         // when their expected font is not returned by Google's font provider.
diff --git a/play-services-core/src/main/kotlin/org/microg/gms/gcm/PushRegisterService.kt b/play-services-core/src/main/kotlin/org/microg/gms/gcm/PushRegisterService.kt
index f1ba3435..864c9e83 100644
--- a/play-services-core/src/main/kotlin/org/microg/gms/gcm/PushRegisterService.kt
+++ b/play-services-core/src/main/kotlin/org/microg/gms/gcm/PushRegisterService.kt
@@ -148,7 +148,7 @@ class PushRegisterService : LifecycleService() {
         Log.d(TAG, "register[req]: " + intent.toString() + " extras=" + intent!!.extras)
         val bundle = completeRegisterRequest(this, database,
                 RegisterRequest()
-                        .build(Utils.getBuild(this))
+                        .build(this)
                         .sender(intent.getStringExtra(EXTRA_SENDER))
                         .checkin(LastCheckinInfo.read(this))
                         .app(packageName)
@@ -164,7 +164,7 @@ class PushRegisterService : LifecycleService() {
         val packageName = intent.appPackageName ?: throw RuntimeException("No package provided")
         Log.d(TAG, "unregister[req]: " + intent.toString() + " extras=" + intent.extras)
         val bundle = completeRegisterRequest(this, database, RegisterRequest()
-                .build(Utils.getBuild(this))
+                .build(this)
                 .sender(intent.getStringExtra(EXTRA_SENDER))
                 .checkin(LastCheckinInfo.read(this))
                 .app(packageName)
@@ -314,7 +314,7 @@ internal class PushRegisterHandler(private val context: Context, private val dat
                         if (!delete) ensureAppRegistrationAllowed(context, database, packageName)
                         val bundle = completeRegisterRequest(context, database,
                                 RegisterRequest()
-                                        .build(Utils.getBuild(context))
+                                        .build(context)
                                         .sender(sender)
                                         .checkin(LastCheckinInfo.read(context))
                                         .app(packageName)
diff --git a/play-services-core/src/main/kotlin/org/microg/gms/phenotype/PhenotypeService.kt b/play-services-core/src/main/kotlin/org/microg/gms/phenotype/PhenotypeService.kt
index 045d8640..332cae40 100644
--- a/play-services-core/src/main/kotlin/org/microg/gms/phenotype/PhenotypeService.kt
+++ b/play-services-core/src/main/kotlin/org/microg/gms/phenotype/PhenotypeService.kt
@@ -1,5 +1,5 @@
 /*
- * SPDX-FileCopyrightText: 2020, microG Project Team
+ * SPDX-FileCopyrightText: 2020 microG Project Team
  * SPDX-License-Identifier: Apache-2.0
  */
 
@@ -10,13 +10,14 @@ import android.util.Log
 import com.google.android.gms.common.api.Status
 import com.google.android.gms.common.internal.GetServiceRequest
 import com.google.android.gms.common.internal.IGmsCallbacks
-import com.google.android.gms.phenotype.Configurations
+import com.google.android.gms.phenotype.*
 import com.google.android.gms.phenotype.internal.IPhenotypeCallbacks
 import com.google.android.gms.phenotype.internal.IPhenotypeService
 import org.microg.gms.BaseService
 import org.microg.gms.common.GmsService
+import org.microg.gms.utils.warnOnTransactionIssues
 
-private const val TAG = "GmsPhenotypeSvc"
+private const val TAG = "PhenotypeService"
 
 class PhenotypeService : BaseService(TAG, GmsService.PHENOTYPE) {
     override fun handleServiceRequest(callback: IGmsCallbacks, request: GetServiceRequest?, service: GmsService?) {
@@ -26,20 +27,118 @@ class PhenotypeService : BaseService(TAG, GmsService.PHENOTYPE) {
 
 class PhenotypeServiceImpl : IPhenotypeService.Stub() {
     override fun register(callbacks: IPhenotypeCallbacks, p1: String?, p2: Int, p3: Array<out String>?, p4: ByteArray?) {
-        Log.d(TAG, "register($p1, $p2, ${p3?.contentToString()}, $p4)")
-        callbacks.onRegister(Status.SUCCESS)
+        Log.d(TAG, "register($p1, $p2, $p3, $p4)")
+        callbacks.onRegistered(Status.SUCCESS)
     }
 
-    override fun getConfigurationSnapshot(callbacks: IPhenotypeCallbacks, p1: String?, p2: String?, p3: String?) {
-        Log.d(TAG, "getConfigurationSnapshot($p1, $p2, $p3)")
-        callbacks.onConfigurations(Status.SUCCESS, Configurations().apply {
+    override fun weakRegister(callbacks: IPhenotypeCallbacks, p1: String?, p2: Int, p3: Array<out String>?, p4: IntArray?, p5: ByteArray?) {
+        Log.d(TAG, "weakRegister($p1, $p2, $p3, $p4, $p5)")
+        callbacks.onWeakRegistered(Status.SUCCESS)
+    }
+
+    override fun unregister(callbacks: IPhenotypeCallbacks, p1: String?) {
+        Log.d(TAG, "unregister($p1)")
+        callbacks.onUnregistered(Status.SUCCESS)
+    }
+
+    override fun getConfigurationSnapshot(callbacks: IPhenotypeCallbacks, p1: String?, p2: String?) {
+        Log.d(TAG, "getConfigurationSnapshot($p1, $p2)")
+        callbacks.onConfiguration(Status.SUCCESS, Configurations().apply {
+            field4 = emptyArray()
+        })
+    }
+
+    override fun commitToConfiguration(callbacks: IPhenotypeCallbacks, p1: String?) {
+        Log.d(TAG, "commitToConfiguration($p1)")
+        callbacks.onCommitedToConfiguration(Status.SUCCESS)
+    }
+
+    override fun getExperimentTokens(callbacks: IPhenotypeCallbacks, p1: String?, logSourceName: String?) {
+        Log.d(TAG, "getExperimentTokens($p1, $logSourceName)")
+        callbacks.onExperimentTokens(Status.SUCCESS, ExperimentTokens())
+    }
+
+    override fun getDogfoodsToken(callbacks: IPhenotypeCallbacks) {
+        Log.d(TAG, "getDogfoodsToken()")
+        callbacks.onDogfoodsToken(Status.SUCCESS, DogfoodsToken())
+    }
+
+    override fun setDogfoodsToken(callbacks: IPhenotypeCallbacks, p1: ByteArray?) {
+        Log.d(TAG, "setDogfoodsToken($p1)")
+        callbacks.onDogfoodsTokenSet(Status.SUCCESS)
+    }
+
+    override fun getFlag(callbacks: IPhenotypeCallbacks, packageName: String?, name: String?, type: Int) {
+        Log.d(TAG, "setDogfoodsToken($packageName, $name, $type)")
+        callbacks.onFlag(Status.SUCCESS, null)
+    }
+
+    override fun getCommitedConfiguration(callbacks: IPhenotypeCallbacks, p1: String?) {
+        Log.d(TAG, "getCommitedConfiguration($p1)")
+        callbacks.onCommittedConfiguration(Status.SUCCESS, Configurations().apply {
+            field4 = emptyArray()
+        })
+    }
+
+    override fun getConfigurationSnapshot2(callbacks: IPhenotypeCallbacks, p1: String?, p2: String?, p3: String?) {
+        Log.d(TAG, "getConfigurationSnapshot2($p1, $p2, $p3)")
+        callbacks.onConfiguration(Status.SUCCESS, Configurations().apply {
             field4 = emptyArray()
         })
     }
 
-    override fun onTransact(code: Int, data: Parcel, reply: Parcel?, flags: Int): Boolean {
-        if (super.onTransact(code, data, reply, flags)) return true
-        Log.d(TAG, "onTransact [unknown]: $code, $data, $flags")
-        return false
+    override fun syncAfterOperation(callbacks: IPhenotypeCallbacks, p1: String?, p2: Long) {
+        Log.d(TAG, "syncAfterOperation($p1, $p2)")
+        callbacks.onSyncFinished(Status.SUCCESS, p2)
     }
+
+    override fun registerSync(callbacks: IPhenotypeCallbacks, p1: String?, p2: Int, p3: Array<out String>?, p4: ByteArray?, p5: String?, p6: String?) {
+        Log.d(TAG, "registerSync($p1, $p2, $p3, $p4, $p5, $p6)")
+        callbacks.onConfiguration(Status.SUCCESS, Configurations().apply {
+            field4 = emptyArray()
+        })
+    }
+
+    override fun setFlagOverrides(callbacks: IPhenotypeCallbacks, packageName: String?, user: String?, flagName: String?, flagType: Int, flagDataType: Int, flagValue: String?) {
+        Log.d(TAG, "setFlagOverrides($packageName, $user, $flagName, $flagDataType, $flagType, $flagDataType, $flagValue)")
+        callbacks.onFlagOverridesSet(Status.SUCCESS)
+    }
+
+    override fun deleteFlagOverrides(callbacks: IPhenotypeCallbacks, packageName: String?, user: String?, flagName: String?) {
+        Log.d(TAG, "deleteFlagOverrides($packageName, $user, $flagName)")
+        callbacks.onFlagOverrides(Status.SUCCESS, FlagOverrides())
+    }
+
+    override fun listFlagOverrides(callbacks: IPhenotypeCallbacks, packageName: String?, user: String?, flagName: String?) {
+        Log.d(TAG, "listFlagOverrides($packageName, $user, $flagName)")
+        callbacks.onFlagOverrides(Status.SUCCESS, FlagOverrides())
+    }
+
+    override fun clearFlagOverrides(callbacks: IPhenotypeCallbacks, packageName: String?, user: String?) {
+        Log.d(TAG, "clearFlagOverrides($packageName, $user)")
+        callbacks.onFlagOverridesSet(Status.SUCCESS)
+    }
+
+    override fun bulkRegister(callbacks: IPhenotypeCallbacks, infos: Array<out RegistrationInfo>?) {
+        Log.d(TAG, "bulkRegister($infos)")
+        callbacks.onRegistered(Status.SUCCESS)
+    }
+
+    override fun setAppSpecificProperties(callbacks: IPhenotypeCallbacks, p1: String?, p2: ByteArray?) {
+        Log.d(TAG, "setAppSpecificProperties($p1, $p2)")
+        callbacks.onAppSpecificPropertiesSet(Status.SUCCESS)
+    }
+
+    override fun getServingVersion(callbacks: IPhenotypeCallbacks) {
+        Log.d(TAG, "getServingVersion()")
+        callbacks.onServingVersion(Status.SUCCESS, 1)
+    }
+
+    override fun getExperimentTokens2(callbacks: IPhenotypeCallbacks, p1: String?, p2: String?, p3: String?, p4: String?) {
+        Log.d(TAG, "getExperimentTokens2($p1, $p2, $p3, $p4)")
+        callbacks.onExperimentTokens(Status.SUCCESS, ExperimentTokens())
+    }
+
+    override fun onTransact(code: Int, data: Parcel, reply: Parcel?, flags: Int): Boolean =
+        warnOnTransactionIssues(code, reply, flags) { super.onTransact(code, data, reply, flags) }
 }
diff --git a/play-services-core/src/main/kotlin/org/microg/gms/provision/ProvisionService.kt b/play-services-core/src/main/kotlin/org/microg/gms/provision/ProvisionService.kt
index 27230072..b7c7da70 100644
--- a/play-services-core/src/main/kotlin/org/microg/gms/provision/ProvisionService.kt
+++ b/play-services-core/src/main/kotlin/org/microg/gms/provision/ProvisionService.kt
@@ -14,10 +14,10 @@ import androidx.lifecycle.lifecycleScope
 import kotlinx.coroutines.delay
 import org.microg.gms.checkin.getCheckinServiceInfo
 import org.microg.gms.checkin.setCheckinServiceConfiguration
+import org.microg.gms.droidguard.core.DroidGuardPreferences
 import org.microg.gms.gcm.getGcmServiceInfo
 import org.microg.gms.gcm.setGcmServiceConfiguration
-import org.microg.gms.safetynet.getSafetyNetServiceInfo
-import org.microg.gms.safetynet.setSafetyNetServiceConfiguration
+import org.microg.gms.safetynet.SafetyNetPreferences
 
 class ProvisionService : LifecycleService() {
     private fun Bundle.getBooleanOrNull(key: String): Boolean? {
@@ -34,7 +34,10 @@ class ProvisionService : LifecycleService() {
 
             intent?.extras?.getBooleanOrNull("checkin_enabled")?.let { setCheckinServiceConfiguration(this@ProvisionService, getCheckinServiceInfo(this@ProvisionService).configuration.copy(enabled = it)) }
             intent?.extras?.getBooleanOrNull("gcm_enabled")?.let { setGcmServiceConfiguration(this@ProvisionService, getGcmServiceInfo(this@ProvisionService).configuration.copy(enabled = it)) }
-            intent?.extras?.getBooleanOrNull("safetynet_enabled")?.let { setSafetyNetServiceConfiguration(this@ProvisionService, getSafetyNetServiceInfo(this@ProvisionService).configuration.copy(enabled = it)) }
+            intent?.extras?.getBooleanOrNull("safetynet_enabled")?.let {
+                SafetyNetPreferences.setEnabled(this@ProvisionService, it)
+                DroidGuardPreferences.setEnabled(this@ProvisionService, it)
+            }
             // What else?
 
             delay(2 * 1000) // Wait 2 seconds to give provisioning some extra time
diff --git a/play-services-core/src/main/kotlin/org/microg/gms/recaptcha/ReCaptchaActivity.kt b/play-services-core/src/main/kotlin/org/microg/gms/recaptcha/ReCaptchaActivity.kt
deleted file mode 100644
index a5da3236..00000000
--- a/play-services-core/src/main/kotlin/org/microg/gms/recaptcha/ReCaptchaActivity.kt
+++ /dev/null
@@ -1,204 +0,0 @@
-/*
- * SPDX-FileCopyrightText: 2021, microG Project Team
- * SPDX-License-Identifier: Apache-2.0
- */
-
-package org.microg.gms.recaptcha
-
-import android.annotation.SuppressLint
-import android.content.Intent
-import android.net.Uri
-import android.net.http.SslCertificate
-import android.os.Build.VERSION.SDK_INT
-import android.os.Bundle
-import android.os.ResultReceiver
-import android.util.Base64
-import android.util.Log
-import android.view.View
-import android.view.Window
-import android.webkit.*
-import androidx.appcompat.app.AppCompatActivity
-import androidx.lifecycle.lifecycleScope
-import androidx.webkit.WebViewClientCompat
-import com.google.android.gms.R
-import com.google.android.gms.safetynet.SafetyNetStatusCodes.*
-import org.microg.gms.droidguard.DroidGuardResultCreator
-import java.io.ByteArrayInputStream
-import java.net.URLEncoder
-import java.security.MessageDigest
-import kotlin.math.min
-
-private const val TAG = "GmsReCAPTCHA"
-
-fun StringBuilder.appendUrlEncodedParam(key: String, value: String?) = append("&")
-        .append(URLEncoder.encode(key, "UTF-8"))
-        .append("=")
-        .append(value?.let { URLEncoder.encode(it, "UTF-8") } ?: "")
-
-class ReCaptchaActivity : AppCompatActivity() {
-    private val receiver: ResultReceiver?
-        get() = intent?.getParcelableExtra("result") as ResultReceiver?
-    private val params: String?
-        get() = intent?.getStringExtra("params")
-    private val webView: WebView?
-        get() = findViewById(R.id.recaptcha_webview)
-    private val loading: View?
-        get() = findViewById(R.id.recaptcha_loading)
-    private val density: Float
-        get() = resources.displayMetrics.density
-    private val widthPixels: Int
-        get() = resources.displayMetrics.widthPixels
-    private val heightPixels: Int
-        get() {
-            val base = resources.displayMetrics.heightPixels
-            val statusBarHeightId = resources.getIdentifier("status_bar_height", "dimen", "android")
-            val statusBarHeight = if (statusBarHeightId > 0) resources.getDimensionPixelSize(statusBarHeightId) else 0
-            return base - statusBarHeight - (density * 20.0).toInt()
-        }
-
-    @SuppressLint("SetJavaScriptEnabled", "AddJavascriptInterface")
-    override fun onCreate(savedInstanceState: Bundle?) {
-        super.onCreate(savedInstanceState)
-        if (receiver == null || params == null) {
-            finish()
-            return
-        }
-        requestWindowFeature(Window.FEATURE_NO_TITLE)
-        setContentView(R.layout.recaptcha_window)
-        webView?.apply {
-            webViewClient = object : WebViewClientCompat() {
-                fun String.isRecaptchaUrl() = startsWith("https://www.gstatic.com/recaptcha/") || startsWith("https://www.google.com/recaptcha/") || startsWith("https://www.google.com/js/bg/")
-
-                override fun shouldInterceptRequest(view: WebView, url: String): WebResourceResponse? {
-                    if (url.isRecaptchaUrl()) {
-                        return null
-                    }
-                    return WebResourceResponse("text/plain", "UTF-8", ByteArrayInputStream(byteArrayOf()))
-                }
-
-                override fun shouldOverrideUrlLoading(view: WebView, url: String): Boolean {
-                    if (url.startsWith("https://support.google.com/recaptcha")) {
-                        startActivity(Intent("android.intent.action.VIEW", Uri.parse(url)))
-                        finish()
-                        return true
-                    }
-                    return !url.isRecaptchaUrl()
-                }
-            }
-            settings.apply {
-                javaScriptEnabled = true
-                useWideViewPort = true
-                displayZoomControls = false
-                setSupportZoom(false)
-                cacheMode = WebSettings.LOAD_NO_CACHE
-            }
-            addJavascriptInterface(object {
-                @JavascriptInterface
-                fun challengeReady() {
-                    Log.d(TAG, "challengeReady()")
-                    runOnUiThread { webView?.loadUrl("javascript: RecaptchaMFrame.show(${min(widthPixels / density, 400f)}, ${min(heightPixels / density, 400f)});") }
-                }
-
-                @JavascriptInterface
-                fun getClientAPIVersion() = 1
-
-                @JavascriptInterface
-                fun onChallengeExpired() {
-                    Log.d(TAG, "onChallengeExpired()")
-                }
-
-                @JavascriptInterface
-                fun onError(errorCode: Int, finish: Boolean) {
-                    Log.d(TAG, "onError($errorCode, $finish)")
-                    when (errorCode) {
-                        1 -> receiver?.send(ERROR, Bundle().apply { putString("error", "Invalid Input Argument"); putInt("errorCode", ERROR) })
-                        2 -> receiver?.send(TIMEOUT, Bundle().apply { putString("error", "Session Timeout"); putInt("errorCode", TIMEOUT) })
-                        7 -> receiver?.send(RECAPTCHA_INVALID_SITEKEY, Bundle().apply { putString("error", "Invalid Site Key"); putInt("errorCode", RECAPTCHA_INVALID_SITEKEY) })
-                        8 -> receiver?.send(RECAPTCHA_INVALID_KEYTYPE, Bundle().apply { putString("error", "Invalid Type of Site Key"); putInt("errorCode", RECAPTCHA_INVALID_KEYTYPE) })
-                        9 -> receiver?.send(RECAPTCHA_INVALID_PACKAGE_NAME, Bundle().apply { putString("error", "Invalid Package Name for App"); putInt("errorCode", RECAPTCHA_INVALID_PACKAGE_NAME) })
-                        else -> receiver?.send(ERROR, Bundle().apply { putString("error", "error"); putInt("errorCode", ERROR) })
-                    }
-                    if (finish) this@ReCaptchaActivity.finish()
-                }
-
-                @JavascriptInterface
-                fun onResize(width: Int, height: Int) {
-                    Log.d(TAG, "onResize($width, $height)")
-                    if (webView?.visibility == View.VISIBLE) {
-                        runOnUiThread { setWebViewSize(width, height, true) }
-                    } else {
-                        runOnUiThread { webView?.loadUrl("javascript: RecaptchaMFrame.shown($width, $height, true);") }
-                    }
-                }
-
-                @JavascriptInterface
-                fun onShow(visible: Boolean, width: Int, height: Int) {
-                    Log.d(TAG, "onShow($visible, $width, $height)")
-                    if (width <= 0 && height <= 0) {
-                        runOnUiThread { webView?.loadUrl("javascript: RecaptchaMFrame.shown($width, $height, $visible);") }
-                    } else {
-                        runOnUiThread {
-                            setWebViewSize(width, height, visible)
-                            loading?.visibility = if (visible) View.GONE else View.VISIBLE
-                            webView?.visibility = if (visible) View.VISIBLE else View.GONE
-                        }
-                    }
-                }
-
-                @JavascriptInterface
-                fun requestToken(s: String, b: Boolean) {
-                    Log.d(TAG, "requestToken($s, $b)")
-                    runOnUiThread {
-                        val cert = webView?.certificate?.let { Base64.encodeToString(SslCertificate.saveState(it).getByteArray("x509-certificate"), Base64.URL_SAFE + Base64.NO_PADDING + Base64.NO_WRAP) }
-                                ?: ""
-                        val params = StringBuilder(params).appendUrlEncodedParam("c", s).appendUrlEncodedParam("sc", cert).appendUrlEncodedParam("mt", System.currentTimeMillis().toString()).toString()
-                        val flow = "recaptcha-android-${if (b) "verify" else "reload"}"
-                        lifecycleScope.launchWhenResumed {
-                            updateToken(flow, params)
-                        }
-                    }
-                }
-
-                @JavascriptInterface
-                fun verifyCallback(token: String) {
-                    Log.d(TAG, "verifyCallback($token)")
-                    receiver?.send(0, Bundle().apply { putString("token", token) })
-                    finish()
-                }
-            }, "RecaptchaEmbedder")
-        }
-        lifecycleScope.launchWhenResumed {
-            open()
-        }
-    }
-
-    fun setWebViewSize(width: Int, height: Int, visible: Boolean) {
-        webView?.apply {
-            layoutParams.width = min(widthPixels, (width * density).toInt())
-            layoutParams.height = min(heightPixels, (height * density).toInt())
-            requestLayout()
-            loadUrl("javascript: RecaptchaMFrame.shown(${(layoutParams.width / density).toInt()}, ${(layoutParams.height / density).toInt()}, $visible);")
-        }
-    }
-
-    suspend fun updateToken(flow: String, params: String) {
-        val map = mapOf("contentBinding" to Base64.encodeToString(MessageDigest.getInstance("SHA-256").digest(params.toByteArray()), Base64.NO_WRAP))
-        val dg = Base64.encodeToString(DroidGuardResultCreator.getResult(this, flow, map), Base64.NO_WRAP + Base64.URL_SAFE + Base64.NO_PADDING)
-        if (SDK_INT >= 19) {
-            webView?.evaluateJavascript("RecaptchaMFrame.token('${URLEncoder.encode(dg, "UTF-8")}', '$params');", null)
-        } else {
-            webView?.loadUrl("javascript: RecaptchaMFrame.token('${URLEncoder.encode(dg, "UTF-8")}', '$params');")
-        }
-    }
-
-    suspend fun open() {
-        val params = StringBuilder(params).appendUrlEncodedParam("mt", System.currentTimeMillis().toString()).toString()
-        val map = mapOf("contentBinding" to Base64.encodeToString(MessageDigest.getInstance("SHA-256").digest(params.toByteArray()), Base64.NO_WRAP))
-        val dg = Base64.encodeToString(DroidGuardResultCreator.getResult(this, "recaptcha-android-frame", map), Base64.NO_WRAP + Base64.URL_SAFE + Base64.NO_PADDING)
-        webView?.postUrl(MFRAME_URL, "mav=1&dg=${URLEncoder.encode(dg, "UTF-8")}&mp=${URLEncoder.encode(params, "UTF-8")}".toByteArray())
-    }
-
-    companion object {
-        private const val MFRAME_URL = "https://www.google.com/recaptcha/api2/mframe"
-    }
-}
diff --git a/play-services-core/src/main/kotlin/org/microg/gms/safetynet/SafetyNetClientService.kt b/play-services-core/src/main/kotlin/org/microg/gms/safetynet/SafetyNetClientService.kt
deleted file mode 100644
index 3426fbb2..00000000
--- a/play-services-core/src/main/kotlin/org/microg/gms/safetynet/SafetyNetClientService.kt
+++ /dev/null
@@ -1,156 +0,0 @@
-/*
- * SPDX-FileCopyrightText: 2021, microG Project Team
- * SPDX-License-Identifier: Apache-2.0
- */
-package org.microg.gms.safetynet
-
-import android.content.Context
-import android.content.Intent
-import android.os.Build.VERSION.SDK_INT
-import android.os.Bundle
-import android.os.Parcel
-import android.os.ResultReceiver
-import android.util.Base64
-import android.util.Log
-import androidx.lifecycle.Lifecycle
-import androidx.lifecycle.LifecycleOwner
-import androidx.lifecycle.lifecycleScope
-import com.google.android.gms.common.api.CommonStatusCodes
-import com.google.android.gms.common.api.Status
-import com.google.android.gms.common.internal.GetServiceRequest
-import com.google.android.gms.common.internal.IGmsCallbacks
-import com.google.android.gms.safetynet.AttestationData
-import com.google.android.gms.safetynet.RecaptchaResultData
-import com.google.android.gms.safetynet.internal.ISafetyNetCallbacks
-import com.google.android.gms.safetynet.internal.ISafetyNetService
-import kotlinx.coroutines.Dispatchers
-import kotlinx.coroutines.withContext
-import org.microg.gms.BaseService
-import org.microg.gms.checkin.LastCheckinInfo
-import org.microg.gms.common.GmsService
-import org.microg.gms.common.PackageUtils
-import org.microg.gms.droidguard.DroidGuardResultCreator
-import org.microg.gms.recaptcha.ReCaptchaActivity
-import org.microg.gms.recaptcha.appendUrlEncodedParam
-import java.io.IOException
-import java.util.*
-
-private const val TAG = "GmsSafetyNet"
-private const val DEFAULT_API_KEY = "AIzaSyDqVnJBjE5ymo--oBJt3On7HQx9xNm1RHA"
-
-class SafetyNetClientService : BaseService(TAG, GmsService.SAFETY_NET_CLIENT) {
-    override fun handleServiceRequest(callback: IGmsCallbacks, request: GetServiceRequest, service: GmsService) {
-        callback.onPostInitComplete(0, SafetyNetClientServiceImpl(this, request.packageName, lifecycle), null)
-    }
-}
-
-
-class SafetyNetClientServiceImpl(private val context: Context, private val packageName: String, private val lifecycle: Lifecycle) : ISafetyNetService.Stub(), LifecycleOwner {
-    override fun getLifecycle(): Lifecycle = lifecycle
-
-    override fun attest(callbacks: ISafetyNetCallbacks, nonce: ByteArray) {
-        attestWithApiKey(callbacks, nonce, DEFAULT_API_KEY)
-    }
-
-    override fun attestWithApiKey(callbacks: ISafetyNetCallbacks, nonce: ByteArray?, apiKey: String) {
-        if (nonce == null) {
-            callbacks.onAttestationData(Status(CommonStatusCodes.DEVELOPER_ERROR), null)
-            return
-        }
-        if (!SafetyNetPrefs.get(context).isEnabled) {
-            Log.d(TAG, "ignoring SafetyNet request, it's disabled")
-            callbacks.onAttestationData(Status.CANCELED, null)
-            return
-        }
-
-        lifecycleScope.launchWhenStarted {
-            try {
-                val attestation = Attestation(context, packageName)
-                attestation.buildPayload(nonce)
-                try {
-                    val dg = DroidGuardResultCreator.getResult(context, "attest", mapOf("contentBinding" to attestation.payloadHashBase64))
-                    attestation.setDroidGaurdResult(Base64.encodeToString(dg, Base64.NO_WRAP + Base64.NO_PADDING + Base64.URL_SAFE))
-                } catch (e: Exception) {
-                    if (SafetyNetPrefs.get(context).isOfficial) throw e
-                    Log.w(TAG, e)
-                    null
-                }
-                val data = withContext(Dispatchers.IO) { AttestationData(attestation.attest(apiKey)) }
-                callbacks.onAttestationData(Status.SUCCESS, data)
-            } catch (e: IOException) {
-                Log.w(TAG, e)
-                callbacks.onAttestationData(Status.INTERNAL_ERROR, null)
-            }
-        }
-    }
-
-    override fun getSharedUuid(callbacks: ISafetyNetCallbacks) {
-        PackageUtils.checkPackageUid(context, packageName, getCallingUid())
-        PackageUtils.assertExtendedAccess(context)
-
-        // TODO
-        Log.d(TAG, "dummy Method: getSharedUuid")
-        callbacks.onString("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
-    }
-
-    override fun lookupUri(callbacks: ISafetyNetCallbacks, s1: String, threatTypes: IntArray, i: Int, s2: String) {
-        Log.d(TAG, "unimplemented Method: lookupUri")
-    }
-
-    override fun init(callbacks: ISafetyNetCallbacks) {
-        Log.d(TAG, "dummy Method: init")
-        callbacks.onBoolean(Status.SUCCESS, true)
-    }
-
-    override fun getHarmfulAppsList(callbacks: ISafetyNetCallbacks) {
-        Log.d(TAG, "dummy Method: unknown4")
-        callbacks.onHarmfulAppsData(Status.SUCCESS, ArrayList())
-    }
-
-    override fun verifyWithRecaptcha(callbacks: ISafetyNetCallbacks, siteKey: String?) {
-        if (siteKey == null) {
-            callbacks.onAttestationData(Status(CommonStatusCodes.DEVELOPER_ERROR), null)
-            return
-        }
-        if (!SafetyNetPrefs.get(context).isEnabled) {
-            Log.d(TAG, "ignoring SafetyNet request, it's disabled")
-            callbacks.onAttestationData(Status.CANCELED, null)
-            return
-        }
-        val intent = Intent(context, ReCaptchaActivity::class.java)
-        intent.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY)
-        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
-        intent.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS)
-        val params = StringBuilder()
-        params.appendUrlEncodedParam("k", siteKey)
-                .appendUrlEncodedParam("di", LastCheckinInfo.read(context).androidId.toString())
-                .appendUrlEncodedParam("pk", packageName)
-                .appendUrlEncodedParam("sv", SDK_INT.toString())
-                .appendUrlEncodedParam("gv", "20.47.14 (040306-{{cl}})")
-                .appendUrlEncodedParam("gm", "260")
-                .appendUrlEncodedParam("as", Base64.encodeToString(Attestation.getPackageFileDigest(context, packageName), Base64.URL_SAFE or Base64.NO_WRAP or Base64.NO_PADDING))
-        for (signature in Attestation.getPackageSignatures(context, packageName)) {
-            params.appendUrlEncodedParam("ac", Base64.encodeToString(signature, Base64.URL_SAFE or Base64.NO_WRAP or Base64.NO_PADDING))
-        }
-        params.appendUrlEncodedParam("ip", "com.android.vending")
-                .appendUrlEncodedParam("av", false.toString())
-                .appendUrlEncodedParam("si", null)
-        intent.putExtra("params", params.toString())
-        intent.putExtra("result", object : ResultReceiver(null) {
-            override fun onReceiveResult(resultCode: Int, resultData: Bundle) {
-                if (resultCode != 0) {
-                    callbacks.onRecaptchaResult(Status(resultData.getInt("errorCode"), resultData.getString("error")), null)
-                } else {
-                    callbacks.onRecaptchaResult(Status.SUCCESS, RecaptchaResultData().apply { token = resultData.getString("token") })
-                }
-            }
-        })
-        context.startActivity(intent)
-    }
-
-    override fun onTransact(code: Int, data: Parcel, reply: Parcel?, flags: Int): Boolean {
-        if (super.onTransact(code, data, reply, flags)) return true
-        Log.d(TAG, "onTransact [unknown]: $code, $data, $flags")
-        return false
-    }
-}
diff --git a/play-services-core/src/main/kotlin/org/microg/gms/safetynet/ServiceInfo.kt b/play-services-core/src/main/kotlin/org/microg/gms/safetynet/ServiceInfo.kt
deleted file mode 100644
index 8d917572..00000000
--- a/play-services-core/src/main/kotlin/org/microg/gms/safetynet/ServiceInfo.kt
+++ /dev/null
@@ -1,90 +0,0 @@
-/*
- * SPDX-FileCopyrightText: 2021, microG Project Team
- * SPDX-License-Identifier: Apache-2.0
- */
-
-package org.microg.gms.safetynet
-
-import android.content.BroadcastReceiver
-import android.content.Context
-import android.content.Intent
-import android.content.IntentFilter
-import android.util.Log
-import java.io.Serializable
-import kotlin.coroutines.resume
-import kotlin.coroutines.resumeWithException
-import kotlin.coroutines.suspendCoroutine
-
-private const val ACTION_SERVICE_INFO_REQUEST = "org.microg.gms.snet.SERVICE_INFO_REQUEST"
-private const val ACTION_UPDATE_CONFIGURATION = "org.microg.gms.snet.UPDATE_CONFIGURATION"
-private const val ACTION_SERVICE_INFO_RESPONSE = "org.microg.gms.snet.SERVICE_INFO_RESPONSE"
-private const val EXTRA_SERVICE_INFO = "org.microg.gms.snet.SERVICE_INFO"
-private const val EXTRA_CONFIGURATION = "org.microg.gms.snet.CONFIGURATION"
-private const val TAG = "GmsSafetyNetStatusInfo"
-
-data class ServiceInfo(val configuration: ServiceConfiguration) : Serializable
-
-data class ServiceConfiguration(val enabled: Boolean) : Serializable {
-    fun saveToPrefs(context: Context) {
-        SafetyNetPrefs.get(context).isEnabled = enabled
-    }
-}
-
-private fun SafetyNetPrefs.toConfiguration(): ServiceConfiguration = ServiceConfiguration(isEnabled)
-
-class ServiceInfoReceiver : BroadcastReceiver() {
-    private fun sendInfoResponse(context: Context) {
-        context.sendOrderedBroadcast(Intent(ACTION_SERVICE_INFO_RESPONSE).apply {
-            setPackage(context.packageName)
-            putExtra(EXTRA_SERVICE_INFO, ServiceInfo(SafetyNetPrefs.get(context).toConfiguration()))
-        }, null)
-    }
-
-    override fun onReceive(context: Context, intent: Intent) {
-        try {
-            when (intent.action) {
-                ACTION_UPDATE_CONFIGURATION -> {
-                    (intent.getSerializableExtra(EXTRA_CONFIGURATION) as? ServiceConfiguration)?.saveToPrefs(context)
-                }
-            }
-            sendInfoResponse(context)
-        } catch (e: Exception) {
-            Log.w(TAG, e)
-        }
-    }
-}
-
-private suspend fun sendToServiceInfoReceiver(intent: Intent, context: Context): ServiceInfo = suspendCoroutine {
-    context.registerReceiver(object : BroadcastReceiver() {
-        override fun onReceive(context: Context, intent: Intent) {
-            context.unregisterReceiver(this)
-            val serviceInfo = try {
-                intent.getSerializableExtra(EXTRA_SERVICE_INFO) as ServiceInfo
-            } catch (e: Exception) {
-                it.resumeWithException(e)
-                return
-            }
-            try {
-                it.resume(serviceInfo)
-            } catch (e: Exception) {
-                Log.w(TAG, e)
-            }
-        }
-    }, IntentFilter(ACTION_SERVICE_INFO_RESPONSE))
-    try {
-        context.sendOrderedBroadcast(intent, null)
-    } catch (e: Exception) {
-        it.resumeWithException(e)
-    }
-}
-
-suspend fun getSafetyNetServiceInfo(context: Context): ServiceInfo = sendToServiceInfoReceiver(
-        Intent(context, ServiceInfoReceiver::class.java).apply {
-            action = ACTION_SERVICE_INFO_REQUEST
-        }, context)
-
-suspend fun setSafetyNetServiceConfiguration(context: Context, configuration: ServiceConfiguration): ServiceInfo = sendToServiceInfoReceiver(
-        Intent(context, ServiceInfoReceiver::class.java).apply {
-            action = ACTION_UPDATE_CONFIGURATION
-            putExtra(EXTRA_CONFIGURATION, configuration)
-        }, context)
diff --git a/play-services-core/src/main/kotlin/org/microg/gms/udc/FacsCacheService.kt b/play-services-core/src/main/kotlin/org/microg/gms/udc/FacsCacheService.kt
index c12b37bf..c48e0e81 100644
--- a/play-services-core/src/main/kotlin/org/microg/gms/udc/FacsCacheService.kt
+++ b/play-services-core/src/main/kotlin/org/microg/gms/udc/FacsCacheService.kt
@@ -5,6 +5,7 @@
 
 package org.microg.gms.udc
 
+import android.os.Parcel
 import android.util.Log
 import com.google.android.gms.common.api.Status
 import com.google.android.gms.common.internal.GetServiceRequest
@@ -14,6 +15,7 @@ import com.google.android.gms.facs.cache.internal.IFacsCacheCallbacks
 import com.google.android.gms.facs.cache.internal.IFacsCacheService
 import org.microg.gms.BaseService
 import org.microg.gms.common.GmsService
+import org.microg.gms.utils.warnOnTransactionIssues
 
 private const val TAG = "GmsFacsCache"
 
@@ -49,4 +51,5 @@ class FacsCacheServiceImpl : IFacsCacheService.Stub() {
         callbacks.onWriteDeviceLevelSettingsResult(Status.CANCELED)
     }
 
+    override fun onTransact(code: Int, data: Parcel, reply: Parcel?, flags: Int): Boolean = warnOnTransactionIssues(code, reply, flags) { super.onTransact(code, data, reply, flags) }
 }
diff --git a/play-services-core/src/main/kotlin/org/microg/gms/ui/DeviceRegistrationPreferencesFragment.kt b/play-services-core/src/main/kotlin/org/microg/gms/ui/DeviceRegistrationPreferencesFragment.kt
index 6d27eed6..316eecc6 100644
--- a/play-services-core/src/main/kotlin/org/microg/gms/ui/DeviceRegistrationPreferencesFragment.kt
+++ b/play-services-core/src/main/kotlin/org/microg/gms/ui/DeviceRegistrationPreferencesFragment.kt
@@ -5,31 +5,122 @@
 
 package org.microg.gms.ui
 
+import android.net.Uri
 import android.os.Bundle
 import android.os.Handler
 import android.text.format.DateUtils
+import android.util.Log
+import androidx.activity.result.ActivityResultLauncher
+import androidx.activity.result.contract.ActivityResultContracts
 import androidx.lifecycle.lifecycleScope
+import androidx.preference.ListPreference
 import androidx.preference.Preference
 import androidx.preference.PreferenceCategory
 import androidx.preference.PreferenceFragmentCompat
 import com.google.android.gms.R
 import org.microg.gms.checkin.getCheckinServiceInfo
+import org.microg.gms.profile.ProfileManager
+import org.microg.gms.profile.ProfileManager.PROFILE_AUTO
+import org.microg.gms.profile.ProfileManager.PROFILE_NATIVE
+import org.microg.gms.profile.ProfileManager.PROFILE_REAL
+import org.microg.gms.profile.ProfileManager.PROFILE_SYSTEM
+import org.microg.gms.profile.ProfileManager.PROFILE_USER
+import java.io.File
+import java.io.FileOutputStream
 
 class DeviceRegistrationPreferencesFragment : PreferenceFragmentCompat() {
+    private lateinit var deviceProfile: ListPreference
+    private lateinit var importProfile: Preference
+    private lateinit var serial: Preference
     private lateinit var statusCategory: PreferenceCategory
     private lateinit var status: Preference
     private lateinit var androidId: Preference
     private val handler = Handler()
     private val updateRunnable = Runnable { updateStatus() }
+    private lateinit var profileFileImport: ActivityResultLauncher<String>
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        profileFileImport = registerForActivityResult(ActivityResultContracts.GetContent(), this::onFileSelected)
+    }
+
+    private fun onFileSelected(uri: Uri?) {
+        if (uri == null) return
+        try {
+            val context = requireContext()
+            val file = File.createTempFile("profile_", ".xml", context.cacheDir)
+            context.contentResolver.openInputStream(uri)?.use { inputStream ->
+                FileOutputStream(file).use { inputStream.copyTo(it) }
+            }
+            val success = ProfileManager.importUserProfile(context, file)
+            file.delete()
+            if (success && ProfileManager.isAutoProfile(context, PROFILE_USER)) {
+                ProfileManager.setProfile(context, PROFILE_USER)
+            }
+            updateStatus()
+        } catch (e: Exception) {
+            Log.w(TAG, e)
+        }
+    }
 
     override fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {
         addPreferencesFromResource(R.xml.preferences_device_registration)
     }
 
     override fun onBindPreferences() {
+        deviceProfile = preferenceScreen.findPreference("pref_device_profile") ?: deviceProfile
+        importProfile = preferenceScreen.findPreference("pref_device_profile_import") ?: importProfile
+        serial = preferenceScreen.findPreference("pref_device_serial") ?: serial
         statusCategory = preferenceScreen.findPreference("prefcat_device_registration_status") ?: statusCategory
         status = preferenceScreen.findPreference("pref_device_registration_status") ?: status
         androidId = preferenceScreen.findPreference("pref_device_registration_android_id") ?: androidId
+
+        deviceProfile.setOnPreferenceChangeListener { _, newValue ->
+            ProfileManager.setProfile(requireContext(), newValue as String? ?: PROFILE_AUTO)
+            updateStatus()
+            true
+        }
+        importProfile.setOnPreferenceClickListener {
+            profileFileImport.launch("text/xml")
+            true
+        }
+    }
+
+    private fun configureProfilePreference() {
+        val context = requireContext()
+        val configuredProfile = ProfileManager.getConfiguredProfile(context)
+        val autoProfile = ProfileManager.getAutoProfile(context)
+        val autoProfileName = when (autoProfile) {
+            PROFILE_NATIVE -> getString(R.string.profile_name_native)
+            PROFILE_REAL -> getString(R.string.profile_name_real)
+            else -> ProfileManager.getProfileName(context, autoProfile)
+        }
+        val profiles =
+            mutableListOf(PROFILE_AUTO, PROFILE_NATIVE, PROFILE_REAL)
+        val profileNames = mutableListOf(getString(R.string.profile_name_auto, autoProfileName), getString(R.string.profile_name_native), getString(R.string.profile_name_real))
+        if (ProfileManager.hasProfile(context, PROFILE_SYSTEM)) {
+            profiles.add(PROFILE_SYSTEM)
+            profileNames.add(getString(R.string.profile_name_system, ProfileManager.getProfileName(context, PROFILE_SYSTEM)))
+        }
+        if (ProfileManager.hasProfile(context, PROFILE_USER)) {
+            profiles.add(PROFILE_USER)
+            profileNames.add(getString(R.string.profile_name_user, ProfileManager.getProfileName(context, PROFILE_USER)))
+        }
+        for (profile in R.xml::class.java.declaredFields.map { it.name }
+            .filter { it.startsWith("profile_") }
+            .map { it.substring(8) }
+            .sorted()) {
+            val profileName = ProfileManager.getProfileName(context, profile)
+            if (profileName != null) {
+                profiles.add(profile)
+                profileNames.add(profileName)
+            }
+        }
+        deviceProfile.entryValues = profiles.toTypedArray()
+        deviceProfile.entries = profileNames.toTypedArray()
+        deviceProfile.value = configuredProfile
+        deviceProfile.summary =
+            profiles.indexOf(configuredProfile).takeIf { it >= 0 }?.let { profileNames[it] } ?: "Unknown"
     }
 
     override fun onResume() {
@@ -43,13 +134,19 @@ class DeviceRegistrationPreferencesFragment : PreferenceFragmentCompat() {
     }
 
     private fun updateStatus() {
+        handler.removeCallbacks(updateRunnable)
         handler.postDelayed(updateRunnable, UPDATE_INTERVAL)
         val appContext = requireContext().applicationContext
         lifecycleScope.launchWhenResumed {
+            configureProfilePreference()
+            serial.summary = ProfileManager.getSerial(appContext)
             val serviceInfo = getCheckinServiceInfo(appContext)
             statusCategory.isVisible = serviceInfo.configuration.enabled
             if (serviceInfo.lastCheckin > 0) {
-                status.summary = getString(R.string.checkin_last_registration, DateUtils.getRelativeTimeSpanString(serviceInfo.lastCheckin, System.currentTimeMillis(), 0))
+                status.summary = getString(
+                    R.string.checkin_last_registration,
+                    DateUtils.getRelativeTimeSpanString(serviceInfo.lastCheckin, System.currentTimeMillis(), 0)
+                )
                 androidId.isVisible = true
                 androidId.summary = serviceInfo.androidId.toString(16)
             } else {
diff --git a/play-services-core/src/main/kotlin/org/microg/gms/ui/PushNotificationAllAppsFragment.kt b/play-services-core/src/main/kotlin/org/microg/gms/ui/PushNotificationAllAppsFragment.kt
index 91cac572..3be5ae4f 100644
--- a/play-services-core/src/main/kotlin/org/microg/gms/ui/PushNotificationAllAppsFragment.kt
+++ b/play-services-core/src/main/kotlin/org/microg/gms/ui/PushNotificationAllAppsFragment.kt
@@ -52,7 +52,7 @@ class PushNotificationAllAppsFragment : PreferenceFragmentCompat() {
     }
 
     private fun updateContent() {
-        val context = requireContext().applicationContext
+        val context = requireContext()
         lifecycleScope.launchWhenResumed {
             val apps = withContext(Dispatchers.IO) {
                 val res = database.appList.map { app ->
diff --git a/play-services-core/src/main/kotlin/org/microg/gms/ui/PushNotificationAppFragment.kt b/play-services-core/src/main/kotlin/org/microg/gms/ui/PushNotificationAppFragment.kt
index 28cd3b55..6c654344 100644
--- a/play-services-core/src/main/kotlin/org/microg/gms/ui/PushNotificationAppFragment.kt
+++ b/play-services-core/src/main/kotlin/org/microg/gms/ui/PushNotificationAppFragment.kt
@@ -46,13 +46,13 @@ class PushNotificationAppFragment : Fragment(R.layout.push_notification_fragment
 
     override fun onResume() {
         super.onResume()
-        val appContext = requireContext().applicationContext
+        val context = requireContext()
         lifecycleScope.launchWhenResumed {
-            val pm = appContext.packageManager
+            val pm = context.packageManager
             val applicationInfo = pm.getApplicationInfoIfExists(packageName)
             binding.appName = applicationInfo?.loadLabel(pm)?.toString() ?: packageName
             binding.appIcon = applicationInfo?.loadIcon(pm)
-                    ?: AppCompatResources.getDrawable(appContext, android.R.mipmap.sym_def_app_icon)
+                    ?: AppCompatResources.getDrawable(context, android.R.mipmap.sym_def_app_icon)
         }
     }
 }
diff --git a/play-services-core/src/main/kotlin/org/microg/gms/ui/SafetyNetFragment.kt b/play-services-core/src/main/kotlin/org/microg/gms/ui/SafetyNetFragment.kt
index bae598e8..88656d7c 100644
--- a/play-services-core/src/main/kotlin/org/microg/gms/ui/SafetyNetFragment.kt
+++ b/play-services-core/src/main/kotlin/org/microg/gms/ui/SafetyNetFragment.kt
@@ -12,10 +12,9 @@ import androidx.lifecycle.lifecycleScope
 import androidx.navigation.fragment.findNavController
 import com.google.android.gms.R
 import com.google.android.gms.databinding.SafetyNetFragmentBinding
-import org.microg.gms.checkin.getCheckinServiceInfo
-import org.microg.gms.safetynet.ServiceInfo
-import org.microg.gms.safetynet.getSafetyNetServiceInfo
-import org.microg.gms.safetynet.setSafetyNetServiceConfiguration
+import org.microg.gms.checkin.CheckinPrefs
+import org.microg.gms.droidguard.core.DroidGuardPreferences
+import org.microg.gms.safetynet.SafetyNetPreferences
 
 class SafetyNetFragment : Fragment(R.layout.safety_net_fragment) {
 
@@ -34,22 +33,22 @@ class SafetyNetFragment : Fragment(R.layout.safety_net_fragment) {
     fun setEnabled(newStatus: Boolean) {
         val appContext = requireContext().applicationContext
         lifecycleScope.launchWhenResumed {
-            val info = getSafetyNetServiceInfo(appContext)
-            val newConfiguration = info.configuration.copy(enabled = newStatus)
-            displayServiceInfo(setSafetyNetServiceConfiguration(appContext, newConfiguration))
+            SafetyNetPreferences.setEnabled(appContext, newStatus)
+            DroidGuardPreferences.setEnabled(appContext, newStatus)
+            displayServiceInfo()
         }
     }
 
-    fun displayServiceInfo(serviceInfo: ServiceInfo) {
-        binding.safetynetEnabled = serviceInfo.configuration.enabled
+    fun displayServiceInfo() {
+        binding.safetynetEnabled = SafetyNetPreferences.isEnabled(requireContext()) && DroidGuardPreferences.isEnabled(requireContext())
     }
 
     override fun onResume() {
         super.onResume()
         val appContext = requireContext().applicationContext
         lifecycleScope.launchWhenResumed {
-            binding.checkinEnabled = getCheckinServiceInfo(appContext).configuration.enabled
-            displayServiceInfo(getSafetyNetServiceInfo(appContext))
+            binding.checkinEnabled = CheckinPrefs.isEnabled(appContext)
+            displayServiceInfo()
         }
     }
 
diff --git a/play-services-core/src/main/kotlin/org/microg/gms/ui/SafetyNetPreferencesFragment.kt b/play-services-core/src/main/kotlin/org/microg/gms/ui/SafetyNetPreferencesFragment.kt
index 2a4b4ab2..5dde0697 100644
--- a/play-services-core/src/main/kotlin/org/microg/gms/ui/SafetyNetPreferencesFragment.kt
+++ b/play-services-core/src/main/kotlin/org/microg/gms/ui/SafetyNetPreferencesFragment.kt
@@ -6,12 +6,117 @@
 package org.microg.gms.ui
 
 import android.os.Bundle
+import android.os.Handler
+import android.os.Looper
+import android.util.Base64
+import android.util.Log
+import androidx.lifecycle.lifecycleScope
+import androidx.preference.Preference
 import androidx.preference.PreferenceFragmentCompat
 import com.google.android.gms.R
+import com.google.android.gms.common.api.Status
+import com.google.android.gms.safetynet.AttestationData
+import com.google.android.gms.safetynet.RecaptchaResultData
+import com.google.android.gms.safetynet.internal.ISafetyNetCallbacks
+import org.json.JSONException
+import org.json.JSONObject
+import org.microg.gms.safetynet.SafetyNetClientService
+import org.microg.gms.safetynet.SafetyNetClientServiceImpl
+import kotlin.random.Random
 
 class SafetyNetPreferencesFragment : PreferenceFragmentCompat() {
+    private lateinit var runAttest: Preference
+    private lateinit var runReCaptcha: Preference
 
     override fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {
         addPreferencesFromResource(R.xml.preferences_safetynet)
     }
+
+    override fun onBindPreferences() {
+        runAttest = preferenceScreen.findPreference("pref_snet_run_attest") ?: runAttest
+        runReCaptcha = preferenceScreen.findPreference("pref_recaptcha_run_test") ?: runReCaptcha
+
+        // TODO: Use SafetyNet client library once ready
+        runAttest.setOnPreferenceClickListener {
+            val context = context ?: return@setOnPreferenceClickListener false
+            runAttest.setIcon(R.drawable.ic_circle_pending)
+            runAttest.setSummary(R.string.pref_test_summary_running)
+            val handler = Handler(Looper.myLooper()!!)
+            SafetyNetClientServiceImpl(context, context.packageName, lifecycle).attestWithApiKey(object : ISafetyNetCallbacks.Default() {
+                override fun onAttestationData(status: Status?, attestationData: AttestationData?) {
+                    handler.post {
+                        if (status?.isSuccess == true) {
+                            if (attestationData?.jwsResult == null) {
+                                runAttest.setIcon(R.drawable.ic_circle_warn)
+                                runAttest.summary = context.getString(R.string.pref_test_summary_failed, "No result")
+                            } else {
+                                val (_, payload, _) = try {
+                                    attestationData.jwsResult.split(".")
+                                } catch (e: Exception) {
+                                    runAttest.setIcon(R.drawable.ic_circle_error)
+                                    runAttest.summary = context.getString(R.string.pref_test_summary_failed, "Invalid JWS")
+                                    return@post
+                                }
+                                val (basicIntegrity, ctsProfileMatch, advice) = try {
+                                    JSONObject(Base64.decode(payload, Base64.URL_SAFE).decodeToString()).let {
+                                        Triple(it.optBoolean("basicIntegrity", false), it.optBoolean("ctsProfileMatch", false), it.optString("advice", ""))
+                                    }
+                                } catch (e: Exception) {
+                                    Log.w(TAG, e)
+                                    runAttest.setIcon(R.drawable.ic_circle_error)
+                                    runAttest.summary = context.getString(R.string.pref_test_summary_failed, "Invalid JSON")
+                                    return@post
+                                }
+                                val adviceText = if (advice == "") "" else "\n" + advice.split(",").map {
+                                    when (it) {
+                                        "LOCK_BOOTLOADER" -> "Bootloader is not locked"
+                                        "RESTORE_TO_FACTORY_ROM" -> "ROM is not clean"
+                                        else -> it
+                                    }
+                                }.joinToString("\n")
+                                when {
+                                    basicIntegrity && ctsProfileMatch -> {
+                                        runAttest.setIcon(R.drawable.ic_circle_check)
+                                        runAttest.setSummary(R.string.pref_test_summary_passed)
+                                    }
+                                    basicIntegrity -> {
+                                        runAttest.setIcon(R.drawable.ic_circle_warn)
+                                        runAttest.summary = context.getString(R.string.pref_test_summary_warn, "CTS profile does not match$adviceText")
+                                    }
+                                    else -> {
+                                        runAttest.setIcon(R.drawable.ic_circle_error)
+                                        runAttest.summary = context.getString(R.string.pref_test_summary_failed, "integrity check failed$adviceText")
+                                    }
+                                }
+                            }
+                        } else {
+                            runAttest.setIcon(R.drawable.ic_circle_error)
+                            runAttest.summary = context.getString(R.string.pref_test_summary_failed, status?.statusMessage)
+                        }
+                    }
+                }
+            }, Random.nextBytes(32), "AIzaSyCcJO6IZiA5Or_AXw3LFdaTCmpnfL4pJ-Q")
+            true
+        }
+        runReCaptcha.setOnPreferenceClickListener {
+            val context = context ?: return@setOnPreferenceClickListener false
+            runReCaptcha.setIcon(R.drawable.ic_circle_pending)
+            runReCaptcha.setSummary(R.string.pref_test_summary_running)
+            val handler = Handler(Looper.myLooper()!!)
+            SafetyNetClientServiceImpl(context, context.packageName, lifecycle).verifyWithRecaptcha(object : ISafetyNetCallbacks.Default() {
+                override fun onRecaptchaResult(status: Status?, recaptchaResultData: RecaptchaResultData?) {
+                    handler.post {
+                        if (status?.isSuccess == true) {
+                            runReCaptcha.setIcon(R.drawable.ic_circle_check)
+                            runReCaptcha.setSummary(R.string.pref_test_summary_passed)
+                        } else {
+                            runReCaptcha.setIcon(R.drawable.ic_circle_error)
+                            runReCaptcha.summary = context.getString(R.string.pref_test_summary_failed, status?.statusMessage)
+                        }
+                    }
+                }
+            }, "6Lc4TzgeAAAAAJnW7Jbo6UtQ0xGuTKjHAeyhINuq")
+            true
+        }
+    }
 }
diff --git a/play-services-core/src/main/kotlin/org/microg/gms/ui/SettingsFragment.kt b/play-services-core/src/main/kotlin/org/microg/gms/ui/SettingsFragment.kt
index b05bcb16..196cee33 100644
--- a/play-services-core/src/main/kotlin/org/microg/gms/ui/SettingsFragment.kt
+++ b/play-services-core/src/main/kotlin/org/microg/gms/ui/SettingsFragment.kt
@@ -11,10 +11,12 @@ import androidx.lifecycle.lifecycleScope
 import androidx.navigation.fragment.findNavController
 import androidx.preference.Preference
 import com.google.android.gms.R
-import org.microg.gms.checkin.getCheckinServiceInfo
+import org.microg.gms.checkin.CheckinPrefs
 import org.microg.gms.gcm.GcmDatabase
 import org.microg.gms.gcm.getGcmServiceInfo
-import org.microg.gms.safetynet.getSafetyNetServiceInfo
+import org.microg.gms.safetynet.SafetyNetPreferences
+import org.microg.nlp.client.GeocodeClient
+import org.microg.nlp.client.LocationClient
 import org.microg.nlp.client.UnifiedLocationClient
 import org.microg.tools.ui.ResourceSettingsFragment
 
@@ -51,9 +53,9 @@ class SettingsFragment : ResourceSettingsFragment() {
 
     override fun onResume() {
         super.onResume()
-        val appContext = requireContext().applicationContext
+        val context = requireContext()
         lifecycleScope.launchWhenResumed {
-            updateDetails(appContext)
+            updateDetails(context)
         }
     }
 
@@ -63,16 +65,20 @@ class SettingsFragment : ResourceSettingsFragment() {
             val database = GcmDatabase(context)
             val regCount = database.registrationList.size
             database.close()
-            findPreference<Preference>(PREF_GCM)!!.summary = getString(R.string.service_status_enabled_short) + " - " + resources.getQuantityString(R.plurals.gcm_registered_apps_counter, regCount, regCount)
+            findPreference<Preference>(PREF_GCM)!!.summary = context.getString(R.string.service_status_enabled_short) + " - " + context.resources.getQuantityString(R.plurals.gcm_registered_apps_counter, regCount, regCount)
         } else {
             findPreference<Preference>(PREF_GCM)!!.setSummary(R.string.service_status_disabled_short)
         }
 
-        findPreference<Preference>(PREF_CHECKIN)!!.setSummary(if (getCheckinServiceInfo(context).configuration.enabled) R.string.service_status_enabled_short else R.string.service_status_disabled_short)
-        findPreference<Preference>(PREF_SNET)!!.setSummary(if (getSafetyNetServiceInfo(context).configuration.enabled) R.string.service_status_enabled_short else R.string.service_status_disabled_short)
+        findPreference<Preference>(PREF_CHECKIN)!!.setSummary(if (CheckinPrefs.isEnabled(context)) R.string.service_status_enabled_short else R.string.service_status_disabled_short)
+        findPreference<Preference>(PREF_SNET)!!.setSummary(if (SafetyNetPreferences.isEnabled(context)) R.string.service_status_enabled_short else R.string.service_status_disabled_short)
 
-        val backendCount = UnifiedLocationClient[context].getLocationBackends().size + UnifiedLocationClient[context].getGeocoderBackends().size
-        findPreference<Preference>(PREF_UNIFIEDNLP)!!.summary = resources.getQuantityString(R.plurals.pref_unifiednlp_summary, backendCount, backendCount)
+        val backendCount = try {
+            LocationClient(context, lifecycle).getLocationBackends().size + GeocodeClient(context, lifecycle).getGeocodeBackends().size
+        } catch (e: Exception) {
+            0
+        }
+        findPreference<Preference>(PREF_UNIFIEDNLP)!!.summary = context.resources.getQuantityString(R.plurals.pref_unifiednlp_summary, backendCount, backendCount)
 
         findPreference<Preference>(PREF_EXPOSURE)?.isVisible = NearbyPreferencesIntegration.isAvailable
         findPreference<Preference>(PREF_EXPOSURE)?.icon = NearbyPreferencesIntegration.getIcon(context)
diff --git a/play-services-core/src/main/res/drawable/ic_recaptcha.xml b/play-services-core/src/main/res/drawable/ic_recaptcha.xml
deleted file mode 100644
index bf4c1d41..00000000
--- a/play-services-core/src/main/res/drawable/ic_recaptcha.xml
+++ /dev/null
@@ -1,64 +0,0 @@
-<!--
-  ~ SPDX-FileCopyrightText: 2021, microG Project Team
-  ~ SPDX-License-Identifier: Apache-2.0
-  -->
-
-<vector xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:aapt="http://schemas.android.com/aapt"
-    android:width="48dp"
-    android:height="48dp"
-    android:viewportWidth="48"
-    android:viewportHeight="48">
-  <path
-      android:pathData="M2,24L2,40.5L5.9387,36.5616a22,22 45,0 0,9.6423 7.7639,22 22,0 0,0 23.9753,-4.7692L31.071,31.071A10,10 0,0 1,24 34,10 10,135 0,1 14.7361,27.7642L18.5,24L14,24Z"
-      android:strokeWidth="0"
-      android:fillColor="#bdbdbd"
-      android:strokeColor="#000000"/>
-  <path
-      android:pathData="M7.5,2 L11.4386,5.9387A22,22 0,0 0,2 24L14,24A10,10 135,0 1,20.236 14.7361L24,18.5L24,14 24,2l-0.0682,0z"
-      android:strokeWidth="0"
-      android:strokeColor="#000000">
-    <aapt:attr name="android:fillColor">
-      <gradient 
-          android:startY="24"
-          android:startX="14"
-          android:endY="20.75"
-          android:endX="14.000"
-          android:type="linear">
-        <item android:offset="0" android:color="#FF1E88E5"/>
-        <item android:offset="1" android:color="#FF2196F3"/>
-      </gradient>
-    </aapt:attr>
-  </path>
-  <path
-      android:pathData="M46,7.5 L42.0615,11.4386A22,22 0,0 0,24 2V14a10,10 0,0 1,9.264 6.2358l-3.7641,3.7641h4.5,12v-0.0682z"
-      android:strokeWidth="0"
-      android:strokeColor="#000000">
-    <aapt:attr name="android:fillColor">
-      <gradient 
-          android:startY="14"
-          android:startX="24"
-          android:endY="14"
-          android:endX="27.25"
-          android:type="linear">
-        <item android:offset="0" android:color="#FF3949AB"/>
-        <item android:offset="1" android:color="#FF3F51B5"/>
-      </gradient>
-    </aapt:attr>
-  </path>
-  <path
-      android:pathData="M46,7.5 L42.0615,11.4386C37.9491,5.5255 31.2026,2 24,2L46,24v-0.0682z"
-      android:strokeWidth="0">
-    <aapt:attr name="android:fillColor">
-      <gradient 
-          android:startY="2"
-          android:startX="24"
-          android:endY="24"
-          android:endX="46"
-          android:type="linear">
-        <item android:offset="0" android:color="#18FFFFFF"/>
-        <item android:offset="1" android:color="#00FFFFFF"/>
-      </gradient>
-    </aapt:attr>
-  </path>
-</vector>
diff --git a/play-services-core/src/main/res/layout/recaptcha_window.xml b/play-services-core/src/main/res/layout/recaptcha_window.xml
deleted file mode 100644
index 04aca14d..00000000
--- a/play-services-core/src/main/res/layout/recaptcha_window.xml
+++ /dev/null
@@ -1,68 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-  ~ SPDX-FileCopyrightText: 2021, microG Project Team
-  ~ SPDX-License-Identifier: Apache-2.0
-  -->
-
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    android:orientation="vertical">
-
-    <LinearLayout
-        android:id="@+id/recaptcha_loading"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:background="@android:color/white"
-        android:layout_gravity="center"
-        android:gravity="center"
-        android:orientation="vertical">
-
-        <LinearLayout
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center"
-            android:layout_marginLeft="20dip"
-            android:layout_marginTop="20dip"
-            android:layout_marginRight="20dip"
-            android:layout_marginBottom="10sp"
-            android:gravity="center"
-            android:orientation="horizontal">
-
-            <ImageView
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:src="@drawable/ic_recaptcha" />
-
-            <TextView
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_gravity="center"
-                android:layout_marginStart="10sp"
-                android:layout_marginLeft="10sp"
-                android:text="reCAPTCHA"
-                android:textColor="#FF3949AB"
-                android:textStyle="bold" />
-        </LinearLayout>
-
-        <ProgressBar
-            style="?android:progressBarStyleHorizontal"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center_horizontal"
-            android:layout_marginLeft="20dip"
-            android:layout_marginTop="10sp"
-            android:layout_marginRight="20dip"
-            android:layout_marginBottom="20dip"
-            android:indeterminate="true"
-            android:indeterminateTint="#FF3949AB" />
-
-    </LinearLayout>
-
-    <WebView
-        android:id="@+id/recaptcha_webview"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:layout_gravity="center_vertical"
-        android:visibility="gone" />
-</FrameLayout>
diff --git a/play-services-core/src/main/res/mipmap-hdpi/ic_core_service_app.png b/play-services-core/src/main/res/mipmap-hdpi/ic_core_service_app.png
index 47a7303a..0abf3e7b 100644
Binary files a/play-services-core/src/main/res/mipmap-hdpi/ic_core_service_app.png and b/play-services-core/src/main/res/mipmap-hdpi/ic_core_service_app.png differ
diff --git a/play-services-core/src/main/res/mipmap-hdpi/ic_microg_foreground.png b/play-services-core/src/main/res/mipmap-hdpi/ic_microg_foreground.png
index 9087dc6f..a986bbea 100644
Binary files a/play-services-core/src/main/res/mipmap-hdpi/ic_microg_foreground.png and b/play-services-core/src/main/res/mipmap-hdpi/ic_microg_foreground.png differ
diff --git a/play-services-core/src/main/res/mipmap-hdpi/ic_microg_settings.png b/play-services-core/src/main/res/mipmap-hdpi/ic_microg_settings.png
index 4b32cbbf..e6ae83b2 100644
Binary files a/play-services-core/src/main/res/mipmap-hdpi/ic_microg_settings.png and b/play-services-core/src/main/res/mipmap-hdpi/ic_microg_settings.png differ
diff --git a/play-services-core/src/main/res/mipmap-mdpi/ic_core_service_app.png b/play-services-core/src/main/res/mipmap-mdpi/ic_core_service_app.png
index 7f969660..b0674b24 100644
Binary files a/play-services-core/src/main/res/mipmap-mdpi/ic_core_service_app.png and b/play-services-core/src/main/res/mipmap-mdpi/ic_core_service_app.png differ
diff --git a/play-services-core/src/main/res/mipmap-mdpi/ic_microg_foreground.png b/play-services-core/src/main/res/mipmap-mdpi/ic_microg_foreground.png
index 808b2724..d5a3b1b4 100644
Binary files a/play-services-core/src/main/res/mipmap-mdpi/ic_microg_foreground.png and b/play-services-core/src/main/res/mipmap-mdpi/ic_microg_foreground.png differ
diff --git a/play-services-core/src/main/res/mipmap-mdpi/ic_microg_settings.png b/play-services-core/src/main/res/mipmap-mdpi/ic_microg_settings.png
index 8de88366..4a6964f6 100644
Binary files a/play-services-core/src/main/res/mipmap-mdpi/ic_microg_settings.png and b/play-services-core/src/main/res/mipmap-mdpi/ic_microg_settings.png differ
diff --git a/play-services-core/src/main/res/mipmap-xhdpi/ic_core_service_app.png b/play-services-core/src/main/res/mipmap-xhdpi/ic_core_service_app.png
index dc1da208..bd51b3cc 100644
Binary files a/play-services-core/src/main/res/mipmap-xhdpi/ic_core_service_app.png and b/play-services-core/src/main/res/mipmap-xhdpi/ic_core_service_app.png differ
diff --git a/play-services-core/src/main/res/mipmap-xhdpi/ic_microg_foreground.png b/play-services-core/src/main/res/mipmap-xhdpi/ic_microg_foreground.png
index d4d566bf..8247a99e 100644
Binary files a/play-services-core/src/main/res/mipmap-xhdpi/ic_microg_foreground.png and b/play-services-core/src/main/res/mipmap-xhdpi/ic_microg_foreground.png differ
diff --git a/play-services-core/src/main/res/mipmap-xhdpi/ic_microg_settings.png b/play-services-core/src/main/res/mipmap-xhdpi/ic_microg_settings.png
index d7c4f0de..e2e6235d 100644
Binary files a/play-services-core/src/main/res/mipmap-xhdpi/ic_microg_settings.png and b/play-services-core/src/main/res/mipmap-xhdpi/ic_microg_settings.png differ
diff --git a/play-services-core/src/main/res/mipmap-xxhdpi/ic_core_service_app.png b/play-services-core/src/main/res/mipmap-xxhdpi/ic_core_service_app.png
index 0aaee7bb..89632f50 100644
Binary files a/play-services-core/src/main/res/mipmap-xxhdpi/ic_core_service_app.png and b/play-services-core/src/main/res/mipmap-xxhdpi/ic_core_service_app.png differ
diff --git a/play-services-core/src/main/res/mipmap-xxhdpi/ic_microg_foreground.png b/play-services-core/src/main/res/mipmap-xxhdpi/ic_microg_foreground.png
index e6271986..14864b73 100644
Binary files a/play-services-core/src/main/res/mipmap-xxhdpi/ic_microg_foreground.png and b/play-services-core/src/main/res/mipmap-xxhdpi/ic_microg_foreground.png differ
diff --git a/play-services-core/src/main/res/mipmap-xxhdpi/ic_microg_settings.png b/play-services-core/src/main/res/mipmap-xxhdpi/ic_microg_settings.png
index 9e51363b..6525e32f 100644
Binary files a/play-services-core/src/main/res/mipmap-xxhdpi/ic_microg_settings.png and b/play-services-core/src/main/res/mipmap-xxhdpi/ic_microg_settings.png differ
diff --git a/play-services-core/src/main/res/mipmap-xxxhdpi/ic_core_service_app.png b/play-services-core/src/main/res/mipmap-xxxhdpi/ic_core_service_app.png
index 9bb63517..8536c775 100644
Binary files a/play-services-core/src/main/res/mipmap-xxxhdpi/ic_core_service_app.png and b/play-services-core/src/main/res/mipmap-xxxhdpi/ic_core_service_app.png differ
diff --git a/play-services-core/src/main/res/mipmap-xxxhdpi/ic_microg_foreground.png b/play-services-core/src/main/res/mipmap-xxxhdpi/ic_microg_foreground.png
index fccadcef..9c25f564 100644
Binary files a/play-services-core/src/main/res/mipmap-xxxhdpi/ic_microg_foreground.png and b/play-services-core/src/main/res/mipmap-xxxhdpi/ic_microg_foreground.png differ
diff --git a/play-services-core/src/main/res/mipmap-xxxhdpi/ic_microg_settings.png b/play-services-core/src/main/res/mipmap-xxxhdpi/ic_microg_settings.png
index 5fb88ab3..0d30307a 100644
Binary files a/play-services-core/src/main/res/mipmap-xxxhdpi/ic_microg_settings.png and b/play-services-core/src/main/res/mipmap-xxxhdpi/ic_microg_settings.png differ
diff --git a/play-services-core/src/main/res/values-be/strings.xml b/play-services-core/src/main/res/values-be/strings.xml
index 8cd7f17c..fa3f09f4 100644
--- a/play-services-core/src/main/res/values-be/strings.xml
+++ b/play-services-core/src/main/res/values-be/strings.xml
@@ -114,7 +114,6 @@
     <string name="prefcat_configuration">Канфігурацыя</string>
     <string name="prefcat_google_services">Google сэрвісы</string>
     <string name="prefcat_location_service">Служба вызначэння месцазнаходжання</string>
-    <string name="prefcat_operation_mode">Рэжым работы</string>
     <string name="prefcat_services">Сэрвісы</string>
     <string name="prefcat_test">Тэст</string>
 
@@ -181,21 +180,10 @@
     <string name="prefcat_push_apps_unregistered_title">Незарэгістраваныя прыкладанні</string>
     <string name="prefcat_push_networks_title">Сеткі для прыёму push-паведамленняў</string>
 
-    <string name="snet_intro">Google SafetyNet гэта сістэма сертыфікацыі прылады, якая гарантуе, што прылада карэктна абаронена і сумяшчальна з Android CTS. Пэўныя праграмы выкарыстоўваюць SafetyNet з меркаванняў бяспекі або ў якасці папярэдняй сістэмы абароны ад узлому.\n\nmicroG GmsCore змяшчае свабодную рэалізацыю SafetyNet, але афіцыйны сервер патрабуе, каб запыты былі падпісаны з дапамогай прапрыетарнай сістэмы DroidGuard. Ізаляваная версія DroidGuard даступная як асобнае прыкладанне "DroidGuard Helper".</string>
+    <string name="snet_intro">Google SafetyNet гэта сістэма сертыфікацыі прылады, якая гарантуе, што прылада карэктна абаронена і сумяшчальна з Android CTS. Пэўныя праграмы выкарыстоўваюць SafetyNet з меркаванняў бяспекі або ў якасці папярэдняй сістэмы абароны ад узлому.\n\nmicroG GmsCore змяшчае свабодную рэалізацыю SafetyNet, але афіцыйны сервер патрабуе, каб запыты былі падпісаны з дапамогай прапрыетарнай сістэмы DroidGuard.</string>
     <string name="snet_enable_switch">Дазволіць праверку статусу прылады</string>
 
-    <string name="pref_snet_testdrive_title">Тэст верыфікацыі SafetyNet</string>
-
-    <string name="pref_snet_status_official_title">Выкарыстоўваць афіцыйны сервер</string>
-    <string name="pref_snet_status_official_summary">Патрабуецца сістэма без root і ўсталяваны microG DroidGuard Helper</string>
-    <string name="pref_snet_status_official_info">афіцыйны сервер</string>
-    <string name="pref_snet_status_third_party_title">Выкарыстоўваць іншы сервер</string>
-    <string name="pref_snet_status_third_party_summary">Іншыя серверы могуць быць у стане адказаць на запыты SafetyNet без подпісу DroidGuard</string>
-    <string name="pref_snet_status_third_party_info">іншы сервер</string>
-    <string name="pref_snet_custom_url_title">URL іншага сервера</string>
-    <string name="pref_snet_custom_url_summary">Поўны URL іншага сервера, які адказвае на праверачныя запыты SafetyNet</string>
-    <string name="pref_snet_self_signed_title">Выкарыстоўваць самастойна падпісаны сертыфікат</string>
-    <string name="pref_snet_self_signed_summary">Замест запытаў на сервер падпісваць SafetyNet лакальна, выкарыстоўваючы самастойна створаны сертыфікат. Большасць прыкладанняў будуць адмаўляцца выкарыстоўваць самастойна падпісаныя адказы.</string>
-    <string name="pref_snet_status_self_signed_info">самастойна падпісаны сертыфікат</string>
+    <string name="pref_safetynet_test_title">Тэст верыфікацыі SafetyNet</string>
+    <string name="pref_droidguard_operation_mode">Рэжым работы</string>
 
 </resources>
diff --git a/play-services-core/src/main/res/values-de/strings.xml b/play-services-core/src/main/res/values-de/strings.xml
index 08e3579f..028a0acb 100644
--- a/play-services-core/src/main/res/values-de/strings.xml
+++ b/play-services-core/src/main/res/values-de/strings.xml
@@ -114,7 +114,6 @@ Dies kann einige Minuten dauern."</string>
     <string name="prefcat_configuration">Einstellungen</string>
     <string name="prefcat_google_services">Google-Dienste</string>
     <string name="prefcat_location_service">Standortdienst</string>
-    <string name="prefcat_operation_mode">Modus</string>
     <string name="prefcat_services">Dienste</string>
     <string name="prefcat_test">Test</string>
 
@@ -180,21 +179,10 @@ Dies kann einige Minuten dauern."</string>
     <string name="prefcat_push_apps_unregistered_title">Nicht-registrierte Apps</string>
     <string name="prefcat_push_networks_title">Verwendbare Netzwerke</string>
 
-    <string name="snet_intro">Google SafetyNet ist ein System, um Geräte zu zertifizieren und so sicherzustellen, dass sie ausreichend geschützt und kompatibel mit Android sind. Einige Anwendungen benutzen SafetyNet aus Sicherheitsgründen oder um einen Kopierschutz zu erzwingen.\n\nmicroG GmsCore enthält eine freie Implementierung von SafetyNet, jedoch verlangen die Google-Server, dass die Anfragen durch das proprietäre DroidGuard signiert sind. Eine unschädliche gemachte Version von DroidGuard ist als separate \"DroidGuard Helper\"-App verfügbar.</string>
+    <string name="snet_intro">Google SafetyNet ist ein System, um Geräte zu zertifizieren und so sicherzustellen, dass sie ausreichend geschützt und kompatibel mit Android sind. Einige Anwendungen benutzen SafetyNet aus Sicherheitsgründen oder um einen Kopierschutz zu erzwingen.\n\nmicroG GmsCore enthält eine freie Implementierung von SafetyNet, jedoch verlangen die Google-Server, dass die Anfragen durch das proprietäre DroidGuard signiert sind.</string>
     <string name="snet_enable_switch">Geräte-Zertifizierung erlauben</string>
 
-    <string name="pref_snet_testdrive_title">SafetyNet-Zertifizierung testen</string>
-
-    <string name="pref_snet_status_official_title">Offizielle Server nutzen</string>
-    <string name="pref_snet_status_official_summary">Erfordert eine ungerootetes ROM und den microG DroidGuard Helper</string>
-    <string name="pref_snet_status_official_info">offizieller Server</string>
-    <string name="pref_snet_status_third_party_title">Alternativen Server nutzen</string>
-    <string name="pref_snet_status_third_party_summary">Alternative Server können auch SafetyNet-Anfragen beantworten, die nicht durch DroidGuard signiert wurden</string>
-    <string name="pref_snet_status_third_party_info">Dritt-Server</string>
-    <string name="pref_snet_custom_url_title">Alternative Server URL</string>
-    <string name="pref_snet_custom_url_summary">Vollständige URL des alternativen Servers, der SafetyNet-Anfragen beantwortet</string>
-    <string name="pref_snet_self_signed_title">Selbst signieren</string>
-    <string name="pref_snet_self_signed_summary">Statt einen Server zu nutzen, die SafetyNet Signatur lokal mit einem eigens erstellten Zertifikat signieren. Die meisten Apps werden diese Signaturen nicht akzeptieren.</string>
-    <string name="pref_snet_status_self_signed_info">Selbst-signiertes Zertifikat</string>
+    <string name="pref_safetynet_test_title">SafetyNet-Zertifizierung testen</string>
+    <string name="pref_droidguard_operation_mode">Modus</string>
 
 </resources>
diff --git a/play-services-core/src/main/res/values-es/strings.xml b/play-services-core/src/main/res/values-es/strings.xml
index 28e9a118..f3ebc241 100644
--- a/play-services-core/src/main/res/values-es/strings.xml
+++ b/play-services-core/src/main/res/values-es/strings.xml
@@ -112,7 +112,6 @@ Esto podría tardar algunos minutos."</string>
     <string name="prefcat_configuration">Configuración</string>
     <string name="prefcat_google_services">Servicios de Google</string>
     <string name="prefcat_location_service">Servicio de localización</string>
-    <string name="prefcat_operation_mode">Modo de operación</string>
     <string name="prefcat_services">Servicios</string>
     <string name="prefcat_test">Prueba</string>
 
@@ -179,21 +178,10 @@ Esto podría tardar algunos minutos."</string>
     <string name="prefcat_push_apps_unregistered_title">Aplicaciones no registradas</string>
     <string name="prefcat_push_networks_title">Redes a utilizar para las notificaciones push</string>
 
-    <string name="snet_intro">Google SafetyNet es un sistema de certificación de dispositivos, que garantiza que el dispositivo está correctamente asegurado y es compatible con Android CTS. Algunas aplicaciones utilizan SafetyNet por razones de seguridad o como un prerrequisito para la protección contra manipulaciones.\n\nmicroG GmsCore contiene una implementación gratuita de SafetyNet, pero el servidor oficial requiere que las solicitudes de SafetyNet sean firmadas utilizando el sistema propietario DroidGuard. Una versión en sandbox de DroidGuard está disponible como una aplicación separada "DroidGuard Helper".</string>
+    <string name="snet_intro">Google SafetyNet es un sistema de certificación de dispositivos, que garantiza que el dispositivo está correctamente asegurado y es compatible con Android CTS. Algunas aplicaciones utilizan SafetyNet por razones de seguridad o como un prerrequisito para la protección contra manipulaciones.\n\nmicroG GmsCore contiene una implementación gratuita de SafetyNet, pero el servidor oficial requiere que las solicitudes de SafetyNet sean firmadas utilizando el sistema propietario DroidGuard.</string>
     <string name="snet_enable_switch">Permitir la certificación del dispositivo</string>
 
-    <string name="pref_snet_testdrive_title">Probar el certificado de SafetyNet</string>
-
-    <string name="pref_snet_status_official_title">Usar el servidor oficial</string>
-    <string name="pref_snet_status_official_summary">Requiere un sistema no root y un microG DroidGuard Helper instalado</string>
-    <string name="pref_snet_status_official_info">servidor oficial</string>
-    <string name="pref_snet_status_third_party_title">Usar un servidor de terceros</string>
-    <string name="pref_snet_status_third_party_summary">Los servidores de terceros podrían responder a las solicitudes de SafetyNet sin la firma de DroidGuard</string>
-    <string name="pref_snet_status_third_party_info">servidor de terceros</string>
-    <string name="pref_snet_custom_url_title">URL del servidor personalizada</string>
-    <string name="pref_snet_custom_url_summary">URL completa del servidor de terceros que responde a las solicitudes de certificación de SafetyNet</string>
-    <string name="pref_snet_self_signed_title">Usar un certificado autofirmado</string>
-    <string name="pref_snet_self_signed_summary">En lugar de solicitar un servidor, firma las respuestas de SafetyNet localmente usando un certificado autofirmado. La mayoría de las aplicaciones se negarán a usar respuestas autofirmadas.</string>
-    <string name="pref_snet_status_self_signed_info">certificado autofirmado</string>
+    <string name="pref_safetynet_test_title">Probar el certificado de SafetyNet</string>
+    <string name="pref_droidguard_operation_mode">Modo de operación</string>
 
 </resources>
diff --git a/play-services-core/src/main/res/values-fr/strings.xml b/play-services-core/src/main/res/values-fr/strings.xml
index 02d823dd..e0b44f25 100644
--- a/play-services-core/src/main/res/values-fr/strings.xml
+++ b/play-services-core/src/main/res/values-fr/strings.xml
@@ -102,7 +102,6 @@ Ceci peut prendre plusieurs minutes."</string>
     <string name="prefcat_configuration">Configuration</string>
     <string name="prefcat_google_services">Services Google</string>
     <string name="prefcat_location_service">Service de localisation</string>
-    <string name="prefcat_operation_mode">Mode d’opération</string>
     <string name="prefcat_services">Services</string>
     <string name="prefcat_test">Test</string>
 
@@ -149,18 +148,8 @@ Ceci peut prendre plusieurs minutes."</string>
     <string name="gcm_network_state_disconnected">Déconnecté</string>
     <string name="gcm_network_state_connected">Connecté depuis <xliff:g example="2 hours ago">%1$s</xliff:g></string>
 
-    <string name="snet_intro">Google SafetyNet est un système de certification du terminal, assurant que celui-ci est correctement sécurisé et compatible avec Android CTS. Certaines applications utilisent SafetyNet pour des raisons de sécurité ou comme prérequis anti-altérations.\n\nmicroG GmsCore contient une implantation libre de SafetyNet, mais les serveurs officiels requièrent que les requêtes SafetyNet soient signées par le système propriétaire DroidGuard. Une version mise en « bac-à-sable » de DroidGuard est disponible dans une application séparée « DroidGuard Helper ».
-</string>
-
-    <string name="pref_snet_testdrive_title">Tester la certification SafetyNet</string>
-
-    <string name="pref_snet_status_official_title">Utiliser les serveurs officiels</string>
-    <string name="pref_snet_status_official_summary">Nécessite un système non-rooté et microG DroidGuard Helper installé</string>
-    <string name="pref_snet_status_third_party_title">Utiliser un serveur tiers</string>
-    <string name="pref_snet_status_third_party_summary">Les serveurs tiers peuvent être capable de répondre aux requêtes SafetyNet sans signature de DroidGuard.</string>
-    <string name="pref_snet_custom_url_title">URL serveur tiers</string>
-    <string name="pref_snet_custom_url_summary">URL complète du serveur tiers répondant aux requêtes de certification SafetyNet</string>
-    <string name="pref_snet_self_signed_title">Utiliser un certificat auto-signé</string>
-    <string name="pref_snet_self_signed_summary">Au lieu de requérir un serveur, signer les réponses SafetyNet localement en utilisant un certificat auto-signé. La plupart des applications refuseront d’utiliser des réponses auto-signées.</string>
+    <string name="snet_intro">Google SafetyNet est un système de certification du terminal, assurant que celui-ci est correctement sécurisé et compatible avec Android CTS. Certaines applications utilisent SafetyNet pour des raisons de sécurité ou comme prérequis anti-altérations.\n\nmicroG GmsCore contient une implantation libre de SafetyNet, mais les serveurs officiels requièrent que les requêtes SafetyNet soient signées par le système propriétaire DroidGuard.</string>
 
+    <string name="pref_safetynet_test_title">Tester la certification SafetyNet</string>
+    <string name="pref_droidguard_operation_mode">Mode d’opération</string>
 </resources>
diff --git a/play-services-core/src/main/res/values-it/strings.xml b/play-services-core/src/main/res/values-it/strings.xml
index 30ed69ad..dc17c400 100644
--- a/play-services-core/src/main/res/values-it/strings.xml
+++ b/play-services-core/src/main/res/values-it/strings.xml
@@ -106,7 +106,6 @@ Questa operazione può richiedere alcuni secondi."</string>
     <string name="prefcat_configuration">Configurazione</string>
     <string name="prefcat_google_services">Servizi Google</string>
     <string name="prefcat_location_service">Servizi di localizzazione</string>
-    <string name="prefcat_operation_mode">Modalità operativa</string>
     <string name="prefcat_services">Servizi</string>
     <string name="prefcat_test">Sperimentale</string>
 
@@ -174,21 +173,10 @@ Questa operazione può richiedere alcuni secondi."</string>
     <string name="prefcat_push_apps_unregistered_title">Applicazioni non registrate</string>
     <string name="prefcat_push_networks_title">Reti da utilizzare per le notifiche push</string>
 
-    <string name="snet_intro">SafetyNet di Google è un sistema di certificazione del dispositivo che ne garantisce la sicurezza e la compatibilità con Android CTS. Alcune applicazioni utilizzano SafetyNet per ragioni di sicurezza o come prerequisito per la protezione da manomissione.\n\nUn\'implementazione libera di SafetyNet è contenuta in microG, tuttavia i server ufficiali richiedono che le richieste SafetyNet siano firmate utilizzando il sistema proprietario DroidGuard. Una versione isolata di DroidGuard è disponibile all\'interno dell\'applicazione “microG DroidGuard Helper”.</string>
+    <string name="snet_intro">SafetyNet di Google è un sistema di certificazione del dispositivo che ne garantisce la sicurezza e la compatibilità con Android CTS. Alcune applicazioni utilizzano SafetyNet per ragioni di sicurezza o come prerequisito per la protezione da manomissione.\n\nUn\'implementazione libera di SafetyNet è contenuta in microG, tuttavia i server ufficiali richiedono che le richieste SafetyNet siano firmate utilizzando il sistema proprietario DroidGuard.</string>
     <string name="snet_enable_switch">Permetti l\'attestazione del dispositivo</string>
 
-    <string name="pref_snet_testdrive_title">Prova l\'attestazione di SafetyNet</string>
-
-    <string name="pref_snet_status_official_title">Utilizza i server ufficiali</string>
-    <string name="pref_snet_status_official_summary">Richiede un sistema senza privilegi di root e con l\'applicazione "microG DroidGuard Helper" installata</string>
-    <string name="pref_snet_status_official_info">Server ufficiale</string>
-    <string name="pref_snet_status_third_party_title">Utilizza un server di terze parti</string>
-    <string name="pref_snet_status_third_party_summary">I server di terze parti potrebbero essere in grado di rispondere alle richieste di SafetyNet senza la firma di DroidGuard</string>
-    <string name="pref_snet_status_third_party_info">Server di terze parti</string>
-    <string name="pref_snet_custom_url_title">URL del server personalizzato</string>
-    <string name="pref_snet_custom_url_summary">URL completo del server personalizzato che risponde alle richieste di attestazione SafetyNet</string>
-    <string name="pref_snet_self_signed_title">Utilizza un certificato auto-firmato</string>
-    <string name="pref_snet_self_signed_summary">Anziché inoltrare le richieste a un server, firma localmente le risposte SafetyNet utilizzando un certificato auto-firmato. La maggior parte delle applicazioni rifiuteranno l\'uso di risposte auto-firmate.</string>
-    <string name="pref_snet_status_self_signed_info">Certificato auto-firmato</string>
+    <string name="pref_safetynet_test_title">Prova l\'attestazione di SafetyNet</string>
+    <string name="pref_droidguard_operation_mode">Modalità operativa</string>
 
 </resources>
diff --git a/play-services-core/src/main/res/values-ja/strings.xml b/play-services-core/src/main/res/values-ja/strings.xml
index 2cc5b3f2..d37a1429 100644
--- a/play-services-core/src/main/res/values-ja/strings.xml
+++ b/play-services-core/src/main/res/values-ja/strings.xml
@@ -109,7 +109,6 @@
     <string name="prefcat_configuration">設定</string>
     <string name="prefcat_google_services">Googleサービス</string>
     <string name="prefcat_location_service">位置情報サービス</string>
-    <string name="prefcat_operation_mode">動作モード</string>
     <string name="prefcat_services">サービス</string>
     <string name="prefcat_test">テスト</string>
 
@@ -171,20 +170,9 @@
 
     <string name="snet_intro">Google SafetyNetはデバイス認証システムであり、デバイスが適切に保護され、Android CTSと互換性があることを保証します。 一部のアプリケーションは、セキュリティ上の理由または改ざん防止の前提条件としてSafetyNetを使用します。
     
-    microG GmsCoreにはSafetyNetのオープンソースな実装が含まれていますが、公式サーバーでは、プロプライエタリなDroidGuardシステムを使用してSafetyNetリクエストに署名する必要があります。 DroidGuardのサンドボックスバージョンは、個別の「DroidGuardHelper」アプリとして利用できます。</string>
+    microG GmsCoreにはSafetyNetのオープンソースな実装が含まれていますが、公式サーバーでは、プロプライエタリなDroidGuardシステムを使用してSafetyNetリクエストに署名する必要があります。</string>
     <string name="snet_enable_switch">デバイスの認証を許可</string>
 
-    <string name="pref_snet_testdrive_title">SafetyNetテストの実行</string>
-
-    <string name="pref_snet_status_official_title">公式サーバーを使用</string>
-    <string name="pref_snet_status_official_summary">root化されていないシステムと、microG DroidGuardHelperのインストールが必要です。</string>
-    <string name="pref_snet_status_official_info">公式サーバー</string>
-    <string name="pref_snet_status_third_party_title">サードパーティのサーバーを使用</string>
-    <string name="pref_snet_status_third_party_summary">サードパーティのサーバーは、DroidGuardの署名がないSafetyNetリクエストに応答できる場合があります</string>
-    <string name="pref_snet_status_third_party_info">third-party server</string>
-    <string name="pref_snet_custom_url_title">カスタムサーバーのURL</string>
-    <string name="pref_snet_custom_url_summary">SafetyNet認証リクエストに応答するサードパーティサーバーの完全なURL</string>
-    <string name="pref_snet_self_signed_title">自己署名証明書を使用</string>
-    <string name="pref_snet_self_signed_summary">サーバーにリクエストする代わりに、自己署名証明書を使用してローカルでSafetyNet応答に署名します。 ほとんどのアプリは、自己署名証明書を使用した応答の使用を拒否します。</string>
-    <string name="pref_snet_status_self_signed_info">自己署名証明書</string>
+    <string name="pref_safetynet_test_title">SafetyNetテストの実行</string>
+    <string name="pref_droidguard_operation_mode">動作モード</string>
 </resources>
diff --git a/play-services-core/src/main/res/values-pl/strings.xml b/play-services-core/src/main/res/values-pl/strings.xml
index 16b8a046..bc2206b2 100644
--- a/play-services-core/src/main/res/values-pl/strings.xml
+++ b/play-services-core/src/main/res/values-pl/strings.xml
@@ -102,7 +102,6 @@ To zajmie kilka minut.</string>
     <string name="prefcat_configuration">Konfiguracja</string>
     <string name="prefcat_google_services">Usługi Google</string>
     <string name="prefcat_location_service">Usługa lokalizacji</string>
-    <string name="prefcat_operation_mode">Tryb działania</string>
     <string name="prefcat_services">Usługi w tle</string>
     <string name="prefcat_test">Test</string>
 
@@ -147,17 +146,8 @@ To zajmie kilka minut.</string>
     <string name="gcm_unregister_after_deny_message">Odmówiłeś już zarejestrowanej aplikacji zarejestrować się w usłudze powiadomień ‘push’.\nCzy chcesz ją wyrejestrować, aby nie otrzymywała powiadomień ‘push’ w przyszłości?</string>
     <string name="gcm_messages_counter">Wiadomości: <xliff:g example="123">%1$d</xliff:g> (<xliff:g example="12345">%2$d</xliff:g> bajtów)</string>
 
-    <string name="snet_intro">Google SafetyNet jest systemem certyfikacji urządzenia, który upewnia się czy urządzenie jest poprawnie zabezpieczone i kompatybilne z Android CTS. Niektóre aplikacje używają SafetyNet ze względów bezpieczeństwa lub jako przeciwśrodek do modyfikacji.\n\nUsługa microG GmsCore zawiera wolną implementację SafetyNet, ale oficjalny serwer wymaga by SafetyNet był podpisany przez własnościowy system DroidGuard. Specjalna wersja DroidGuard-a jest dostępna do pobrania jako oddzielna aplikacja “DroidGuard Helper” w repozytorium miroG w F-Droid.</string>
-
-    <string name="pref_snet_testdrive_title">Wypróbuj działanie SafetyNet</string>
-
-    <string name="pref_snet_status_official_title">Użyj oficjalnego serwera</string>
-    <string name="pref_snet_status_official_summary">Wymaga niezrootowanego ROM-u i zainstalowanego microG DroidGuard Helper</string>
-    <string name="pref_snet_status_third_party_title">Użyj serwera strony trzeciej</string>
-    <string name="pref_snet_status_third_party_summary">Serwery stron trzecich mogą być w stanie odpowiedzieć na zapytania SafetyNet bez sygnatury DroidGuard</string>
-    <string name="pref_snet_custom_url_title">URL własnego serwera</string>
-    <string name="pref_snet_custom_url_summary">Pełny adres URL serwera strony trzeciej odpowiadającego na zapytania SafetyNet</string>
-    <string name="pref_snet_self_signed_title">Użyj samo-podpisanego certyfikatu</string>
-    <string name="pref_snet_self_signed_summary">Zamiast sprawdzać serwer, podpisuj odpowiedzi SafetyNet lokalnie używając samo-podpisanego certyfikatu. Większość aplikacji odmówi użycia samo-podpisanych odpowiedzi.</string>
+    <string name="snet_intro">Google SafetyNet jest systemem certyfikacji urządzenia, który upewnia się czy urządzenie jest poprawnie zabezpieczone i kompatybilne z Android CTS. Niektóre aplikacje używają SafetyNet ze względów bezpieczeństwa lub jako przeciwśrodek do modyfikacji.\n\nUsługa microG GmsCore zawiera wolną implementację SafetyNet, ale oficjalny serwer wymaga by SafetyNet był podpisany przez własnościowy system DroidGuard.</string>
 
+    <string name="pref_safetynet_test_title">Wypróbuj działanie SafetyNet</string>
+    <string name="pref_droidguard_operation_mode">Tryb działania</string>
 </resources>
diff --git a/play-services-core/src/main/res/values-ru/strings.xml b/play-services-core/src/main/res/values-ru/strings.xml
index 2eec92ba..172223c7 100644
--- a/play-services-core/src/main/res/values-ru/strings.xml
+++ b/play-services-core/src/main/res/values-ru/strings.xml
@@ -114,7 +114,6 @@
     <string name="prefcat_configuration">Конфигурация</string>
     <string name="prefcat_google_services">Google сервисы</string>
     <string name="prefcat_location_service">Служба определения местоположения</string>
-    <string name="prefcat_operation_mode">Режим работы</string>
     <string name="prefcat_services">Сервисы</string>
     <string name="prefcat_test">Тест</string>
 
@@ -181,22 +180,11 @@
     <string name="prefcat_push_apps_unregistered_title">Незарегистрированные приложения</string>
     <string name="prefcat_push_networks_title">Сети для приёма push-уведомлений</string>
 
-    <string name="snet_intro">Google SafetyNet это система сертификации устройства, гарантирующая, что устройство корректно защищено и совместимо с Android CTS. Некоторые приложения используют SafetyNet из соображений безопасности или в качестве предварительной системы защиты от взлома.\n\nmicroG GmsCore содержит свободную реализацию SafetyNet, но официальный сервер требует, чтобы запросы были подписаны с помощью проприетарной системы DroidGuard. Изолированная версия DroidGuard доступна как отдельное приложение "DroidGuard Helper".</string>
+    <string name="snet_intro">Google SafetyNet это система сертификации устройства, гарантирующая, что устройство корректно защищено и совместимо с Android CTS. Некоторые приложения используют SafetyNet из соображений безопасности или в качестве предварительной системы защиты от взлома.\n\nmicroG GmsCore содержит свободную реализацию SafetyNet, но официальный сервер требует, чтобы запросы были подписаны с помощью проприетарной системы DroidGuard.</string>
     <string name="snet_enable_switch">Разрешить проверку статуса устройства</string>
 
-    <string name="pref_snet_testdrive_title">Тест верификации SafetyNet</string>
-
-    <string name="pref_snet_status_official_title">Использовать официальный сервер</string>
-    <string name="pref_snet_status_official_summary">Требуется система без root и установленный microG DroidGuard Helper</string>
-    <string name="pref_snet_status_official_info">официальный сервер</string>
-    <string name="pref_snet_status_third_party_title">Использовать сторонний сервер</string>
-    <string name="pref_snet_status_third_party_summary">Сторонние сервера могут быть в состоянии ответить на запросы SafetyNet без подписи DroidGuard</string>
-    <string name="pref_snet_status_third_party_info">сторонний сервер</string>
-    <string name="pref_snet_custom_url_title">URL стороннего сервера</string>
-    <string name="pref_snet_custom_url_summary">Полный URL стороннего сервера, который отвечает на проверочные запросы SafetyNet</string>
-    <string name="pref_snet_self_signed_title">Использовать самоподписанный сертификат</string>
-    <string name="pref_snet_self_signed_summary">Вместо запросов на сервер подписывать SafetyNet локально, используя самостоятельно созданный сертификат. Большинство приложений будут отказываться использовать самоподписанные ответы.</string>
-    <string name="pref_snet_status_self_signed_info">самоподписанный сертификат</string>
+    <string name="pref_safetynet_test_title">Тест верификации SafetyNet</string>
+    <string name="pref_droidguard_operation_mode">Режим работы</string>
 
 </resources>
 
diff --git a/play-services-core/src/main/res/values-uk/strings.xml b/play-services-core/src/main/res/values-uk/strings.xml
index ace13272..f9246c9c 100644
--- a/play-services-core/src/main/res/values-uk/strings.xml
+++ b/play-services-core/src/main/res/values-uk/strings.xml
@@ -109,7 +109,6 @@
     <string name="prefcat_configuration">Конфігурація</string>
     <string name="prefcat_google_services">Сервіси Google</string>
     <string name="prefcat_location_service">Сервіси позиціювання</string>
-    <string name="prefcat_operation_mode">Режим роботи</string>
     <string name="prefcat_services">Сервіси</string>
     <string name="prefcat_test">Тест</string>
 
@@ -154,17 +153,8 @@
     <string name="gcm_unregister_after_deny_message">Ви заборонили додатку push-повідомлення, який вже був прив\'язаний.\nВи бажаєте відв\'язати його зараз, аби більше не отримувати від нього push-повідомлень?</string>
     <string name="gcm_messages_counter">Повідомлень: <xliff:g example="123">%1$d</xliff:g> (<xliff:g example="12345">%2$d</xliff:g> байт)</string>
 
-    <string name="snet_intro">Google SafetyNet це система сертифікації пристрою, яка гарантує, що пристрій коректно захищено та сумісне із Android CTS. Деякі додатки використовують SafetyNet для безпеки або в якості попередньої системи захисту від злому.\n\nmicroG GmsCore містить вільну реалізацію SafetyNet, але офіційний сервер вимагає, аби запити були підписані за допомогою закритої програмної системи DroidGuard. Ізольована версія DroidGuard доступна для встановлення як окремий додаток \"DroidGuard Helper\".</string>
-
-    <string name="pref_snet_testdrive_title">Протестувати SafetyNet перевірку</string>
-
-    <string name="pref_snet_status_official_title">Використовувати офіційний сервер</string>
-    <string name="pref_snet_status_official_summary">Потребує систему з адміністративними правами та встановленим microG DroidGuard Helper</string>
-    <string name="pref_snet_status_third_party_title">Використовувати сторонній сервер</string>
-    <string name="pref_snet_status_third_party_summary">Сторонні сервери можуть відповідати на SafetyNet запити без підпису DroidGuard</string>
-    <string name="pref_snet_custom_url_title">Посилання стороннього серверу</string>
-    <string name="pref_snet_custom_url_summary">Повне посилання стороннього серверу, який відповідає на запити SafetyNet</string>
-    <string name="pref_snet_self_signed_title">Використовувати самостійно підписаний сертифікат</string>
-    <string name="pref_snet_self_signed_summary">Підписувати SafetyNet локально, замість запитів на сервер, використовуючи само-підписний сертифікат. Більшість додатків будуть відхиляти само-підписні відповіді.</string>
+    <string name="snet_intro">Google SafetyNet це система сертифікації пристрою, яка гарантує, що пристрій коректно захищено та сумісне із Android CTS. Деякі додатки використовують SafetyNet для безпеки або в якості попередньої системи захисту від злому.\n\nmicroG GmsCore містить вільну реалізацію SafetyNet, але офіційний сервер вимагає, аби запити були підписані за допомогою закритої програмної системи DroidGuard.</string>
 
+    <string name="pref_safetynet_test_title">Протестувати SafetyNet перевірку</string>
+    <string name="pref_droidguard_operation_mode">Режим роботи</string>
 </resources>
diff --git a/play-services-core/src/main/res/values-zh-rTW/strings.xml b/play-services-core/src/main/res/values-zh-rTW/strings.xml
index 1a9c71cd..aad94624 100644
--- a/play-services-core/src/main/res/values-zh-rTW/strings.xml
+++ b/play-services-core/src/main/res/values-zh-rTW/strings.xml
@@ -138,16 +138,7 @@
 
     <string name="snet_intro">Google SafetyNet是一個確認手機被確實保護和相容於Android CTS的驗證系統。一些程式基於安全因素使用SafetyNet，一些則是以必須通過的形式來防止篡改。
     	
-    	microG GmsCore包含了SafetyNet的自由執行，但官方伺服器需要SafetyNet請求經非自由軟體性質的DroidGuard系統簽名。有一個可用的沙盒測試版本DroidGuard：獨立程式“DroidGuard Helper”。</string>
-
-    <string name="pref_snet_testdrive_title">測試SafetyNet驗證</string>
-
-    <string name="pref_snet_status_official_title">使用官方伺服器</string>
-    <string name="pref_snet_status_official_summary">需要未root的系統及安裝microG DroidGuard Helper</string>
-    <string name="pref_snet_status_third_party_title">使用第三方伺服器</string>
-    <string name="pref_snet_status_third_party_summary">第三方伺服器可能不需要DroidGuard簽名便能回應SafetyNet請求</string>
-    <string name="pref_snet_custom_url_title">自訂伺服器網址</string>
-    <string name="pref_snet_custom_url_summary">回應SafetyNet驗證請求之第三方伺服器的完整網址</string>
-    <string name="pref_snet_self_signed_title">使用自行簽名認證</string>
-    <string name="pref_snet_self_signed_summary">不向伺服器請求簽名，而是用本地的認證文件自行簽名SafetyNet。大部分的程式都會拒絕自行簽名認證。</string>
+    	microG GmsCore包含了SafetyNet的自由執行，但官方伺服器需要SafetyNet請求經非自由軟體性質的DroidGuard系統簽名。</string>
+
+    <string name="pref_safetynet_test_title">測試SafetyNet驗證</string>
 </resources>
diff --git a/play-services-core/src/main/res/values/strings.xml b/play-services-core/src/main/res/values/strings.xml
index 2f2e5752..d02c4de3 100644
--- a/play-services-core/src/main/res/values/strings.xml
+++ b/play-services-core/src/main/res/values/strings.xml
@@ -1,19 +1,8 @@
-<?xml version="1.0" encoding="utf-8"?><!--
-  ~ Copyright (C) 2013-2017 microG Project Team
-  ~
-  ~ Licensed under the Apache License, Version 2.0 (the "License");
-  ~ you may not use this file except in compliance with the License.
-  ~ You may obtain a copy of the License at
-  ~
-  ~     http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~ Unless required by applicable law or agreed to in writing, software
-  ~ distributed under the License is distributed on an "AS IS" BASIS,
-  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~ See the License for the specific language governing permissions and
-  ~ limitations under the License.
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ SPDX-FileCopyrightText: 2017 microG Project Team
+  ~ SPDX-License-Identifier: Apache-2.0
   -->
-
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
     <string name="gms_app_name">microG Services Core</string>
     <string name="gms_settings_name">microG Settings</string>
@@ -114,7 +103,6 @@ This can take a couple of minutes."</string>
     <string name="prefcat_configuration">Configuration</string>
     <string name="prefcat_google_services">Google Services</string>
     <string name="prefcat_location_service">Location service</string>
-    <string name="prefcat_operation_mode">Operation mode</string>
     <string name="prefcat_services">Services</string>
     <string name="prefcat_test">Test</string>
 
@@ -182,21 +170,21 @@ This can take a couple of minutes."</string>
     <string name="prefcat_push_apps_unregistered_title">Unregistered apps</string>
     <string name="prefcat_push_networks_title">Networks to use for push notifications</string>
 
-    <string name="snet_intro">Google SafetyNet is a device certification system, ensuring that the device is properly secured and compatible with Android CTS. Some applications use SafetyNet for security reasons or as a prerequisite for tamper-protection.\n\nmicroG GmsCore contains a free implementation of SafetyNet, but the official server requires SafetyNet requests to be signed using the proprietary DroidGuard system. A sandboxed version of DroidGuard is available as a separate “DroidGuard Helper” app.</string>
+    <string name="snet_intro">Google SafetyNet is a device certification system, ensuring that the device is properly secured and compatible with Android CTS. Some applications use SafetyNet for security reasons or as a prerequisite for tamper-protection.\n\nmicroG GmsCore contains a free implementation of SafetyNet, but the official server requires SafetyNet requests to be signed using the proprietary DroidGuard system.</string>
     <string name="snet_enable_switch">Allow device attestation</string>
 
-    <string name="pref_snet_testdrive_title">Try SafetyNet attestation</string>
-
-    <string name="pref_snet_status_official_title">Use official server</string>
-    <string name="pref_snet_status_official_summary">Requires an unrooted system and microG DroidGuard Helper installed</string>
-    <string name="pref_snet_status_official_info">official server</string>
-    <string name="pref_snet_status_third_party_title">Use third-party server</string>
-    <string name="pref_snet_status_third_party_summary">Third-party servers might be able to reply to SafetyNet requests without DroidGuard signature</string>
-    <string name="pref_snet_status_third_party_info">third-party server</string>
-    <string name="pref_snet_custom_url_title">Custom server URL</string>
-    <string name="pref_snet_custom_url_summary">Full URL of the third-party server answering SafetyNet attestation requests</string>
-    <string name="pref_snet_self_signed_title">Use self-signed certificate</string>
-    <string name="pref_snet_self_signed_summary">Instead of requesting a server, sign SafetyNet responses locally using a self-signed certificate. Most apps will refuse to use self-signed responses.</string>
-    <string name="pref_snet_status_self_signed_info">self-signed certificate</string>
+    <string name="pref_safetynet_test_title">Test SafetyNet attestation</string>
+    <string name="pref_recaptcha_test_title">Test ReCAPTCHA</string>
+    <string name="pref_test_summary_passed">Passed all tests</string>
+    <string name="pref_test_summary_failed">Failed: %s</string>
+    <string name="pref_test_summary_warn">Warning: %s</string>
+    <string name="pref_test_summary_running">Running…</string>
+    <string name="pref_droidguard_operation_mode">Operation mode</string>
+
+    <string name="profile_name_native">Native</string>
+    <string name="profile_name_real">Real</string>
+    <string name="profile_name_user">Custom: %s</string>
+    <string name="profile_name_auto">Automatic: %s</string>
+    <string name="profile_name_system">System: %s</string>
 
 </resources>
diff --git a/play-services-core/src/main/res/xml/preferences_device_registration.xml b/play-services-core/src/main/res/xml/preferences_device_registration.xml
index 1f73af33..4ad1fae0 100644
--- a/play-services-core/src/main/res/xml/preferences_device_registration.xml
+++ b/play-services-core/src/main/res/xml/preferences_device_registration.xml
@@ -6,17 +6,35 @@
 
 <PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:tools="http://schemas.android.com/tools">
+    <PreferenceCategory
+        android:key="prefcat_device_profile"
+        android:title="Device profile">
+        <ListPreference
+            android:key="pref_device_profile"
+            android:persistent="false"
+            android:title="Select profile"
+            tools:summary="Automatic (Google Pixel 3, Android 11)" />
+        <Preference
+            android:key="pref_device_profile_import"
+            android:summary="Import device profile from file"
+            android:title="Import custom profile" />
+        <Preference
+            android:enabled="false"
+            android:key="pref_device_serial"
+            android:title="Serial"
+            tools:summary="123456" />
+    </PreferenceCategory>
     <PreferenceCategory
         android:key="prefcat_device_registration_status"
         android:layout="@layout/preference_category_no_label">
         <Preference
+            android:enabled="false"
             android:key="pref_device_registration_status"
-            android:selectable="false"
             android:title="@string/pref_info_status"
             tools:summary="Last registration: 13 hours ago" />
         <Preference
+            android:enabled="false"
             android:key="pref_device_registration_android_id"
-            android:selectable="false"
             android:title="@string/pref_device_registration_android_id"
             tools:summary="1953a59d1c1b7e4b" />
     </PreferenceCategory>
diff --git a/play-services-core/src/main/res/xml/preferences_gcm.xml b/play-services-core/src/main/res/xml/preferences_gcm.xml
deleted file mode 100644
index bcfc63bb..00000000
--- a/play-services-core/src/main/res/xml/preferences_gcm.xml
+++ /dev/null
@@ -1,32 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-  ~ Copyright (C) 2013-2017 microG Project Team
-  ~
-  ~ Licensed under the Apache License, Version 2.0 (the "License");
-  ~ you may not use this file except in compliance with the License.
-  ~ You may obtain a copy of the License at
-  ~
-  ~     http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~ Unless required by applicable law or agreed to in writing, software
-  ~ distributed under the License is distributed on an "AS IS" BASIS,
-  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~ See the License for the specific language governing permissions and
-  ~ limitations under the License.
-  -->
-
-<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">
-    <Preference
-        android:selectable="false"
-        android:summary="@string/pref_gcm_enable_mcs_summary"/>
-
-    <Preference
-        android:key="pref_gcm_status"
-        android:persistent="false"
-        android:selectable="false"
-        android:summary="Current state: Connected since 2 min ago"/>
-
-    <PreferenceCategory
-        android:key="gcm_apps"
-        android:title="@string/pref_gcm_apps_title"/>
-</PreferenceScreen>
\ No newline at end of file
diff --git a/play-services-core/src/main/res/xml/preferences_push_notifications.xml b/play-services-core/src/main/res/xml/preferences_push_notifications.xml
index 0fd4e926..871ad6cf 100644
--- a/play-services-core/src/main/res/xml/preferences_push_notifications.xml
+++ b/play-services-core/src/main/res/xml/preferences_push_notifications.xml
@@ -26,7 +26,7 @@
         android:layout="@layout/preference_category_no_label">
         <Preference
             android:key="pref_push_status"
-            android:selectable="false"
+            android:enabled="false"
             android:title="@string/pref_info_status"
             tools:summary="Connected since 15 minutes ago" />
     </PreferenceCategory>
diff --git a/play-services-core/src/main/res/xml/preferences_safetynet.xml b/play-services-core/src/main/res/xml/preferences_safetynet.xml
index 2c4dfbbf..438395af 100644
--- a/play-services-core/src/main/res/xml/preferences_safetynet.xml
+++ b/play-services-core/src/main/res/xml/preferences_safetynet.xml
@@ -17,19 +17,26 @@
 
 <PreferenceScreen
     xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:app="http://schemas.android.com/apk/res-auto">
-    <org.microg.gms.ui.TextPreference
-        android:icon="@drawable/ic_info_outline"
-        android:key="pref_snet_summary"
-        android:selectable="false"
-        android:summary="@string/snet_intro" />
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools">
     <PreferenceCategory
-        android:title="@string/prefcat_test"
-        app:isPreferenceVisible="false">
+        android:layout="@layout/preference_category_no_label">
         <Preference
-            android:enabled="false"
             android:key="pref_snet_run_attest"
-            android:summary="Not yet available"
-            android:title="@string/pref_snet_testdrive_title" />
+            android:title="@string/pref_safetynet_test_title"
+            tools:icon="@drawable/ic_circle_check"
+            tools:summary="@string/pref_test_summary_passed" />
+        <Preference
+            android:key="pref_recaptcha_run_test"
+            android:title="@string/pref_recaptcha_test_title"
+            tools:icon="@drawable/ic_circle_check"
+            tools:summary="@string/pref_test_summary_passed" />
+    </PreferenceCategory>
+    <PreferenceCategory android:layout="@layout/preference_category_no_label">
+        <org.microg.gms.ui.TextPreference
+            android:icon="@drawable/ic_info_outline"
+            android:key="pref_snet_summary"
+            android:selectable="false"
+            android:summary="@string/snet_intro" />
     </PreferenceCategory>
 </PreferenceScreen>
diff --git a/play-services-core/src/main/res/xml/preferences_snet_advanced.xml b/play-services-core/src/main/res/xml/preferences_snet_advanced.xml
index e87859af..e50f5ba9 100644
--- a/play-services-core/src/main/res/xml/preferences_snet_advanced.xml
+++ b/play-services-core/src/main/res/xml/preferences_snet_advanced.xml
@@ -15,29 +15,12 @@
   ~ limitations under the License.
   -->
 
-<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">
-    <PreferenceCategory android:title="@string/prefcat_operation_mode">
-        <org.microg.tools.ui.RadioButtonPreference
-            android:checked="true"
-            android:key="snet_official"
-            android:summary="@string/pref_snet_status_official_summary"
-            android:title="@string/pref_snet_status_official_title"/>
-        <org.microg.tools.ui.RadioButtonPreference
-            android:checked="false"
-            android:enabled="false"
-            android:key="snet_self_signed"
-            android:summary="@string/pref_snet_self_signed_summary"
-            android:title="@string/pref_snet_self_signed_title"/>
-        <org.microg.tools.ui.RadioButtonPreference
-            android:checked="false"
-            android:key="snet_third_party"
-            android:summary="@string/pref_snet_status_third_party_summary"
-            android:title="@string/pref_snet_status_third_party_title"/>
-        <EditTextPreference
-            android:dependency="snet_third_party"
-            android:hint="https://example.com/server?key=123"
-            android:key="snet_custom_url"
-            android:summary="@string/pref_snet_custom_url_summary"
-            android:title="@string/pref_snet_custom_url_title"/>
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools">
+    <PreferenceCategory android:title="DroidGuard">
+        <Preference
+            android:key="pref_droidguard_mode"
+            android:title="@string/pref_droidguard_operation_mode"
+            tools:summary="Local (embedded)" />
     </PreferenceCategory>
-</PreferenceScreen>
\ No newline at end of file
+</PreferenceScreen>
diff --git a/play-services-core/src/withNearby/kotlin/org/microg/gms/ui/NearbyPreferencesIntegration.kt b/play-services-core/src/withNearby/kotlin/org/microg/gms/ui/NearbyPreferencesIntegration.kt
index 17d20c37..d4f940e1 100644
--- a/play-services-core/src/withNearby/kotlin/org/microg/gms/ui/NearbyPreferencesIntegration.kt
+++ b/play-services-core/src/withNearby/kotlin/org/microg/gms/ui/NearbyPreferencesIntegration.kt
@@ -12,11 +12,12 @@ import android.net.Uri
 import androidx.core.content.ContextCompat
 import com.google.android.gms.R
 import org.microg.gms.nearby.exposurenotification.Constants
+import org.microg.gms.nearby.exposurenotification.ExposurePreferences
 import org.microg.gms.nearby.exposurenotification.getExposureNotificationsServiceInfo
 
 interface NearbyPreferencesIntegration {
     companion object {
-        suspend fun getExposurePreferenceSummary(context: Context): String = if (isAvailable && getExposureNotificationsServiceInfo(context).configuration.enabled) {
+        suspend fun getExposurePreferenceSummary(context: Context): String = if (isAvailable && ExposurePreferences(context).enabled) {
             context.getString(R.string.service_status_enabled_short)
         } else {
             context.getString(R.string.service_status_disabled_short)
diff --git a/play-services-droidguard-api/src/main/java/com/google/android/gms/droidguard/internal/DroidGuardInitReply.java b/play-services-droidguard-api/src/main/java/com/google/android/gms/droidguard/internal/DroidGuardInitReply.java
index 02b93b0d..0294a5c0 100644
--- a/play-services-droidguard-api/src/main/java/com/google/android/gms/droidguard/internal/DroidGuardInitReply.java
+++ b/play-services-droidguard-api/src/main/java/com/google/android/gms/droidguard/internal/DroidGuardInitReply.java
@@ -9,11 +9,13 @@ import android.os.Parcel;
 import android.os.ParcelFileDescriptor;
 import android.os.Parcelable;
 
+import androidx.annotation.Nullable;
+
 public class DroidGuardInitReply implements Parcelable {
-    public ParcelFileDescriptor pfd;
-    public Parcelable object;
+    public @Nullable ParcelFileDescriptor pfd;
+    public @Nullable Parcelable object;
 
-    public DroidGuardInitReply(ParcelFileDescriptor pfd, Parcelable object) {
+    public DroidGuardInitReply(@Nullable ParcelFileDescriptor pfd, @Nullable Parcelable object) {
         this.pfd = pfd;
         this.object = object;
     }
diff --git a/play-services-droidguard/src/main/kotlin/org/microg/gms/droidguard/DroidGuardClient.kt b/play-services-droidguard/src/main/kotlin/org/microg/gms/droidguard/DroidGuardClient.kt
index adcaa45b..a5b8f3d4 100644
--- a/play-services-droidguard/src/main/kotlin/org/microg/gms/droidguard/DroidGuardClient.kt
+++ b/play-services-droidguard/src/main/kotlin/org/microg/gms/droidguard/DroidGuardClient.kt
@@ -5,7 +5,6 @@
 
 package org.microg.gms.droidguard
 
-import com.google.android.gms.droidguard.internal.IDroidGuardHandle
 import com.google.android.gms.tasks.Task
 
 interface DroidGuardClient {
diff --git a/play-services-droidguard/src/main/kotlin/org/microg/gms/droidguard/DroidGuardClientImpl.kt b/play-services-droidguard/src/main/kotlin/org/microg/gms/droidguard/DroidGuardClientImpl.kt
index 49f3fc63..d8af0b6d 100644
--- a/play-services-droidguard/src/main/kotlin/org/microg/gms/droidguard/DroidGuardClientImpl.kt
+++ b/play-services-droidguard/src/main/kotlin/org/microg/gms/droidguard/DroidGuardClientImpl.kt
@@ -11,14 +11,13 @@ import com.google.android.gms.common.api.Api
 import com.google.android.gms.common.api.Api.ApiOptions.NoOptions
 import com.google.android.gms.common.api.GoogleApi
 import com.google.android.gms.tasks.Task
-import org.microg.gms.common.api.ApiClientBuilder
 import org.microg.gms.common.api.ApiClientSettings
 import org.microg.gms.common.api.ConnectionCallbacks
 import org.microg.gms.common.api.OnConnectionFailedListener
 
 class DroidGuardClientImpl(context: Context) : GoogleApi<NoOptions>(context, API), DroidGuardClient {
     companion object {
-        private val API = Api(ApiClientBuilder { _: NoOptions?, context: Context, _: Looper?, _: ApiClientSettings?, callbacks: ConnectionCallbacks, connectionFailedListener: OnConnectionFailedListener -> DroidGuardApiClient(context, callbacks, connectionFailedListener) })
+        private val API = Api { _: NoOptions?, context: Context, _: Looper?, _: ApiClientSettings?, callbacks: ConnectionCallbacks, connectionFailedListener: OnConnectionFailedListener -> DroidGuardApiClient(context, callbacks, connectionFailedListener) }
     }
 
     override fun getHandle(): Task<DroidGuardHandle> {
diff --git a/play-services-droidguard/src/main/kotlin/org/microg/gms/droidguard/DroidGuardHandle.kt b/play-services-droidguard/src/main/kotlin/org/microg/gms/droidguard/DroidGuardHandle.kt
index 161889c4..3335a40a 100644
--- a/play-services-droidguard/src/main/kotlin/org/microg/gms/droidguard/DroidGuardHandle.kt
+++ b/play-services-droidguard/src/main/kotlin/org/microg/gms/droidguard/DroidGuardHandle.kt
@@ -5,7 +5,9 @@
 
 package org.microg.gms.droidguard
 
+import android.os.Bundle
 import android.os.ParcelFileDescriptor
+import android.util.Log
 import com.google.android.gms.droidguard.internal.DroidGuardResultsRequest
 import com.google.android.gms.droidguard.internal.IDroidGuardHandle
 
@@ -16,7 +18,18 @@ class DroidGuardHandle(private val handle: IDroidGuardHandle) {
     fun init(flow: String) {
         if (state != 0) throw IllegalStateException("init() already called")
         try {
-            handle.initWithRequest(flow, DroidGuardResultsRequest().setOpenHandles(openHandles++).also { fd?.let { fd -> it.fd = fd } })
+            val reply = handle.initWithRequest(flow, DroidGuardResultsRequest().setOpenHandles(openHandles++).also { fd?.let { fd -> it.fd = fd } })
+            if (reply != null) {
+                if (reply.pfd != null && reply.`object` != null) {
+                    Log.w(TAG, "DroidGuardInitReply suggests additional actions in main thread")
+                    val bundle = reply.`object` as? Bundle
+                    if (bundle != null) {
+                        for (key in bundle.keySet()) {
+                            Log.d(TAG, "reply.object[$key] = ${bundle[key]}")
+                        }
+                    }
+                }
+            }
             state = 1
         } catch (e: Exception) {
             state = -1
@@ -51,6 +64,7 @@ class DroidGuardHandle(private val handle: IDroidGuardHandle) {
     }
 
     companion object {
+        private const val TAG = "DroidGuardHandler"
         private var openHandles = 0
     }
 }
diff --git a/play-services-gcm/build.gradle b/play-services-gcm/build.gradle
index 26dc7663..c98e80b5 100644
--- a/play-services-gcm/build.gradle
+++ b/play-services-gcm/build.gradle
@@ -1,17 +1,6 @@
 /*
- * Copyright 2013-2015 microG Project Team
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * SPDX-FileCopyrightText: 2016 microG Project Team
+ * SPDX-License-Identifier: Apache-2.0
  */
 
 apply plugin: 'com.android.library'
@@ -42,7 +31,12 @@ android {
 }
 
 dependencies {
+    // Dependencies from play-services-gcm:17.0.0
+    api "androidx.collection:collection:1.0.0"
+    api "androidx.core:core:1.0.0"
+    api 'androidx.legacy:legacy-support-core-utils:1.0.0'
+    api project(':play-services-base')
+    api project(':play-services-basement')
     api project(':play-services-iid')
-
-    implementation 'androidx.legacy:legacy-support-core-utils:1.0.0' // TODO
+    //api project(':play-services-stats')
 }
diff --git a/play-services-gcm/src/main/java/com/google/android/gms/gcm/GoogleCloudMessaging.java b/play-services-gcm/src/main/java/com/google/android/gms/gcm/GoogleCloudMessaging.java
index 06546d7b..5fc53346 100644
--- a/play-services-gcm/src/main/java/com/google/android/gms/gcm/GoogleCloudMessaging.java
+++ b/play-services-gcm/src/main/java/com/google/android/gms/gcm/GoogleCloudMessaging.java
@@ -30,13 +30,10 @@ import org.microg.gms.gcm.GcmConstants;
 
 import java.io.IOException;
 
-import static org.microg.gms.common.Constants.GMS_PACKAGE_NAME;
 import static org.microg.gms.gcm.GcmConstants.ACTION_C2DM_RECEIVE;
 import static org.microg.gms.gcm.GcmConstants.EXTRA_DELAY;
-import static org.microg.gms.gcm.GcmConstants.EXTRA_ERROR;
 import static org.microg.gms.gcm.GcmConstants.EXTRA_MESSAGE_ID;
 import static org.microg.gms.gcm.GcmConstants.EXTRA_MESSAGE_TYPE;
-import static org.microg.gms.gcm.GcmConstants.EXTRA_REGISTRATION_ID;
 import static org.microg.gms.gcm.GcmConstants.EXTRA_SENDER;
 import static org.microg.gms.gcm.GcmConstants.EXTRA_SENDER_LEGACY;
 import static org.microg.gms.gcm.GcmConstants.EXTRA_SEND_FROM;
@@ -317,6 +314,6 @@ public class GoogleCloudMessaging {
         if (i > 0) {
             to = to.substring(0, i);
         }
-        return InstanceID.getInstance(context).getStore().get("", to, INSTANCE_ID_SCOPE);
+        return InstanceID.getInstance(context).getStore().getToken("", to, INSTANCE_ID_SCOPE);
     }
 }
diff --git a/play-services-iid/build.gradle b/play-services-iid/build.gradle
index 5edc4151..c38cc4f4 100644
--- a/play-services-iid/build.gradle
+++ b/play-services-iid/build.gradle
@@ -1,17 +1,6 @@
 /*
- * Copyright 2013-2015 microG Project Team
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * SPDX-FileCopyrightText: 2016 microG Project Team
+ * SPDX-License-Identifier: Apache-2.0
  */
 
 apply plugin: 'com.android.library'
@@ -42,8 +31,13 @@ android {
 }
 
 dependencies {
-    api project(':play-services-base')
     api project(':play-services-iid-api')
 
-    implementation 'androidx.legacy:legacy-support-core-utils:1.0.0' // TODO
+    // Dependencies from play-services-iid:17.0.0
+    api "androidx.collection:collection:1.0.0"
+    api "androidx.core:core:1.0.0"
+    api project(':play-services-base')
+    api project(':play-services-basement')
+    //api project(':play-services-stats')
+    api project(':play-services-tasks')
 }
diff --git a/play-services-iid/src/main/java/com/google/android/gms/iid/InstanceID.java b/play-services-iid/src/main/java/com/google/android/gms/iid/InstanceID.java
index 8a4dbefa..327d8b1c 100644
--- a/play-services-iid/src/main/java/com/google/android/gms/iid/InstanceID.java
+++ b/play-services-iid/src/main/java/com/google/android/gms/iid/InstanceID.java
@@ -154,7 +154,7 @@ public class InstanceID {
      */
     public long getCreationTime() {
         if (creationTime == 0) {
-            String s = storeInstance.get(subtype, "cre");
+            String s = storeInstance.getSecret(subtype, "cre");
             if (s != null) {
                 creationTime = Long.parseLong(s);
             }
@@ -211,7 +211,14 @@ public class InstanceID {
     public String getToken(String authorizedEntity, String scope, Bundle extras) throws IOException {
         if (Looper.getMainLooper() == Looper.myLooper()) throw new IOException(ERROR_MAIN_THREAD);
 
-        throw new UnsupportedOperationException();
+        long tokenTimestamp = storeInstance.getTokenTimestamp(subtype, authorizedEntity, scope);
+        if (tokenTimestamp > System.currentTimeMillis() - 7 * 24 * 60 * 60 * 1000L) {
+            String token = storeInstance.getToken(subtype, authorizedEntity, scope);
+            if (token != null) return token;
+        }
+        String token = requestToken(authorizedEntity, scope, extras);
+        storeInstance.putToken(subtype, authorizedEntity, scope, token);
+        return token;
     }
 
     /**
@@ -252,7 +259,7 @@ public class InstanceID {
                     rsaGenerator.initialize(RSA_KEY_SIZE);
                     keyPair = rsaGenerator.generateKeyPair();
                     creationTime = System.currentTimeMillis();
-                    storeInstance.put(subtype, keyPair, creationTime);
+                    storeInstance.putKeyPair(subtype, keyPair, creationTime);
                 } catch (NoSuchAlgorithmException e) {
                     Log.w(TAG, e);
                 }
@@ -272,4 +279,4 @@ public class InstanceID {
             return null;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/play-services-iid/src/main/java/org/microg/gms/iid/InstanceIdStore.java b/play-services-iid/src/main/java/org/microg/gms/iid/InstanceIdStore.java
index 65778936..94225dab 100644
--- a/play-services-iid/src/main/java/org/microg/gms/iid/InstanceIdStore.java
+++ b/play-services-iid/src/main/java/org/microg/gms/iid/InstanceIdStore.java
@@ -38,21 +38,29 @@ public class InstanceIdStore {
         this.sharedPreferences = context.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE);
     }
 
-    public synchronized String get(String key) {
+    public synchronized String getString(String key) {
         return sharedPreferences.getString(key, null);
     }
 
-    public String get(String subtype, String key) {
-        return get(subtype + "|S|" + key);
+    public synchronized long getLong(String key) {
+        return sharedPreferences.getLong(key, -1);
     }
 
-    public String get(String subtype, String authorizedEntity, String scope) {
-        return get(subtype + "|T|" + authorizedEntity + "|" + scope);
+    public String getSecret(String subtype, String key) {
+        return getString(subtype + "|S|" + key);
+    }
+
+    public String getToken(String subtype, String authorizedEntity, String scope) {
+        return getString(subtype + "|T|" + authorizedEntity + "|" + scope);
+    }
+
+    public long getTokenTimestamp(String subtype, String authorizedEntity, String scope) {
+        return getLong(subtype + "|T-timestamp|" + authorizedEntity + "|" + scope);
     }
 
     public KeyPair getKeyPair(String subtype) {
-        String pub = get(subtype, "|P|");
-        String priv = get(subtype, "|K|");
+        String pub = getSecret(subtype, "|P|");
+        String priv = getSecret(subtype, "|K|");
         if (pub == null || priv == null) {
             return null;
         }
@@ -67,24 +75,31 @@ public class InstanceIdStore {
         }
     }
 
-    public synchronized void put(String key, String value) {
+    public synchronized void putString(String key, String value) {
         SharedPreferences.Editor editor = sharedPreferences.edit();
         editor.putString(key, value);
         editor.apply();
     }
 
-    public void put(String subtype, String key, String value) {
-        put(subtype + "|S|" + key, value);
+    public synchronized void putLong(String key, long value) {
+        SharedPreferences.Editor editor = sharedPreferences.edit();
+        editor.putLong(key, value);
+        editor.apply();
+    }
+
+    public void putSecret(String subtype, String key, String value) {
+        putString(subtype + "|S|" + key, value);
     }
 
-    public void put(String subtype, String authorizedEntity, String scope, String value) {
-        put(subtype + "|T|" + authorizedEntity + "|" + scope, value);
+    public void putToken(String subtype, String authorizedEntity, String scope, String token) {
+        putString(subtype + "|T|" + authorizedEntity + "|" + scope, token);
+        putLong(subtype + "|T-timestamp|" + authorizedEntity + "|" + scope, System.currentTimeMillis());
     }
 
-    public synchronized void put(String subtype, KeyPair keyPair, long timestamp) {
-        put(subtype, "|P|", Base64.encodeToString(keyPair.getPublic().getEncoded(), Base64.URL_SAFE | Base64.NO_WRAP | Base64.NO_PADDING));
-        put(subtype, "|K|", Base64.encodeToString(keyPair.getPrivate().getEncoded(), Base64.URL_SAFE | Base64.NO_WRAP | Base64.NO_PADDING));
-        put(subtype, "cre", Long.toString(timestamp));
+    public synchronized void putKeyPair(String subtype, KeyPair keyPair, long timestamp) {
+        putSecret(subtype, "|P|", Base64.encodeToString(keyPair.getPublic().getEncoded(), Base64.URL_SAFE | Base64.NO_WRAP | Base64.NO_PADDING));
+        putSecret(subtype, "|K|", Base64.encodeToString(keyPair.getPrivate().getEncoded(), Base64.URL_SAFE | Base64.NO_WRAP | Base64.NO_PADDING));
+        putSecret(subtype, "cre", Long.toString(timestamp));
     }
 
     public synchronized void delete() {
@@ -106,6 +121,7 @@ public class InstanceIdStore {
     public synchronized void delete(String subtype, String authorizedEntity, String scope) {
         SharedPreferences.Editor editor = sharedPreferences.edit();
         editor.remove(subtype + "|T|" + authorizedEntity + "|" + scope);
+        editor.remove(subtype + "|T-timestamp|" + authorizedEntity + "|" + scope);
         editor.apply();
     }
 }
diff --git a/play-services-location-api/src/main/aidl/com/google/android/gms/location/internal/IGoogleLocationManagerService.aidl b/play-services-location-api/src/main/aidl/com/google/android/gms/location/internal/IGoogleLocationManagerService.aidl
index 8e78a899..19f9be10 100644
--- a/play-services-location-api/src/main/aidl/com/google/android/gms/location/internal/IGoogleLocationManagerService.aidl
+++ b/play-services-location-api/src/main/aidl/com/google/android/gms/location/internal/IGoogleLocationManagerService.aidl
@@ -5,8 +5,10 @@ import android.location.Location;
 import android.os.Bundle;
 
 import com.google.android.gms.common.api.Status;
+import com.google.android.gms.common.api.internal.IStatusCallback;
 import com.google.android.gms.location.places.AutocompleteFilter;
 import com.google.android.gms.location.places.internal.IPlacesCallbacks;
+import com.google.android.gms.location.internal.DeviceOrientationRequestUpdateData;
 import com.google.android.gms.location.internal.ISettingsCallbacks;
 import com.google.android.gms.location.internal.LocationRequestInternal;
 import com.google.android.gms.location.internal.LocationRequestUpdateData;
@@ -36,17 +38,19 @@ interface IGoogleLocationManagerService {
     void removeGeofencesByIntent(in PendingIntent pendingIntent, IGeofencerCallbacks callbacks, String packageName) = 1;
     void removeGeofencesById(in String[] geofenceRequestIds, IGeofencerCallbacks callbacks, String packageName) = 2;
     void removeAllGeofences(IGeofencerCallbacks callbacks, String packageName) = 3;
+//    void removeGeofences(in RemoveGeofencingRequest request, IGeofencerCallbacks callback) = 73;
 
     void requestActivityUpdates(long detectionIntervalMillis, boolean alwaysTrue, in PendingIntent callbackIntent) = 4;
     void removeActivityUpdates(in PendingIntent callbackIntent) = 5;
     ActivityRecognitionResult getLastActivity(String packageName) = 63;
-    Status iglms65(in PendingIntent pendingIntent) = 64;
-    Status iglms66(in PendingIntent pendingIntent) = 65;
 
     Status requestGestureUpdates(in GestureRequest request, in PendingIntent pendingIntent) = 59;
     Status iglms61(in PendingIntent pendingIntent) = 60;
 
     Location getLastLocation() = 6;
+    Location getLastLocationWithPackage(String packageName) = 20;
+    Location getLastLocationWith(String s) = 79;
+
     void requestLocationUpdatesWithListener(in LocationRequest request, ILocationListener listener) = 7;
     void requestLocationUpdatesWithPackage(in LocationRequest request, ILocationListener listener, String packageName) = 19;
     void requestLocationUpdatesWithIntent(in LocationRequest request, in PendingIntent callbackIntent) = 8;
@@ -55,34 +59,55 @@ interface IGoogleLocationManagerService {
     void removeLocationUpdatesWithListener(ILocationListener listener) = 9;
     void removeLocationUpdatesWithIntent(in PendingIntent callbackIntent) = 10;
     void updateLocationRequest(in LocationRequestUpdateData locationRequestUpdateData) = 58;
-    //void flushLocations(IFusedLocationProviderCallback callback = 66;
+//    void flushLocations(IFusedLocationProviderCallback callback) = 66;
 
     void setMockMode(boolean mockMode) = 11;
     void setMockLocation(in Location mockLocation) = 12;
+    void injectLocation(in Location mockLocation, int injectionType) = 25;
 
-    Location getLastLocationWithPackage(String packageName) = 20;
-    void iglms26(in Location var1, int var2) = 25;
     LocationAvailability getLocationAvailabilityWithPackage(String packageName) = 33;
 
-    IBinder iglms51() = 50;
+//    void requestSleepSegmentUpdates(in PendingIntent pendingIntent, in SleepSegmentRequest request, IStatusCallback callback) = 78;
+    void removeSleepSegmentUpdates(in PendingIntent pendingIntent, IStatusCallback callback) = 68;
+
     void requestLocationSettingsDialog(in LocationSettingsRequest settingsRequest, ISettingsCallbacks callback, String packageName) = 62;
 
+//    void requestActivityTransitionUpdates(in ActivityTransitionRequest request, in PendingIntent pendingIntent, IStatusCallback callback) = 71;
+    void removeActivityTransitionUpdates(in PendingIntent pendingIntent, IStatusCallback callback) = 72;
+
+    void updateDeviceOrientationRequest(in DeviceOrientationRequestUpdateData request) = 74;
+
+    boolean setActivityRecognitionMode(int mode) = 76;
+
     void iglms14(in LatLngBounds var1, int var2, in PlaceFilter var3, in PlacesParams var4, IPlacesCallbacks var5) = 13;
     void iglms15(String var1, in PlacesParams var2, IPlacesCallbacks var3) = 14;
     void iglms16(in LatLng var1, in PlaceFilter var2, in PlacesParams var3, IPlacesCallbacks var4) = 15;
     void iglms17(in PlaceFilter var1, in PlacesParams var2, IPlacesCallbacks var3) = 16;
     void iglms18(in PlaceRequest var1, in PlacesParams var2, in PendingIntent var3) = 17;
     void iglms19(in PlacesParams var1, in PendingIntent var2) = 18;
+
     void iglms25(in PlaceReport var1, in PlacesParams var2) = 24;
+
     void iglms42(String var1, in PlacesParams var2, IPlacesCallbacks var3) = 41;
+
     void iglms46(in UserAddedPlace var1, in PlacesParams var2, IPlacesCallbacks var3) = 45;
     void iglms47(in LatLngBounds var1, int var2, String var3, in PlaceFilter var4, in PlacesParams var5, IPlacesCallbacks var6) = 46;
     void iglms48(in NearbyAlertRequest var1, in PlacesParams var2, in PendingIntent var3) = 47;
     void iglms49(in PlacesParams var1, in PendingIntent var2) = 48;
     void iglms50(in UserDataType var1, in LatLngBounds var2, in List var3, in PlacesParams var4, IPlacesCallbacks var5) = 49;
+    IBinder iglms51() = 50;
+
     IBinder iglms54() = 53;
     void iglms55(String var1, in LatLngBounds var2, in AutocompleteFilter var3, in PlacesParams var4, IPlacesCallbacks var5) = 54;
+
     void iglms58(in List var1, in PlacesParams var2, IPlacesCallbacks var3) = 57;
 
-    //void updateDeviceOrientationRequest(in DeviceOrientationRequestUpdateData request) = 74;
+    void iglms65(in PendingIntent pendingIntent, IStatusCallback callback) = 64;
+    void iglms66(in PendingIntent pendingIntent, IStatusCallback callback) = 65;
+
+    void iglms68(in PendingIntent pendingIntent, IStatusCallback callback) = 67;
+//    void iglms70(in ActivityRecognitionRequest request, in PendingIntent pendingIntent, IStatusCallback callback) = 69;
+    void iglms71(IStatusCallback callback) = 70;
+    void iglms76(in PendingIntent pendingIntent) = 75;
+    int iglms78() = 77;
 }
diff --git a/play-services-location-api/src/main/java/com/google/android/gms/location/LocationRequest.java b/play-services-location-api/src/main/java/com/google/android/gms/location/LocationRequest.java
index 15d159e8..085886c0 100644
--- a/play-services-location-api/src/main/java/com/google/android/gms/location/LocationRequest.java
+++ b/play-services-location-api/src/main/java/com/google/android/gms/location/LocationRequest.java
@@ -17,8 +17,8 @@
 package com.google.android.gms.location;
 
 import android.os.SystemClock;
+
 import org.microg.safeparcel.AutoSafeParcelable;
-import org.microg.safeparcel.SafeParceled;
 
 import java.util.Arrays;
 
@@ -101,24 +101,26 @@ public class LocationRequest extends AutoSafeParcelable {
      */
     public static final int PRIORITY_NO_POWER = 105;
 
-    @SafeParceled(1000)
+    @Field(1000)
     private int versionCode = 1;
-    @SafeParceled(1)
+    @Field(1)
     private int priority;
-    @SafeParceled(2)
+    @Field(2)
     private long interval;
-    @SafeParceled(3)
+    @Field(3)
     private long fastestInterval;
-    @SafeParceled(4)
+    @Field(4)
     private boolean explicitFastestInterval;
-    @SafeParceled(5)
+    @Field(5)
     private long expirationTime;
-    @SafeParceled(6)
+    @Field(6)
     private int numUpdates;
-    @SafeParceled(7)
-    private float smallestDesplacement;
-    @SafeParceled(8)
+    @Field(7)
+    private float smallestDisplacement;
+    @Field(8)
     private long maxWaitTime;
+    @Field(9)
+    private boolean waitForAccurateLocation;
 
     public LocationRequest() {
         this.priority = PRIORITY_BALANCED_POWER_ACCURACY;
@@ -127,7 +129,7 @@ public class LocationRequest extends AutoSafeParcelable {
         this.explicitFastestInterval = false;
         this.expirationTime = Long.MAX_VALUE;
         this.numUpdates = Integer.MAX_VALUE;
-        this.smallestDesplacement = 0;
+        this.smallestDisplacement = 0;
         this.maxWaitTime = 0;
     }
 
@@ -176,6 +178,17 @@ public class LocationRequest extends AutoSafeParcelable {
         return interval;
     }
 
+    /**
+     * Gets the maximum wait time in milliseconds for location updates. If the wait time is smaller than the interval
+     * requested with {@link #setInterval(long)}, then the interval will be used instead.
+     *
+     * @return maximum wait time in milliseconds, inexact
+     * @see #setMaxWaitTime(long)
+     */
+    public long getMaxWaitTime() {
+        return maxWaitTime;
+    }
+
     /**
      * Get the number of updates requested.
      * <p/>
@@ -204,8 +217,8 @@ public class LocationRequest extends AutoSafeParcelable {
      *
      * @return minimum displacement between location updates in meters
      */
-    public float getSmallestDesplacement() {
-        return smallestDesplacement;
+    public float getSmallestDisplacement() {
+        return smallestDisplacement;
     }
 
     @Override
@@ -231,7 +244,7 @@ public class LocationRequest extends AutoSafeParcelable {
             return false;
         if (priority != that.priority)
             return false;
-        if (Float.compare(that.smallestDesplacement, smallestDesplacement) != 0)
+        if (Float.compare(that.smallestDisplacement, smallestDisplacement) != 0)
             return false;
 
         return true;
@@ -240,11 +253,28 @@ public class LocationRequest extends AutoSafeParcelable {
     @Override
     public int hashCode() {
         return Arrays.hashCode(
-                new Object[] { priority, interval, fastestInterval, explicitFastestInterval,
-                        explicitFastestInterval, numUpdates, smallestDesplacement, maxWaitTime
+                new Object[]{priority, interval, fastestInterval, explicitFastestInterval,
+                        explicitFastestInterval, numUpdates, smallestDisplacement, maxWaitTime
                 });
     }
 
+    /**
+     * Returns whether or not the fastest interval was explicitly specified for the location request.
+     *
+     * @return True if the fastest interval was explicitly set for the location request; false otherwise
+     */
+    public boolean isFastestIntervalExplicitlySet() {
+        return explicitFastestInterval;
+    }
+
+    /**
+     * Returns whether the location services will wait a few seconds initially for accurate locations, if accurate
+     * locations cannot be computed on the device for {@link #PRIORITY_HIGH_ACCURACY} requests.
+     */
+    public boolean isWaitForAccurateLocation() {
+        return waitForAccurateLocation;
+    }
+
     /**
      * Set the duration of this request, in milliseconds.
      * <p/>
@@ -312,6 +342,7 @@ public class LocationRequest extends AutoSafeParcelable {
         if (millis < 0)
             throw new IllegalArgumentException("interval must not be negative");
         fastestInterval = millis;
+        explicitFastestInterval = true;
         return this;
     }
 
@@ -348,6 +379,27 @@ public class LocationRequest extends AutoSafeParcelable {
         return this;
     }
 
+    /**
+     * Sets the maximum wait time in milliseconds for location updates.
+     * <p>
+     * If you pass a value at least 2x larger than the interval specified with {@link #setInterval(long)}, then
+     * location delivery may be delayed and multiple locations can be delivered at once. Locations are determined at
+     * the {@link #setInterval(long)} rate, but can be delivered in batch after the interval you set in this method.
+     * This can consume less battery and give more accurate locations, depending on the device's hardware capabilities.
+     * You should set this value to be as large as possible for your needs if you don't need immediate location
+     * delivery.
+     *
+     * @param millis desired maximum wait time in millisecond, inexact
+     * @return the same object, so that setters can be chained
+     * @throws IllegalArgumentException if the interval is less than zero
+     */
+    public LocationRequest setMaxWaitTime(long millis) throws IllegalArgumentException {
+        if (millis < 0)
+            throw new IllegalArgumentException("interval must not be negative");
+        maxWaitTime = millis;
+        return this;
+    }
+
     /**
      * Set the number of location updates.
      * <p/>
@@ -417,22 +469,58 @@ public class LocationRequest extends AutoSafeParcelable {
     public LocationRequest setSmallestDisplacement(float smallestDisplacementMeters) {
         if (smallestDisplacementMeters < 0)
             throw new IllegalArgumentException("smallestDisplacementMeters must not be negative");
-        this.smallestDesplacement = smallestDisplacementMeters;
+        this.smallestDisplacement = smallestDisplacementMeters;
+        return this;
+    }
+
+    /**
+     * Sets whether the client wants the locations services to wait a few seconds for accurate locations initially,
+     * when accurate locations could not be computed on the device immediately after {@link #PRIORITY_HIGH_ACCURACY}
+     * request is made. By default the location services will wait for accurate locations.
+     * <p>
+     * Note that this only applies to clients with {@link #PRIORITY_HIGH_ACCURACY} requests.
+     * <p>
+     * Also note this only applies to the initial locations computed right after the location request is added. The
+     * following inaccurate locations may still be delivered to the clients without delay.
+     */
+    public LocationRequest setWaitForAccurateLocation(boolean waitForAccurateLocation) {
+        this.waitForAccurateLocation = waitForAccurateLocation;
         return this;
     }
 
+    private static String priorityToString(int priority) {
+        switch (priority) {
+            case PRIORITY_HIGH_ACCURACY:
+                return "PRIORITY_HIGH_ACCURACY";
+            case PRIORITY_BALANCED_POWER_ACCURACY:
+                return "PRIORITY_BALANCED_POWER_ACCURACY";
+            case PRIORITY_LOW_POWER:
+                return "PRIORITY_LOW_POWER";
+            case PRIORITY_NO_POWER:
+                return "PRIORITY_NO_POWER";
+            default:
+                return "???";
+        }
+    }
+
     @Override
     public String toString() {
-        return "LocationRequest{" +
-                "priority=" + priority +
-                ", interval=" + interval +
-                ", fastestInterval=" + fastestInterval +
-                ", explicitFastestInterval=" + explicitFastestInterval +
-                ", expirationTime=" + expirationTime +
-                ", numUpdates=" + numUpdates +
-                ", smallestDesplacement=" + smallestDesplacement +
-                ", maxWaitTime=" + maxWaitTime +
-                '}';
+        StringBuilder sb = new StringBuilder();
+        sb.append("Request[");
+        sb.append(priorityToString(priority));
+        if (priority != PRIORITY_NO_POWER)
+            sb.append(" requested=").append(interval).append("ms");
+        sb.append(" fastest=").append(fastestInterval).append("ms");
+        if (maxWaitTime > interval)
+            sb.append(" maxWait=").append(maxWaitTime).append("ms");
+        if (smallestDisplacement > 0)
+            sb.append(" smallestDisplacement=").append(smallestDisplacement).append("m");
+        if (expirationTime != Long.MAX_VALUE)
+            sb.append(" expireIn=").append(SystemClock.elapsedRealtime() - expirationTime).append("ms");
+        if (numUpdates != Integer.MAX_VALUE)
+            sb.append(" num=").append(numUpdates);
+        sb.append("]");
+        return sb.toString();
     }
 
     public static final Creator<LocationRequest> CREATOR = new AutoCreator<LocationRequest>(LocationRequest.class);
diff --git a/play-services-location-api/src/main/java/com/google/android/gms/location/internal/LocationRequestInternal.java b/play-services-location-api/src/main/java/com/google/android/gms/location/internal/LocationRequestInternal.java
index dd70d96a..ee2e09a6 100644
--- a/play-services-location-api/src/main/java/com/google/android/gms/location/internal/LocationRequestInternal.java
+++ b/play-services-location-api/src/main/java/com/google/android/gms/location/internal/LocationRequestInternal.java
@@ -25,39 +25,48 @@ import java.util.List;
 
 public class LocationRequestInternal extends AutoSafeParcelable {
 
-    @SafeParceled(1000)
+    @Field(1000)
     private int versionCode = 1;
 
-    @SafeParceled(1)
+    @Field(1)
     public LocationRequest request;
 
-    @SafeParceled(2)
+    @Field(2) @Deprecated
     public boolean requestNlpDebugInfo;
 
-    @SafeParceled(3)
+    @Field(3) @Deprecated
     public boolean restorePendingIntentListeners;
 
-    @SafeParceled(4)
+    @Field(4) @Deprecated
     public boolean triggerUpdate;
 
-    @SafeParceled(value = 5, subClass = ClientIdentity.class)
+    @Field(value = 5, subClass = ClientIdentity.class)
     public List<ClientIdentity> clients;
 
-    @SafeParceled(6)
+    @Field(6)
     public String tag;
 
-    @SafeParceled(7)
+    @Field(7)
     public boolean hideFromAppOps;
 
-    @SafeParceled(8)
+    @Field(8)
     public boolean forceCoarseLocation;
 
-    @SafeParceled(9)
+    @Field(9)
     public boolean exemptFromThrottle;
 
-    @SafeParceled(10)
+    @Field(10)
     public String moduleId;
 
+    @Field(11)
+    public boolean locationSettingsIgnored;
+
+    @Field(12)
+    public boolean inaccurateLocationsDelayed;
+
+    @Field(13)
+    public String contextAttributeTag;
+
     @Override
     public String toString() {
         return "LocationRequestInternal{" +
@@ -71,6 +80,9 @@ public class LocationRequestInternal extends AutoSafeParcelable {
                 ", forceCoarseLocation=" + forceCoarseLocation +
                 ", exemptFromThrottle=" + exemptFromThrottle +
                 ", moduleId=" + moduleId +
+                ", locationSettingsIgnored=" + locationSettingsIgnored +
+                ", inaccurateLocationsDelayed=" + inaccurateLocationsDelayed +
+                ", contextAttributeTag=" + contextAttributeTag +
                 '}';
     }
 
diff --git a/play-services-location-core/build.gradle b/play-services-location-core/build.gradle
index bc36d2af..db9e8643 100644
--- a/play-services-location-core/build.gradle
+++ b/play-services-location-core/build.gradle
@@ -8,19 +8,16 @@ apply plugin: 'kotlin-android'
 
 dependencies {
     api project(':play-services-location-api')
+    implementation project(':play-services-base-core')
 
-    implementation "androidx.lifecycle:lifecycle-service:$lifecycleVersion"
+    runtimeOnly "org.microg.nlp:service:$nlpVersion"
+    api "org.microg.nlp:client:$nlpVersion"
 
-    implementation project(':play-services-base-core')
-    implementation "org.microg.nlp:geocode-v1:$nlpVersion"
-    implementation "org.microg.nlp:location-v2:$nlpVersion"
-    implementation "org.microg.nlp:location-v3:$nlpVersion"
-    implementation "org.microg.nlp:service:$nlpVersion"
     implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
     implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutineVersion"
     implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutineVersion"
-    api "org.microg.nlp:client:$nlpVersion"
-    api "org.microg.nlp:ui:$nlpVersion"
+    implementation "androidx.lifecycle:lifecycle-service:$lifecycleVersion"
+    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion"
 }
 
 android {
diff --git a/play-services-location-core/src/main/java/org/microg/gms/location/GoogleLocationManager.java b/play-services-location-core/src/main/java/org/microg/gms/location/GoogleLocationManager.java
index 0ad9e872..f8c5d04e 100644
--- a/play-services-location-core/src/main/java/org/microg/gms/location/GoogleLocationManager.java
+++ b/play-services-location-core/src/main/java/org/microg/gms/location/GoogleLocationManager.java
@@ -22,8 +22,12 @@ import android.content.Context;
 import android.location.Location;
 import android.location.LocationManager;
 import android.os.Binder;
+import android.os.Handler;
+import android.os.Looper;
 import android.os.RemoteException;
+import android.util.Log;
 
+import com.google.android.gms.common.api.Status;
 import com.google.android.gms.location.ILocationListener;
 import com.google.android.gms.location.LocationRequest;
 import com.google.android.gms.location.internal.FusedLocationProviderResult;
@@ -32,6 +36,7 @@ import com.google.android.gms.location.internal.LocationRequestUpdateData;
 import org.microg.gms.common.PackageUtils;
 import org.microg.gms.common.Utils;
 
+import java.io.PrintWriter;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -39,23 +44,28 @@ import static android.Manifest.permission.ACCESS_COARSE_LOCATION;
 import static android.Manifest.permission.ACCESS_FINE_LOCATION;
 import static android.content.pm.PackageManager.PERMISSION_GRANTED;
 import static android.location.LocationManager.GPS_PROVIDER;
-import static android.location.LocationManager.NETWORK_PROVIDER;
 import static com.google.android.gms.location.LocationRequest.PRIORITY_HIGH_ACCURACY;
 import static com.google.android.gms.location.LocationRequest.PRIORITY_NO_POWER;
 
+import androidx.lifecycle.Lifecycle;
+
 public class GoogleLocationManager implements LocationChangeListener {
-    private static final String TAG = "GmsLocManager";
+    private static final String TAG = "LocationManager";
     private static final String MOCK_PROVIDER = "mock";
+    private static final long VERIFY_CURRENT_REQUESTS_INTERVAL_MS = 5000; // 5 seconds
     private static final long SWITCH_ON_FRESHNESS_CLIFF_MS = 30000; // 30 seconds
     private static final String ACCESS_MOCK_LOCATION = "android.permission.ACCESS_MOCK_LOCATION";
 
     private final Context context;
+    private final Handler handler;
+    private final Runnable verifyCurrentRequestsRunnable = this::verifyCurrentRequests;
     private final RealLocationProvider gpsProvider;
     private final UnifiedLocationProvider networkProvider;
     private final MockLocationProvider mockProvider;
     private final List<LocationRequestHelper> currentRequests = new ArrayList<LocationRequestHelper>();
 
-    public GoogleLocationManager(Context context) {
+    public GoogleLocationManager(Context context, Lifecycle lifecycle) {
+        long callingIdentity = Binder.clearCallingIdentity();
         this.context = context;
         LocationManager locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);
         if (Utils.hasSelfPermissionOrNotify(context, Manifest.permission.ACCESS_FINE_LOCATION)) {
@@ -64,11 +74,13 @@ public class GoogleLocationManager implements LocationChangeListener {
             this.gpsProvider = null;
         }
         if (Utils.hasSelfPermissionOrNotify(context, Manifest.permission.ACCESS_COARSE_LOCATION)) {
-            this.networkProvider = new UnifiedLocationProvider(context, this);
+            this.networkProvider = new UnifiedLocationProvider(context, this, lifecycle);
         } else {
             this.networkProvider = null;
         }
         mockProvider = new MockLocationProvider(this);
+        handler = new Handler(Looper.getMainLooper());
+        Binder.restoreCallingIdentity(callingIdentity);
     }
 
     public void invokeOnceReady(Runnable runnable) {
@@ -134,19 +146,29 @@ public class GoogleLocationManager implements LocationChangeListener {
             }
         }
         if (old != null) {
+            Log.d(TAG, "Removing replaced location request: " + old);
             currentRequests.remove(old);
         }
         currentRequests.add(request);
         if (gpsProvider != null && request.hasFinePermission() && request.locationRequest.getPriority() == PRIORITY_HIGH_ACCURACY) {
+            Log.d(TAG, "Registering request with high accuracy location provider");
             gpsProvider.addRequest(request);
         } else if (gpsProvider != null && old != null) {
+            Log.d(TAG, "Unregistering request with high accuracy location provider");
             gpsProvider.removeRequest(old);
+        } else {
+            Log.w(TAG, "Not providing high accuracy location: missing permission");
         }
         if (networkProvider != null && request.hasCoarsePermission() && request.locationRequest.getPriority() != PRIORITY_NO_POWER) {
+            Log.d(TAG, "Registering request with low accuracy location provider");
             networkProvider.addRequest(request);
         } else if (networkProvider != null && old != null) {
+            Log.d(TAG, "Unregistering request with low accuracy location provider");
             networkProvider.removeRequest(old);
+        } else {
+            Log.w(TAG, "Not providing low accuracy location: missing permission");
         }
+        handler.postDelayed(this::onLocationChanged, request.locationRequest.getFastestInterval());
     }
 
     public void requestLocationUpdates(LocationRequest request, ILocationListener listener, String packageName) {
@@ -182,25 +204,41 @@ public class GoogleLocationManager implements LocationChangeListener {
     }
 
     public void updateLocationRequest(LocationRequestUpdateData data) {
-        String packageName = PackageUtils.getCallingPackage(context);
-        if (data.pendingIntent != null)
-            packageName = PackageUtils.packageFromPendingIntent(data.pendingIntent);
-        if (data.opCode == LocationRequestUpdateData.REQUEST_UPDATES) {
-            requestLocationUpdates(new LocationRequestHelper(context, packageName, Binder.getCallingUid(), data));
-        } else if (data.opCode == LocationRequestUpdateData.REMOVE_UPDATES) {
-            for (int i = 0; i < currentRequests.size(); i++) {
-                if (currentRequests.get(i).respondsTo(data.listener)
-                        || currentRequests.get(i).respondsTo(data.pendingIntent)
-                        || currentRequests.get(i).respondsTo(data.callback)) {
-                    removeLocationUpdates(currentRequests.get(i));
-                    i--;
+        try {
+            Log.d(TAG, "updateLocationRequest: " + data);
+            String packageName = PackageUtils.getCallingPackage(context);
+            if (data.pendingIntent != null)
+                packageName = PackageUtils.packageFromPendingIntent(data.pendingIntent);
+            Log.d(TAG, "Using source package: " + packageName);
+            if (data.opCode == LocationRequestUpdateData.REQUEST_UPDATES) {
+                requestLocationUpdates(new LocationRequestHelper(context, packageName, Binder.getCallingUid(), data));
+            } else if (data.opCode == LocationRequestUpdateData.REMOVE_UPDATES) {
+                for (int i = 0; i < currentRequests.size(); i++) {
+                    if (currentRequests.get(i).respondsTo(data.listener)
+                            || currentRequests.get(i).respondsTo(data.pendingIntent)
+                            || currentRequests.get(i).respondsTo(data.callback)) {
+                        removeLocationUpdates(currentRequests.get(i));
+                        i--;
+                    }
                 }
             }
-        }
-        if (data.fusedLocationProviderCallback != null) {
-            try {
-                data.fusedLocationProviderCallback.onFusedLocationProviderResult(FusedLocationProviderResult.SUCCESS);
-            } catch (RemoteException ignored) {
+            Log.d(TAG, "Updated current requests, verifying");
+            verifyCurrentRequests();
+            if (data.fusedLocationProviderCallback != null) {
+                try {
+                    Log.d(TAG, "Send success result to " + packageName);
+                    data.fusedLocationProviderCallback.onFusedLocationProviderResult(FusedLocationProviderResult.SUCCESS);
+                } catch (RemoteException ignored) {
+                }
+            }
+        } catch (Exception e) {
+            Log.w(TAG, "Exception in updateLocationRequest", e);
+            if (data.fusedLocationProviderCallback != null) {
+                try {
+                    Log.d(TAG, "Send internal error result");
+                    data.fusedLocationProviderCallback.onFusedLocationProviderResult(FusedLocationProviderResult.create(Status.INTERNAL_ERROR));
+                } catch (RemoteException ignored) {
+                }
             }
         }
     }
@@ -217,6 +255,22 @@ public class GoogleLocationManager implements LocationChangeListener {
         mockProvider.setLocation(mockLocation);
     }
 
+    private void verifyCurrentRequests() {
+        handler.removeCallbacks(verifyCurrentRequestsRunnable);
+        try {
+            for (int i = 0; i < currentRequests.size(); i++) {
+                LocationRequestHelper request = currentRequests.get(i);
+                if (!request.isActive()) {
+                    removeLocationUpdates(request);
+                    i--;
+                }
+            }
+        } catch (Exception e) {
+            Log.w(TAG, e);
+        }
+        handler.postDelayed(verifyCurrentRequestsRunnable, VERIFY_CURRENT_REQUESTS_INTERVAL_MS);
+    }
+
     @Override
     public void onLocationChanged() {
         for (int i = 0; i < currentRequests.size(); i++) {
@@ -227,4 +281,13 @@ public class GoogleLocationManager implements LocationChangeListener {
             }
         }
     }
+
+    public void dump(PrintWriter writer) {
+        if (gpsProvider != null) gpsProvider.dump(writer);
+        if (networkProvider != null) networkProvider.dump(writer);
+        writer.println(currentRequests.size() + " requests:");
+        for (LocationRequestHelper request : currentRequests) {
+            writer.println("  " + request.id + " package=" + request.packageName + " interval=" + request.locationRequest.getInterval() + " smallestDisplacement=" + request.locationRequest.getSmallestDisplacement());
+        }
+    }
 }
diff --git a/play-services-location-core/src/main/java/org/microg/gms/location/GoogleLocationManagerService.java b/play-services-location-core/src/main/java/org/microg/gms/location/GoogleLocationManagerService.java
index af6a3153..bf6c9870 100644
--- a/play-services-location-core/src/main/java/org/microg/gms/location/GoogleLocationManagerService.java
+++ b/play-services-location-core/src/main/java/org/microg/gms/location/GoogleLocationManagerService.java
@@ -27,11 +27,14 @@ import com.google.android.gms.common.internal.IGmsCallbacks;
 import org.microg.gms.BaseService;
 import org.microg.gms.common.GmsService;
 
+import java.io.FileDescriptor;
+import java.io.PrintWriter;
+
 public class GoogleLocationManagerService extends BaseService {
-    private GoogleLocationManagerServiceImpl impl = new GoogleLocationManagerServiceImpl(this);
+    private GoogleLocationManagerServiceImpl impl = new GoogleLocationManagerServiceImpl(this, getLifecycle());
 
     public GoogleLocationManagerService() {
-        super("GmsLocManagerSvc", GmsService.LOCATION_MANAGER, GmsService.GEODATA, GmsService.PLACE_DETECTION);
+        super("LocationManager", GmsService.LOCATION_MANAGER, GmsService.GEODATA, GmsService.PLACE_DETECTION);
     }
 
     @Override
@@ -49,4 +52,9 @@ public class GoogleLocationManagerService extends BaseService {
             }
         });
     }
+
+    @Override
+    protected void dump(FileDescriptor fd, PrintWriter writer, String[] args) {
+        impl.getLocationManager().dump(writer);
+    }
 }
diff --git a/play-services-location-core/src/main/java/org/microg/gms/location/GoogleLocationManagerServiceImpl.java b/play-services-location-core/src/main/java/org/microg/gms/location/GoogleLocationManagerServiceImpl.java
index b4315769..8169a4c7 100644
--- a/play-services-location-core/src/main/java/org/microg/gms/location/GoogleLocationManagerServiceImpl.java
+++ b/play-services-location-core/src/main/java/org/microg/gms/location/GoogleLocationManagerServiceImpl.java
@@ -20,12 +20,19 @@ import android.app.PendingIntent;
 import android.content.Context;
 import android.location.Location;
 import android.os.Binder;
+import android.os.Handler;
 import android.os.IBinder;
+import android.os.Looper;
 import android.os.Parcel;
 import android.os.RemoteException;
 import android.util.Log;
 
+import androidx.annotation.NonNull;
+import androidx.lifecycle.Lifecycle;
+import androidx.lifecycle.LifecycleOwner;
+
 import com.google.android.gms.common.api.Status;
+import com.google.android.gms.common.api.internal.IStatusCallback;
 import com.google.android.gms.location.ActivityRecognitionResult;
 import com.google.android.gms.location.GeofencingRequest;
 import com.google.android.gms.location.GestureRequest;
@@ -35,6 +42,7 @@ import com.google.android.gms.location.LocationRequest;
 import com.google.android.gms.location.LocationSettingsRequest;
 import com.google.android.gms.location.LocationSettingsResult;
 import com.google.android.gms.location.LocationSettingsStates;
+import com.google.android.gms.location.internal.DeviceOrientationRequestUpdateData;
 import com.google.android.gms.location.internal.IGeofencerCallbacks;
 import com.google.android.gms.location.internal.IGoogleLocationManagerService;
 import com.google.android.gms.location.internal.ISettingsCallbacks;
@@ -58,23 +66,31 @@ import org.microg.gms.common.PackageUtils;
 import java.util.Arrays;
 import java.util.List;
 
-public class GoogleLocationManagerServiceImpl extends IGoogleLocationManagerService.Stub {
+public class GoogleLocationManagerServiceImpl extends IGoogleLocationManagerService.Stub implements LifecycleOwner {
     private static final String TAG = "GmsLocManagerSvcImpl";
 
     private final Context context;
+    private final Lifecycle lifecycle;
     private GoogleLocationManager locationManager;
 
-    public GoogleLocationManagerServiceImpl(Context context) {
+    public GoogleLocationManagerServiceImpl(Context context, Lifecycle lifecycle) {
         this.context = context;
+        this.lifecycle = lifecycle;
+    }
+
+    @NonNull
+    @Override
+    public Lifecycle getLifecycle() {
+        return lifecycle;
     }
 
     public void invokeOnceReady(Runnable runnable) {
         getLocationManager().invokeOnceReady(runnable);
     }
 
-    private GoogleLocationManager getLocationManager() {
+    public synchronized GoogleLocationManager getLocationManager() {
         if (locationManager == null)
-            locationManager = new GoogleLocationManager(context);
+            locationManager = new GoogleLocationManager(context, lifecycle);
         return locationManager;
     }
 
@@ -123,18 +139,6 @@ public class GoogleLocationManagerServiceImpl extends IGoogleLocationManagerServ
         return null;
     }
 
-    @Override
-    public Status iglms65(PendingIntent pendingIntent) throws RemoteException {
-        Log.d(TAG, "iglms65");
-        return null;
-    }
-
-    @Override
-    public Status iglms66(PendingIntent pendingIntent) throws RemoteException {
-        Log.d(TAG, "iglms66");
-        return null;
-    }
-
     @Override
     public Status requestGestureUpdates(GestureRequest request, PendingIntent pendingIntent) throws RemoteException {
         Log.d(TAG, "requestGestureUpdates");
@@ -199,6 +203,11 @@ public class GoogleLocationManagerServiceImpl extends IGoogleLocationManagerServ
         getLocationManager().setMockLocation(mockLocation);
     }
 
+    @Override
+    public void injectLocation(Location mockLocation, int injectionType) throws RemoteException {
+        Log.d(TAG, "injectLocation[" + injectionType + "]: " + mockLocation);
+    }
+
     @Override
     public void iglms14(LatLngBounds var1, int var2, PlaceFilter var3, PlacesParams var4,
                         IPlacesCallbacks var5) throws RemoteException {
@@ -250,13 +259,14 @@ public class GoogleLocationManagerServiceImpl extends IGoogleLocationManagerServ
     }
 
     @Override
-    public void iglms25(PlaceReport var1, PlacesParams var2) throws RemoteException {
-        Log.d(TAG, "iglms25: " + var1);
+    public Location getLastLocationWith(String s) throws RemoteException {
+        Log.d(TAG, "getLastLocationWith: " + s);
+        return getLastLocation();
     }
 
     @Override
-    public void iglms26(Location var1, int var2) throws RemoteException {
-        Log.d(TAG, "iglms26: " + var1);
+    public void iglms25(PlaceReport var1, PlacesParams var2) throws RemoteException {
+        Log.d(TAG, "iglms25: " + var1);
     }
 
     @Override
@@ -266,6 +276,11 @@ public class GoogleLocationManagerServiceImpl extends IGoogleLocationManagerServ
         return new LocationAvailability();
     }
 
+    @Override
+    public void removeSleepSegmentUpdates(PendingIntent pendingIntent, IStatusCallback callback) throws RemoteException {
+        Log.d(TAG, "removeSleepSegmentUpdates");
+    }
+
     @Override
     public void iglms42(String var1, PlacesParams var2, IPlacesCallbacks var3)
             throws RemoteException {
@@ -311,7 +326,29 @@ public class GoogleLocationManagerServiceImpl extends IGoogleLocationManagerServ
     public void requestLocationSettingsDialog(LocationSettingsRequest settingsRequest, ISettingsCallbacks callback, String packageName) throws RemoteException {
         Log.d(TAG, "requestLocationSettingsDialog: " + settingsRequest);
         PackageUtils.getAndCheckCallingPackage(context, packageName);
-        callback.onLocationSettingsResult(new LocationSettingsResult(new LocationSettingsStates(true, true, false, true, true, false), Status.SUCCESS));
+        (new Handler(Looper.getMainLooper())).post(() -> {
+            try {
+                callback.onLocationSettingsResult(new LocationSettingsResult(new LocationSettingsStates(true, true, true, true, true, true), Status.SUCCESS));
+            } catch (RemoteException e) {
+                Log.w(TAG, e);
+            }
+        });
+    }
+
+    @Override
+    public void removeActivityTransitionUpdates(PendingIntent pendingIntent, IStatusCallback callback) throws RemoteException {
+        Log.d(TAG, "removeActivityTransitionUpdates");
+    }
+
+    @Override
+    public void updateDeviceOrientationRequest(DeviceOrientationRequestUpdateData request) throws RemoteException {
+        Log.d(TAG, "updateDeviceOrientationRequest: " + request);
+    }
+
+    @Override
+    public boolean setActivityRecognitionMode(int mode) throws RemoteException {
+        Log.d(TAG, "setActivityRecognitionMode: " + mode);
+        return false;
     }
 
     @Override
@@ -352,6 +389,37 @@ public class GoogleLocationManagerServiceImpl extends IGoogleLocationManagerServ
         Log.d(TAG, "iglms58: " + var1);
     }
 
+    @Override
+    public void iglms65(PendingIntent pendingIntent, IStatusCallback callback) throws RemoteException {
+        Log.d(TAG, "iglms65");
+    }
+
+    @Override
+    public void iglms66(PendingIntent pendingIntent, IStatusCallback callback) throws RemoteException {
+        Log.d(TAG, "iglms66");
+    }
+
+    @Override
+    public void iglms68(PendingIntent pendingIntent, IStatusCallback callback) throws RemoteException {
+        Log.d(TAG, "iglms68");
+    }
+
+    @Override
+    public void iglms71(IStatusCallback callback) throws RemoteException {
+        Log.d(TAG, "iglms71");
+    }
+
+    @Override
+    public void iglms76(PendingIntent pendingIntent) throws RemoteException {
+        Log.d(TAG, "iglms76");
+    }
+
+    @Override
+    public int iglms78() throws RemoteException {
+        Log.d(TAG, "iglms78");
+        return 0;
+    }
+
     @Override
     public boolean onTransact(int code, Parcel data, Parcel reply, int flags) throws RemoteException {
         if (super.onTransact(code, data, reply, flags)) return true;
diff --git a/play-services-location-core/src/main/java/org/microg/gms/location/LocationRequestHelper.java b/play-services-location-core/src/main/java/org/microg/gms/location/LocationRequestHelper.java
index ad67ae31..6fdae8d6 100644
--- a/play-services-location-core/src/main/java/org/microg/gms/location/LocationRequestHelper.java
+++ b/play-services-location-core/src/main/java/org/microg/gms/location/LocationRequestHelper.java
@@ -17,7 +17,6 @@
 package org.microg.gms.location;
 
 import android.annotation.TargetApi;
-import android.app.ActivityManager;
 import android.app.AppOpsManager;
 import android.app.PendingIntent;
 import android.content.Context;
@@ -35,12 +34,9 @@ import com.google.android.gms.location.LocationRequest;
 import com.google.android.gms.location.LocationResult;
 import com.google.android.gms.location.internal.LocationRequestUpdateData;
 
-import org.microg.gms.common.PackageUtils;
-
 import java.util.Arrays;
-import java.util.List;
+import java.util.UUID;
 
-import static android.Manifest.permission.ACCESS_BACKGROUND_LOCATION;
 import static android.Manifest.permission.ACCESS_COARSE_LOCATION;
 import static android.Manifest.permission.ACCESS_FINE_LOCATION;
 
@@ -56,6 +52,7 @@ public class LocationRequestHelper {
     public ILocationListener listener;
     public PendingIntent pendingIntent;
     public ILocationCallback callback;
+    public String id = UUID.randomUUID().toString();
 
     private Location lastReport;
     private int numReports = 0;
@@ -89,17 +86,41 @@ public class LocationRequestHelper {
         this.callback = data.callback;
     }
 
+    public boolean isActive() {
+        if (!hasCoarsePermission()) return false;
+        if (listener != null) {
+            try {
+                return listener.asBinder().isBinderAlive();
+            } catch (Exception e) {
+                return false;
+            }
+        } else if (pendingIntent != null) {
+            return true;
+        } else if (callback != null) {
+            try {
+                return callback.asBinder().isBinderAlive();
+            } catch (Exception e) {
+                return false;
+            }
+        } else {
+            return false;
+        }
+    }
+
     /**
      * @return whether to continue sending reports to this {@link LocationRequestHelper}
      */
     public boolean report(Location location) {
         if (location == null) return true;
-        if (!hasCoarsePermission()) return false;
+        if (!isActive()) return false;
         if (lastReport != null) {
+            if (location.equals(lastReport)) {
+                return true;
+            }
             if (location.getTime() - lastReport.getTime() < locationRequest.getFastestInterval()) {
                 return true;
             }
-            if (location.distanceTo(lastReport) < locationRequest.getSmallestDesplacement()) {
+            if (location.distanceTo(lastReport) < locationRequest.getSmallestDisplacement()) {
                 return true;
             }
         }
diff --git a/play-services-location-core/src/main/java/org/microg/gms/location/RealLocationProvider.java b/play-services-location-core/src/main/java/org/microg/gms/location/RealLocationProvider.java
index 98e1947a..cb4fd496 100644
--- a/play-services-location-core/src/main/java/org/microg/gms/location/RealLocationProvider.java
+++ b/play-services-location-core/src/main/java/org/microg/gms/location/RealLocationProvider.java
@@ -23,6 +23,7 @@ import android.os.Bundle;
 import android.os.Looper;
 import android.util.Log;
 
+import java.io.PrintWriter;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -44,7 +45,12 @@ public class RealLocationProvider {
     private LocationListener listener = new LocationListener() {
         @Override
         public void onLocationChanged(Location location) {
-            lastLocation = location;
+            lastLocation = new Location(location);
+            try {
+                lastLocation.getExtras().keySet(); // call to unparcel()
+            } catch (Exception e) {
+                // Sometimes we need to define the correct ClassLoader before unparcel(). Ignore those.
+            }
             changeListener.onLocationChanged();
         }
 
@@ -121,7 +127,7 @@ public class RealLocationProvider {
             StringBuilder sb = new StringBuilder();
             for (LocationRequestHelper request : requests) {
                 minTime = Math.min(request.locationRequest.getInterval(), minTime);
-                minDistance = Math.min(request.locationRequest.getSmallestDesplacement(), minDistance);
+                minDistance = Math.min(request.locationRequest.getSmallestDisplacement(), minDistance);
                 if (sb.length() != 0) sb.append(", ");
                 sb.append(request.packageName).append(":").append(request.locationRequest.getInterval()).append("ms");
             }
@@ -146,4 +152,16 @@ public class RealLocationProvider {
             connectedMinDistance = minDistance;
         }
     }
+
+    public void dump(PrintWriter writer) {
+        if (writer != null) {
+            writer.println(name + " provider:");
+            writer.println("  last location: " + lastLocation);
+            writer.println("  active: " + connected.get());
+            if (connected.get()) {
+                writer.println("  interval: " + connectedMinTime);
+                writer.println("  distance: " + connectedMinDistance);
+            }
+        }
+    }
 }
diff --git a/play-services-location-core/src/main/java/org/microg/gms/location/ReportingServiceImpl.java b/play-services-location-core/src/main/java/org/microg/gms/location/ReportingServiceImpl.java
index c091cbde..f369f84e 100644
--- a/play-services-location-core/src/main/java/org/microg/gms/location/ReportingServiceImpl.java
+++ b/play-services-location-core/src/main/java/org/microg/gms/location/ReportingServiceImpl.java
@@ -17,6 +17,7 @@
 package org.microg.gms.location;
 
 import android.accounts.Account;
+import android.os.Parcel;
 import android.os.RemoteException;
 import android.util.Log;
 
@@ -58,4 +59,15 @@ public class ReportingServiceImpl extends IReportingService.Stub {
         Log.d(TAG, "reportDeviceAtPlace");
         return 0;
     }
+
+
+    @Override
+    public boolean onTransact(int code, Parcel data, Parcel reply, int flags) throws RemoteException {
+        if (super.onTransact(code, data, reply, flags)) {
+            return true;
+        }
+
+        Log.d(TAG, "onTransact [unknown]: " + code + ", " + data + ", " + flags);
+        return false;
+    }
 }
diff --git a/play-services-location-core/src/main/java/org/microg/gms/location/UnifiedLocationProvider.kt b/play-services-location-core/src/main/java/org/microg/gms/location/UnifiedLocationProvider.kt
index e56e6c9f..f4df00fa 100644
--- a/play-services-location-core/src/main/java/org/microg/gms/location/UnifiedLocationProvider.kt
+++ b/play-services-location-core/src/main/java/org/microg/gms/location/UnifiedLocationProvider.kt
@@ -2,32 +2,54 @@ package org.microg.gms.location
 
 import android.content.Context
 import android.location.Location
+import android.os.Bundle
 import android.util.Log
-import kotlinx.coroutines.Dispatchers
-import kotlinx.coroutines.GlobalScope
-import kotlinx.coroutines.launch
-import org.microg.nlp.client.UnifiedLocationClient
+import androidx.lifecycle.Lifecycle
+import androidx.lifecycle.LifecycleOwner
+import androidx.lifecycle.lifecycleScope
+import kotlinx.coroutines.sync.Mutex
+import kotlinx.coroutines.sync.withLock
+import org.microg.nlp.client.LocationClient
+import org.microg.nlp.service.api.Constants
+import org.microg.nlp.service.api.ILocationListener
+import org.microg.nlp.service.api.LocationRequest
+import java.io.PrintWriter
+import java.lang.Exception
 import java.util.*
-import java.util.concurrent.atomic.AtomicBoolean
+import kotlin.collections.ArrayList
 
-class UnifiedLocationProvider(context: Context?, changeListener: LocationChangeListener) {
-    private val client: UnifiedLocationClient
-    private var connectedMinTime: Long = 0
+class UnifiedLocationProvider(private val context: Context, private val changeListener: LocationChangeListener, private val lifecycle: Lifecycle): LifecycleOwner {
+    private val client: LocationClient = LocationClient(context, lifecycle)
     private var lastLocation: Location? = null
-    private val connected = AtomicBoolean(false)
-    private val changeListener: LocationChangeListener
     private val requests: MutableList<LocationRequestHelper> = ArrayList()
-    private val listener: UnifiedLocationClient.LocationListener = object : UnifiedLocationClient.LocationListener {
-        override fun onLocation(location: Location) {
-            lastLocation = location
-            changeListener.onLocationChanged()
+    private val activeRequestIds = hashSetOf<String>()
+    private val activeRequestMutex = Mutex(false)
+    private val listener: ILocationListener = object : ILocationListener.Stub() {
+        override fun onLocation(statusCode: Int, location: Location?) {
+            if (statusCode == Constants.STATUS_OK && location != null) {
+                lastLocation = Location(location)
+                try {
+                    for (key in lastLocation?.extras?.keySet()?.toList().orEmpty()) {
+                        if (key?.startsWith("org.microg.nlp.") == true) {
+                            lastLocation?.extras?.remove(key)
+                        }
+                    }
+                } catch (e:Exception){
+                    // Sometimes we need to define the correct ClassLoader before unparcel(). Ignore those.
+                }
+                changeListener.onLocationChanged()
+            }
         }
     }
     private var ready = false
     private val invokeOnceReady = hashSetOf<Runnable>()
 
+    init {
+        updateLastLocation()
+    }
+
     private fun updateLastLocation() {
-        GlobalScope.launch(Dispatchers.Main) {
+        lifecycleScope.launchWhenStarted {
             Log.d(TAG, "unified network: requesting last location")
             val lastLocation = client.getLastLocation()
             Log.d(TAG, "unified network: got last location: $lastLocation")
@@ -78,39 +100,40 @@ class UnifiedLocationProvider(context: Context?, changeListener: LocationChangeL
 
     @Synchronized
     private fun updateConnection() {
-        if (connected.get() && requests.isEmpty()) {
-            Log.d(TAG, "unified network: no longer requesting location update")
-            client.removeLocationUpdates(listener)
-            connected.set(false)
-        } else if (!requests.isEmpty()) {
-            var minTime = Long.MAX_VALUE
-            val sb = StringBuilder()
-            var opPackageName: String? = null
-            for (request in requests) {
-                if (request.locationRequest.interval < minTime) {
-                    opPackageName = request.packageName
-                    minTime = request.locationRequest.interval
+        lifecycleScope.launchWhenStarted {
+            activeRequestMutex.withLock {
+                if (activeRequestIds.isNotEmpty() && requests.isEmpty()) {
+                    Log.d(TAG, "unified network: no longer requesting location update")
+                    for (id in activeRequestIds) {
+                        client.cancelLocationRequestById(id)
+                    }
+                    activeRequestIds.clear()
+                } else if (requests.isNotEmpty()) {
+                    val requests = ArrayList(requests).filter { it.isActive }
+                    for (id in activeRequestIds.filter { id -> requests.none { it.id == id } }) {
+                        client.cancelLocationRequestById(id)
+                    }
+                    for (request in requests.filter { it.id !in activeRequestIds }) {
+                        client.updateLocationRequest(LocationRequest(listener, request.locationRequest.interval, request.locationRequest.numUpdates, request.id), Bundle().apply {
+                            putString("packageName", request.packageName)
+                            putString("source", "GoogleLocationManager")
+                        })
+                        activeRequestIds.add(request.id)
+                    }
                 }
-                if (sb.isNotEmpty()) sb.append(", ")
-                sb.append("${request.packageName}:${request.locationRequest.interval}ms")
-            }
-            client.opPackageName = opPackageName
-            Log.d(TAG, "unified network: requesting location updates with interval ${minTime}ms ($sb)")
-            if (!connected.get() || connectedMinTime != minTime) {
-                client.requestLocationUpdates(listener, minTime)
             }
-            connected.set(true)
-            connectedMinTime = minTime
         }
     }
 
-    companion object {
-        const val TAG = "GmsLocProviderU"
+    override fun getLifecycle(): Lifecycle = lifecycle
+
+    fun dump(writer: PrintWriter) {
+        writer.println("network provider (via direct client):")
+        writer.println("  last location: $lastLocation")
+        writer.println("  ready: $ready")
     }
 
-    init {
-        client = UnifiedLocationClient[context!!]
-        this.changeListener = changeListener
-        updateLastLocation()
+    companion object {
+        const val TAG = "GmsLocProviderU"
     }
 }
diff --git a/play-services-location/build.gradle b/play-services-location/build.gradle
index 57f5027b..437a774b 100644
--- a/play-services-location/build.gradle
+++ b/play-services-location/build.gradle
@@ -1,17 +1,6 @@
 /*
- * Copyright 2013-2015 microG Project Team
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * SPDX-FileCopyrightText: 2015 microG Project Team
+ * SPDX-License-Identifier: Apache-2.0
  */
 
 apply plugin: 'com.android.library'
@@ -42,8 +31,11 @@ android {
 }
 
 dependencies {
-    api project(':play-services-base')
     api project(':play-services-location-api')
 
-    implementation 'androidx.annotation:annotation:1.1.0'
+    // Dependencies from play-services-location:19.0.1
+    api project(':play-services-base')
+    api project(':play-services-basement')
+    //api project(':play-services-places-placereport')
+    api project(':play-services-tasks')
 }
diff --git a/play-services-location/src/main/java/org/microg/gms/location/NativeLocationClientImpl.java b/play-services-location/src/main/java/org/microg/gms/location/NativeLocationClientImpl.java
index 17a017d9..78e0cd50 100644
--- a/play-services-location/src/main/java/org/microg/gms/location/NativeLocationClientImpl.java
+++ b/play-services-location/src/main/java/org/microg/gms/location/NativeLocationClientImpl.java
@@ -135,7 +135,7 @@ public class NativeLocationClientImpl {
         i.putExtras(bundle);
         pendingCount.put(pendingIntent, request.getNumUpdates());
         nativePendingMap.put(pendingIntent, PendingIntent.getActivity(context, 0, i, 0));
-        locationManager.requestLocationUpdates(request.getInterval(), request.getSmallestDesplacement(),
+        locationManager.requestLocationUpdates(request.getInterval(), request.getSmallestDisplacement(),
                 makeNativeCriteria(request), nativePendingMap.get(pendingIntent));
     }
 
@@ -147,7 +147,7 @@ public class NativeLocationClientImpl {
         }
         nativeListenerMap.put(listener, new NativeListener(listener, request.getNumUpdates()));
         locationManager.requestLocationUpdates(request.getInterval(),
-                request.getSmallestDesplacement(), makeNativeCriteria(request),
+                request.getSmallestDisplacement(), makeNativeCriteria(request),
                 nativeListenerMap.get(listener), looper);
     }
 
diff --git a/play-services-maps-core-mapbox/src/main/kotlin/org/microg/gms/maps/mapbox/model/Polygon.kt b/play-services-maps-core-mapbox/src/main/kotlin/org/microg/gms/maps/mapbox/model/Polygon.kt
index e3d0d5ea..4177f286 100644
--- a/play-services-maps-core-mapbox/src/main/kotlin/org/microg/gms/maps/mapbox/model/Polygon.kt
+++ b/play-services-maps-core-mapbox/src/main/kotlin/org/microg/gms/maps/mapbox/model/Polygon.kt
@@ -1,17 +1,6 @@
 /*
- * Copyright (C) 2019 microG Project Team
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * SPDX-FileCopyrightText: 2019 microG Project Team
+ * SPDX-License-Identifier: Apache-2.0
  */
 
 package org.microg.gms.maps.mapbox.model
@@ -80,7 +69,11 @@ class PolygonImpl(private val map: GoogleMapImpl, private val id: String, option
         }
         strokes.forEachIndexed { idx, it -> if (idx > 0) it.points = this.holes[idx - 1] }
         if (this.holes.size + 1 > strokes.size) {
-            strokes.addAll(this.holes.subList(strokes.size, this.holes.size - 1).mapIndexed { idx, it -> PolylineImpl(map, "$id-stroke-hole-${strokes.size + idx}", PolylineOptions().color(strokeColor).width(strokeWidth).addAll(it)) })
+            try {
+                strokes.addAll(this.holes.subList(strokes.size, this.holes.size - 1).mapIndexed { idx, it -> PolylineImpl(map, "$id-stroke-hole-${strokes.size + idx}", PolylineOptions().color(strokeColor).width(strokeWidth).addAll(it)) })
+            } catch (e: Exception) {
+                Log.w(TAG, e)
+            }
         }
         map.fillManager?.let { update(it) }
     }
@@ -164,4 +157,4 @@ class PolygonImpl(private val map: GoogleMapImpl, private val id: String, option
     companion object {
         private val TAG = "GmsMapPolygon"
     }
-}
\ No newline at end of file
+}
diff --git a/play-services-maps-core-vtm/vtm-microg-theme/build.gradle b/play-services-maps-core-vtm/vtm-microg-theme/build.gradle
index 3304c9a0..8fcb9bba 100644
--- a/play-services-maps-core-vtm/vtm-microg-theme/build.gradle
+++ b/play-services-maps-core-vtm/vtm-microg-theme/build.gradle
@@ -1,11 +1,16 @@
 apply plugin: 'java'
-apply plugin: 'maven'
 
 dependencies {
-    compile "org.microg:vtm:0.9.1-mod"
+    implementation "org.microg:vtm:0.9.1-mod"
 }
 
 sourceSets {
-    main.java.srcDirs = ['src']
-    main.resources.srcDirs = ['resources']
+    main {
+        java {
+            srcDir 'src'
+        }
+        resources {
+            srcDir 'resources'
+        }
+    }
 }
diff --git a/play-services-nearby-core-ui/src/main/kotlin/org/microg/gms/nearby/core/ui/DotChartView.kt b/play-services-nearby-core-ui/src/main/kotlin/org/microg/gms/nearby/core/ui/DotChartView.kt
index 0ceb71e0..ca8f752e 100644
--- a/play-services-nearby-core-ui/src/main/kotlin/org/microg/gms/nearby/core/ui/DotChartView.kt
+++ b/play-services-nearby-core-ui/src/main/kotlin/org/microg/gms/nearby/core/ui/DotChartView.kt
@@ -11,7 +11,9 @@ import android.content.Context
 import android.graphics.*
 import android.os.Build
 import android.text.format.DateFormat
+import android.text.format.DateUtils
 import android.util.AttributeSet
+import android.util.Log
 import android.view.MotionEvent
 import android.view.View
 import org.microg.gms.nearby.exposurenotification.ExposureScanSummary
@@ -40,12 +42,13 @@ class DotChartView : View {
             val dateFormat = DateFormat.getMediumDateFormat(context)
             val hourFormat = SimpleDateFormat("H")
             val lowest = dateFormat.parse(dateFormat.format(date))?.time ?: date.time
+            fun formatDateForView(date: Date) = DateUtils.formatDateTime(context, date.time, DateUtils.FORMAT_ABBREV_MONTH or DateUtils.FORMAT_NO_YEAR)
             for (day in 0 until 15) {
                 date.time = now - (14 - day) * 24 * 60 * 60 * 1000L
-                displayData[day] = dateFormat.format(date) to hashMapOf()
+                displayData[day] = formatDateForView(date) to hashMapOf()
             }
             fun dayByDate(date: Date) : Int? {
-                val dateString = dateFormat.format(date)
+                val dateString = formatDateForView(date)
                 return displayData.entries.firstOrNull { it.value.first == dateString }?.key
             }
             if (value != null) {
@@ -113,8 +116,8 @@ class DotChartView : View {
             maxTextHeight = max(maxTextHeight, fontTempRect.height())
         }
 
-        val legendLeft = maxTextWidth + 4 * d
-        val legendBottom = maxTextHeight + 4 * d
+        val legendLeft = max(56 * d, maxTextWidth + 8 * d)
+        val legendBottom = maxTextHeight + 8 * d
         val subHeight = maxTextHeight + 4 * d + paddingBottom
 
         val distHeight = (height - innerPadding * 14 - paddingTop - paddingBottom - legendBottom - subHeight).toDouble()
@@ -134,7 +137,7 @@ class DotChartView : View {
             val (dateString, hours) = displayData[day] ?: "" to emptyMap()
             val top = day * (perHeight + innerPadding) + paddingTop
             if (day % 2 == 0) {
-                canvas.drawText(dateString, (paddingLeft + legendLeft - 4 * d), (top + perHeight / 2.0 + maxTextHeight / 2.0).toFloat(), fontPaint)
+                canvas.drawText(dateString, (paddingLeft + legendLeft - 8 * d), (top + perHeight / 2.0 + maxTextHeight / 2.0).toFloat(), fontPaint)
             }
             focusPoint?.let { if (it.y > top && it.y < top + perHeight) focusDay = day }
             for (hour in 0 until 24) {
@@ -162,7 +165,7 @@ class DotChartView : View {
                 }
             }
         }
-        val legendTop = 15 * (perHeight + innerPadding) + paddingTop + maxTextHeight + 4 * d
+        val legendTop = 15 * (perHeight + innerPadding) + paddingTop + maxTextHeight + 8 * d
         fontPaint.textAlign = Paint.Align.CENTER
         for (hour in 0 until 24) {
             if (hour % 3 == 0) {
diff --git a/play-services-nearby-core-ui/src/main/kotlin/org/microg/gms/nearby/core/ui/ExposureNotificationsAppFragment.kt b/play-services-nearby-core-ui/src/main/kotlin/org/microg/gms/nearby/core/ui/ExposureNotificationsAppFragment.kt
index 15e95ad0..c2f1ce70 100644
--- a/play-services-nearby-core-ui/src/main/kotlin/org/microg/gms/nearby/core/ui/ExposureNotificationsAppFragment.kt
+++ b/play-services-nearby-core-ui/src/main/kotlin/org/microg/gms/nearby/core/ui/ExposureNotificationsAppFragment.kt
@@ -40,13 +40,13 @@ class ExposureNotificationsAppFragment : Fragment(R.layout.exposure_notification
 
     override fun onResume() {
         super.onResume()
-        val appContext = requireContext().applicationContext
+        val context = requireContext()
         lifecycleScope.launchWhenResumed {
-            val pm = appContext.packageManager
+            val pm = context.packageManager
             val applicationInfo = pm.getApplicationInfoIfExists(packageName)
             binding.appName = applicationInfo?.loadLabel(pm)?.toString() ?: packageName
             binding.appIcon = applicationInfo?.loadIcon(pm)
-                    ?: AppCompatResources.getDrawable(appContext, android.R.mipmap.sym_def_app_icon)
+                    ?: AppCompatResources.getDrawable(context, android.R.mipmap.sym_def_app_icon)
         }
     }
 }
diff --git a/play-services-nearby-core-ui/src/main/kotlin/org/microg/gms/nearby/core/ui/ExposureNotificationsConfirmActivity.kt b/play-services-nearby-core-ui/src/main/kotlin/org/microg/gms/nearby/core/ui/ExposureNotificationsConfirmActivity.kt
index dc106094..d2b831a6 100644
--- a/play-services-nearby-core-ui/src/main/kotlin/org/microg/gms/nearby/core/ui/ExposureNotificationsConfirmActivity.kt
+++ b/play-services-nearby-core-ui/src/main/kotlin/org/microg/gms/nearby/core/ui/ExposureNotificationsConfirmActivity.kt
@@ -82,6 +82,9 @@ class ExposureNotificationsConfirmActivity : AppCompatActivity() {
         findViewById<Button>(R.id.grant_permission_button).setOnClickListener {
             requestPermissions()
         }
+        findViewById<Button>(R.id.grant_background_location_button).setOnClickListener {
+            requestBackgroundLocation()
+        }
         findViewById<Button>(R.id.enable_bluetooth_button).setOnClickListener {
             requestBluetooth()
         }
@@ -98,46 +101,87 @@ class ExposureNotificationsConfirmActivity : AppCompatActivity() {
     }
 
     private fun updateButton() {
-        findViewById<Button>(android.R.id.button1).isEnabled = !permissionNeedsHandling && !bluetoothNeedsHandling && !locationNeedsHandling
+        findViewById<Button>(android.R.id.button1).isEnabled =
+            !permissionNeedsHandling && !backgroundLocationNeedsHandling && !bluetoothNeedsHandling && !locationNeedsHandling
     }
 
     // Permissions
     private var permissionNeedsHandling: Boolean = false
+    private var backgroundLocationNeedsHandling: Boolean = false
     private var permissionRequestCode = 33
     private val permissions by lazy {
-        if (Build.VERSION.SDK_INT >= 29) {
-            arrayOf("android.permission.ACCESS_BACKGROUND_LOCATION", "android.permission.ACCESS_COARSE_LOCATION", "android.permission.ACCESS_FINE_LOCATION")
-        } else {
-            arrayOf("android.permission.ACCESS_COARSE_LOCATION", "android.permission.ACCESS_FINE_LOCATION")
+        when {
+            Build.VERSION.SDK_INT >= 31 -> {
+                // We shouldn't be needing the LOCATION permissions on 31+ anymore, at least when
+                // apps making use of this target 31+ as well, but this needs more testing. See
+                // https://developer.android.com/guide/topics/connectivity/bluetooth/permissions#assert-never-for-location
+                arrayOf(
+                    "android.permission.BLUETOOTH_ADVERTISE",
+                    "android.permission.BLUETOOTH_SCAN",
+                    "android.permission.ACCESS_COARSE_LOCATION",
+                    "android.permission.ACCESS_FINE_LOCATION"
+                )
+            }
+            Build.VERSION.SDK_INT == 29 -> {
+                // We only can directly request background location permission on 29.
+                // We need it on 30 (and possibly later) as well, but it has to be requested in a two
+                // step process, see https://fosstodon.org/@utf8equalsX/104359649537615235
+                arrayOf(
+                    "android.permission.ACCESS_BACKGROUND_LOCATION",
+                    "android.permission.ACCESS_COARSE_LOCATION",
+                    "android.permission.ACCESS_FINE_LOCATION"
+                )
+            }
+            else -> {
+                // Below 29 or equals 30
+                arrayOf(
+                    "android.permission.ACCESS_COARSE_LOCATION",
+                    "android.permission.ACCESS_FINE_LOCATION"
+                )
+            }
         }
     }
+
     private fun checkPermissions() {
-        permissionNeedsHandling = Build.VERSION.SDK_INT >= 23 && permissions.any { ContextCompat.checkSelfPermission(this, it) != PackageManager.PERMISSION_GRANTED }
-        findViewById<View>(R.id.grant_permission_view).visibility = if (permissionNeedsHandling) View.VISIBLE else View.GONE
+        permissionNeedsHandling = Build.VERSION.SDK_INT >= 23 && permissions.any {
+            ContextCompat.checkSelfPermission(
+                this,
+                it
+            ) != PackageManager.PERMISSION_GRANTED
+        }
+
+        backgroundLocationNeedsHandling = Build.VERSION.SDK_INT >= 30
+                && ContextCompat.checkSelfPermission(
+            this,
+            "android.permission.ACCESS_FINE_LOCATION"
+        ) == PackageManager.PERMISSION_GRANTED
+                && ContextCompat.checkSelfPermission(
+            this,
+            "android.permission.ACCESS_BACKGROUND_LOCATION"
+        ) != PackageManager.PERMISSION_GRANTED
+
+        findViewById<View>(R.id.grant_permission_view).visibility =
+            if (permissionNeedsHandling) View.VISIBLE else View.GONE
+        findViewById<View>(R.id.grant_background_location_view).visibility =
+            if (!permissionNeedsHandling && backgroundLocationNeedsHandling) View.VISIBLE else View.GONE
         updateButton()
     }
 
     private fun requestPermissions() {
-        when {
-            Build.VERSION.SDK_INT >= 30 -> requestPermissions(
-                permissions.toSet().minus("android.permission.ACCESS_BACKGROUND_LOCATION").toTypedArray(), ++permissionRequestCode
-            )
-            Build.VERSION.SDK_INT >= 23 -> requestPermissions(permissions, ++permissionRequestCode)
+        if (Build.VERSION.SDK_INT >= 23) {
+            requestPermissions(permissions, ++permissionRequestCode)
+        }
+    }
+
+    private fun requestBackgroundLocation() {
+        if (Build.VERSION.SDK_INT >= 23) {
+            requestPermissions(arrayOf("android.permission.ACCESS_BACKGROUND_LOCATION"), ++permissionRequestCode)
         }
     }
 
     override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
         super.onRequestPermissionsResult(requestCode, permissions, grantResults)
-        if (requestCode == this.permissionRequestCode) {
-            when {
-                Build.VERSION.SDK_INT >= 30 && permissions.contains("android.permission.ACCESS_FINE_LOCATION") ->
-                    requestPermissions(
-                        arrayOf("android.permission.ACCESS_BACKGROUND_LOCATION"),
-                        ++permissionRequestCode
-                    )
-                else -> checkPermissions()
-            }
-        }
+        if (requestCode == this.permissionRequestCode) checkPermissions()
     }
 
     // Bluetooth
diff --git a/play-services-nearby-core-ui/src/main/kotlin/org/microg/gms/nearby/core/ui/ExposureNotificationsPreferencesFragment.kt b/play-services-nearby-core-ui/src/main/kotlin/org/microg/gms/nearby/core/ui/ExposureNotificationsPreferencesFragment.kt
index df0731ff..537d46b0 100644
--- a/play-services-nearby-core-ui/src/main/kotlin/org/microg/gms/nearby/core/ui/ExposureNotificationsPreferencesFragment.kt
+++ b/play-services-nearby-core-ui/src/main/kotlin/org/microg/gms/nearby/core/ui/ExposureNotificationsPreferencesFragment.kt
@@ -8,12 +8,13 @@ package org.microg.gms.nearby.core.ui
 import android.bluetooth.BluetoothAdapter
 import android.content.Context.LOCATION_SERVICE
 import android.content.Intent
+import android.content.pm.PackageManager
 import android.location.LocationManager
+import android.os.Build
 import android.os.Bundle
 import android.os.Handler
 import android.provider.Settings
-import android.util.Log
-import android.view.View
+import androidx.core.content.ContextCompat
 import androidx.core.location.LocationManagerCompat
 import androidx.core.os.bundleOf
 import androidx.lifecycle.lifecycleScope
@@ -31,6 +32,7 @@ class ExposureNotificationsPreferencesFragment : PreferenceFragmentCompat() {
     private lateinit var exposureEnableInfo: Preference
     private lateinit var exposureBluetoothOff: Preference
     private lateinit var exposureLocationOff: Preference
+    private lateinit var exposureNearbyNotGranted: Preference
     private lateinit var exposureBluetoothUnsupported: Preference
     private lateinit var exposureBluetoothNoAdvertisement: Preference
     private lateinit var exposureApps: PreferenceCategory
@@ -41,6 +43,7 @@ class ExposureNotificationsPreferencesFragment : PreferenceFragmentCompat() {
     private val handler = Handler()
     private val updateStatusRunnable = Runnable { updateStatus() }
     private val updateContentRunnable = Runnable { updateContent() }
+    private var permissionRequestCode = 33
 
     override fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {
         addPreferencesFromResource(R.xml.preferences_exposure_notifications)
@@ -50,6 +53,7 @@ class ExposureNotificationsPreferencesFragment : PreferenceFragmentCompat() {
         exposureEnableInfo = preferenceScreen.findPreference("pref_exposure_enable_info") ?: exposureEnableInfo
         exposureBluetoothOff = preferenceScreen.findPreference("pref_exposure_error_bluetooth_off") ?: exposureBluetoothOff
         exposureLocationOff = preferenceScreen.findPreference("pref_exposure_error_location_off") ?: exposureLocationOff
+        exposureNearbyNotGranted = preferenceScreen.findPreference("pref_exposure_error_nearby_not_granted") ?: exposureNearbyNotGranted
         exposureBluetoothUnsupported = preferenceScreen.findPreference("pref_exposure_error_bluetooth_unsupported") ?: exposureBluetoothUnsupported
         exposureBluetoothNoAdvertisement = preferenceScreen.findPreference("pref_exposure_error_bluetooth_no_advertise") ?: exposureBluetoothNoAdvertisement
         exposureApps = preferenceScreen.findPreference("prefcat_exposure_apps") ?: exposureApps
@@ -80,12 +84,28 @@ class ExposureNotificationsPreferencesFragment : PreferenceFragmentCompat() {
             true
         }
 
+        exposureNearbyNotGranted.onPreferenceClickListener = Preference.OnPreferenceClickListener {
+            val nearbyPermissions = arrayOf("android.permission.BLUETOOTH_ADVERTISE", "android.permission.BLUETOOTH_SCAN")
+            requestPermissions(nearbyPermissions, ++permissionRequestCode)
+            true
+        }
+
         collectedRpis.onPreferenceClickListener = Preference.OnPreferenceClickListener {
             findNavController().navigate(requireContext(), R.id.openExposureRpis)
             true
         }
     }
 
+    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
+        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
+        if (requestCode == this.permissionRequestCode) {
+            updateStatus()
+            // Tell the NotifyService that it should update the notification
+            val intent = Intent(NOTIFICATION_UPDATE_ACTION)
+            requireContext().sendBroadcast(intent)
+        }
+    }
+
     override fun onResume() {
         super.onResume()
 
@@ -110,6 +130,12 @@ class ExposureNotificationsPreferencesFragment : PreferenceFragmentCompat() {
             val bluetoothSupported = ScannerService.isSupported(appContext)
             val advertisingSupported = if (bluetoothSupported == true) AdvertiserService.isSupported(appContext) else bluetoothSupported
 
+            val nearbyPermissions = arrayOf("android.permission.BLUETOOTH_ADVERTISE", "android.permission.BLUETOOTH_SCAN")
+            // Expresses implication (API 31+ → all new permissions granted) ≡ (¬API 31+ | all new permissions granted)
+            val nearbyPermissionsGranted = Build.VERSION.SDK_INT < 31 || nearbyPermissions.all {
+                ContextCompat.checkSelfPermission(appContext, it) == PackageManager.PERMISSION_GRANTED
+            }
+            exposureNearbyNotGranted.isVisible = enabled && !nearbyPermissionsGranted
             exposureLocationOff.isVisible = enabled && bluetoothSupported != false && !LocationManagerCompat.isLocationEnabled(appContext.getSystemService(LOCATION_SERVICE) as LocationManager)
             exposureBluetoothOff.isVisible = enabled && bluetoothSupported == null && !turningBluetoothOn
             exposureBluetoothUnsupported.isVisible = enabled && bluetoothSupported == false
@@ -120,7 +146,7 @@ class ExposureNotificationsPreferencesFragment : PreferenceFragmentCompat() {
     }
 
     private fun updateContent() {
-        val context = requireContext().applicationContext
+        val context = requireContext()
         lifecycleScope.launchWhenResumed {
             handler.postDelayed(updateContentRunnable, UPDATE_CONTENT_INTERVAL)
             val (apps, lastHourKeys, currentId) = ExposureDatabase.with(context) { database ->
diff --git a/play-services-nearby-core-ui/src/main/res/layout/exposure_notifications_confirm_activity.xml b/play-services-nearby-core-ui/src/main/res/layout/exposure_notifications_confirm_activity.xml
index f6d2d359..f13888d9 100644
--- a/play-services-nearby-core-ui/src/main/res/layout/exposure_notifications_confirm_activity.xml
+++ b/play-services-nearby-core-ui/src/main/res/layout/exposure_notifications_confirm_activity.xml
@@ -90,6 +90,54 @@
                     android:textColor="?android:attr/textColorPrimaryInverse" />
             </RelativeLayout>
 
+            <RelativeLayout
+                android:id="@+id/grant_background_location_view"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginBottom="8dp"
+                android:background="?attr/colorAccent"
+                android:clipToPadding="false"
+                android:paddingLeft="16dp"
+                android:paddingTop="16dp"
+                android:paddingRight="16dp"
+                android:paddingBottom="8dp"
+                android:visibility="gone"
+                tools:visibility="visible">
+
+                <ImageView
+                    android:id="@+id/grant_background_location_icon"
+                    android:layout_width="24dp"
+                    android:layout_height="24dp"
+                    android:layout_alignTop="@id/grant_background_location_summary"
+                    android:layout_alignBottom="@id/grant_background_location_summary"
+                    android:layout_alignParentLeft="true"
+                    android:layout_centerVertical="true"
+                    android:src="@drawable/ic_outline_location_on"
+                    app:tint="?attr/colorPrimary" />
+
+                <TextView
+                    android:id="@+id/grant_background_location_summary"
+                    style="@style/TextAppearance.AppCompat.Small.Inverse"
+                    android:layout_width="0dip"
+                    android:layout_height="wrap_content"
+                    android:layout_alignParentRight="true"
+                    android:layout_marginLeft="16dp"
+                    android:layout_toRightOf="@id/grant_background_location_icon"
+                    android:layout_weight="1"
+                    android:text="@string/exposure_grant_background_location_description"/>
+
+                <Button
+                    android:id="@+id/grant_background_location_button"
+                    style="@style/Widget.AppCompat.Button.Borderless"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_below="@id/grant_background_location_summary"
+                    android:layout_alignLeft="@id/grant_background_location_summary"
+                    android:layout_marginLeft="-16dp"
+                    android:text="@string/exposure_grant_background_location_button"
+                    android:textColor="?android:attr/textColorPrimaryInverse" />
+            </RelativeLayout>
+
             <RelativeLayout
                 android:id="@+id/enable_bluetooth_view"
                 android:layout_width="match_parent"
diff --git a/play-services-nearby-core-ui/src/main/res/values-de/strings.xml b/play-services-nearby-core-ui/src/main/res/values-de/strings.xml
index 6be1d2f9..838956ea 100644
--- a/play-services-nearby-core-ui/src/main/res/values-de/strings.xml
+++ b/play-services-nearby-core-ui/src/main/res/values-de/strings.xml
@@ -66,4 +66,8 @@ Deine Identität oder das Testergebnis werden nicht geteilt."</string>
     <string name="exposure_confirm_bluetooth_description">Bluetooth muss eingeschaltet sein.</string>
     <string name="exposure_confirm_location_description">Standortzugriff muss eingeschaltet sein.</string>
     <string name="exposure_confirm_button">Aktivieren</string>
+    <string name="pref_exposure_error_nearby_not_granted_title">Neue Berechtigung benötigt</string>
+    <string name="pref_exposure_error_nearby_not_granted_description">Tippe hier um die benötigten Berechtigungen zu erteilen</string>
+    <string name="exposure_grant_background_location_description">Fast geschafft! Du musst den Zugriff auf den Standort im Hintergrund erlauben indem du auf dem nächsten Bildschirm \'Immer zulassen\' auswählst und dann hierher zurück kommst.</string>
+    <string name="exposure_grant_background_location_button">Einstellungen Öffnen</string>
 </resources>
diff --git a/play-services-nearby-core-ui/src/main/res/values/strings.xml b/play-services-nearby-core-ui/src/main/res/values/strings.xml
index ddf2dfcc..8d66adcf 100644
--- a/play-services-nearby-core-ui/src/main/res/values/strings.xml
+++ b/play-services-nearby-core-ui/src/main/res/values/strings.xml
@@ -76,4 +76,8 @@ Your identity or test result won&apos;t be shared with other people."</string>
     <string name="exposure_confirm_bluetooth_description">Bluetooth needs to be enabled.</string>
     <string name="exposure_confirm_location_description">Location access is required.</string>
     <string name="exposure_confirm_button">Enable</string>
+    <string name="pref_exposure_error_nearby_not_granted_title">New Permissions required</string>
+    <string name="pref_exposure_error_nearby_not_granted_description">Tap to grant required permissions to Exposure Notifications</string>
+    <string name="exposure_grant_background_location_description">Almost there! You will need to enable background location access by selecting the \'Allow all the time\' option on the next screen. Then press back.</string>
+    <string name="exposure_grant_background_location_button">Update Settings</string>
 </resources>
diff --git a/play-services-nearby-core-ui/src/main/res/xml/preferences_exposure_notifications.xml b/play-services-nearby-core-ui/src/main/res/xml/preferences_exposure_notifications.xml
index 6c04ef7c..8981daa7 100644
--- a/play-services-nearby-core-ui/src/main/res/xml/preferences_exposure_notifications.xml
+++ b/play-services-nearby-core-ui/src/main/res/xml/preferences_exposure_notifications.xml
@@ -31,6 +31,14 @@
         app:isPreferenceVisible="false"
         tools:isPreferenceVisible="true" />
 
+    <Preference
+        android:icon="@drawable/ic_info_outline"
+        android:key="pref_exposure_error_nearby_not_granted"
+        android:title="@string/pref_exposure_error_nearby_not_granted_title"
+        android:summary="@string/pref_exposure_error_nearby_not_granted_description"
+        app:isPreferenceVisible="false"
+        tools:isPreferenceVisible="true" />
+
     <Preference
         android:icon="@drawable/ic_alert"
         android:key="pref_exposure_error_bluetooth_unsupported"
diff --git a/play-services-nearby-core/src/main/AndroidManifest.xml b/play-services-nearby-core/src/main/AndroidManifest.xml
index a9f717dc..f5e23792 100644
--- a/play-services-nearby-core/src/main/AndroidManifest.xml
+++ b/play-services-nearby-core/src/main/AndroidManifest.xml
@@ -37,7 +37,8 @@
 
         <service
             android:name="org.microg.gms.nearby.exposurenotification.ExposureNotificationService"
-            android:process=":persistent">
+            android:process=":persistent"
+            android:exported="true">
             <intent-filter>
                 <action android:name="com.google.android.gms.nearby.exposurenotification.START" />
             </intent-filter>
@@ -45,7 +46,8 @@
 
         <receiver
             android:name="org.microg.gms.nearby.exposurenotification.ServiceTrigger"
-            android:process=":persistent">
+            android:process=":persistent"
+            android:exported="true">
             <intent-filter>
                 <action android:name="android.intent.action.BOOT_COMPLETED" />
 
diff --git a/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/AdvertiserService.kt b/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/AdvertiserService.kt
index 396064ae..3c54678c 100644
--- a/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/AdvertiserService.kt
+++ b/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/AdvertiserService.kt
@@ -8,6 +8,7 @@ package org.microg.gms.nearby.exposurenotification
 import android.annotation.TargetApi
 import android.app.AlarmManager
 import android.app.PendingIntent
+import android.app.PendingIntent.FLAG_IMMUTABLE
 import android.app.PendingIntent.FLAG_ONE_SHOT
 import android.app.PendingIntent.FLAG_UPDATE_CURRENT
 import android.bluetooth.BluetoothAdapter.*
@@ -36,7 +37,7 @@ import java.util.*
 @TargetApi(21)
 @ForegroundServiceInfo("Exposure Notification")
 class AdvertiserService : LifecycleService() {
-    private val version = VERSION_1_0
+    private val version = VERSION_1_1
     private var advertising = false
     private var wantStartAdvertising = false
     private val advertiser: BluetoothLeAdvertiser?
@@ -147,7 +148,11 @@ class AdvertiserService : LifecycleService() {
                         .setTxPowerLevel(AdvertisingSetParameters.TX_POWER_LOW)
                         .setConnectable(false)
                         .build()
-                advertiser.startAdvertisingSet(params, data, null, null, null, setCallback as AdvertisingSetCallback)
+                try {
+                    advertiser.startAdvertisingSet(params, data, null, null, null, setCallback as AdvertisingSetCallback)
+                } catch (e: SecurityException) {
+                    Log.e(TAG, "Couldn't start advertising: Need android.permission.BLUETOOTH_ADVERTISE permission.", )
+                }
             } else {
                 nextSend = nextSend.coerceAtMost(180000)
                 val settings = Builder()
@@ -156,7 +161,11 @@ class AdvertiserService : LifecycleService() {
                         .setTxPowerLevel(ADVERTISE_TX_POWER_LOW)
                         .setConnectable(false)
                         .build()
-                advertiser.startAdvertising(settings, data, callback)
+                try {
+                    advertiser.startAdvertising(settings, data, callback)
+                } catch (e: SecurityException) {
+                    Log.e(TAG, "Couldn't start advertising.", )
+                }
             }
             synchronized(this) { advertising = true }
             sendingBytes = payload
@@ -188,7 +197,7 @@ class AdvertiserService : LifecycleService() {
 
     private fun scheduleRestartAdvertising(nextSend: Long) {
         val intent = Intent(this, AdvertiserService::class.java).apply { action = ACTION_RESTART_ADVERTISING }
-        val pendingIntent = PendingIntent.getService(this, ACTION_RESTART_ADVERTISING.hashCode(), intent, FLAG_ONE_SHOT and FLAG_UPDATE_CURRENT)
+        val pendingIntent = PendingIntent.getService(this, ACTION_RESTART_ADVERTISING.hashCode(), intent, FLAG_ONE_SHOT or FLAG_UPDATE_CURRENT or FLAG_IMMUTABLE)
         when {
             Build.VERSION.SDK_INT >= 23 ->
                 alarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP, SystemClock.elapsedRealtime() + nextSend, pendingIntent)
@@ -204,9 +213,17 @@ class AdvertiserService : LifecycleService() {
         advertising = false
         if (Build.VERSION.SDK_INT >= 26) {
             wantStartAdvertising = true
-            advertiser?.stopAdvertisingSet(setCallback as AdvertisingSetCallback)
+            try {
+                advertiser?.stopAdvertisingSet(setCallback as AdvertisingSetCallback)
+            } catch (e: SecurityException) {
+                Log.i(TAG, "Tried calling stopAdvertisingSet without android.permission.BLUETOOTH_ADVERTISE permission.", )
+            }
         } else {
-            advertiser?.stopAdvertising(callback)
+            try {
+                advertiser?.stopAdvertising(callback)
+            } catch (e: SecurityException) {
+                Log.i(TAG, "stopAdvertising() failed with a SecurityException. Maybe some permissions are missing?", )
+            }
         }
         handler.postDelayed(startLaterRunnable, 1000)
     }
diff --git a/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/CleanupService.kt b/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/CleanupService.kt
index 95804b97..c313e91f 100644
--- a/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/CleanupService.kt
+++ b/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/CleanupService.kt
@@ -7,6 +7,9 @@ package org.microg.gms.nearby.exposurenotification
 
 import android.app.AlarmManager
 import android.app.PendingIntent
+import android.app.PendingIntent.FLAG_IMMUTABLE
+import android.app.PendingIntent.FLAG_ONE_SHOT
+import android.app.PendingIntent.FLAG_UPDATE_CURRENT
 import android.content.Context
 import android.content.Intent
 import android.util.Log
@@ -47,7 +50,7 @@ class CleanupService : LifecycleService() {
 
     fun stop() {
         val alarmManager = getSystemService(Context.ALARM_SERVICE) as AlarmManager
-        val pendingIntent = PendingIntent.getService(applicationContext, CleanupService::class.java.name.hashCode(), Intent(applicationContext, CleanupService::class.java), PendingIntent.FLAG_ONE_SHOT or PendingIntent.FLAG_UPDATE_CURRENT)
+        val pendingIntent = PendingIntent.getService(applicationContext, CleanupService::class.java.name.hashCode(), Intent(applicationContext, CleanupService::class.java), FLAG_ONE_SHOT or FLAG_UPDATE_CURRENT or FLAG_IMMUTABLE)
         alarmManager.set(AlarmManager.RTC, ExposurePreferences(this).lastCleanup + CLEANUP_INTERVAL, pendingIntent)
         stopSelf()
     }
diff --git a/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/Constants.kt b/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/Constants.kt
index ca695aac..2f429384 100644
--- a/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/Constants.kt
+++ b/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/Constants.kt
@@ -42,3 +42,5 @@ const val CLEANUP_INTERVAL = 24 * 60 * 60 * 1000L
 
 const val VERSION_1_0: Byte = 0x40
 const val VERSION_1_1: Byte = 0x50
+
+const val NOTIFICATION_UPDATE_ACTION = "org.microg.gms.nearby.UPDATE_NOTIFICATION"
diff --git a/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/ExposureDatabase.kt b/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/ExposureDatabase.kt
index 1dfb6114..6c340751 100644
--- a/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/ExposureDatabase.kt
+++ b/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/ExposureDatabase.kt
@@ -18,10 +18,7 @@ import android.os.Parcel
 import android.os.Parcelable
 import android.util.Log
 import androidx.core.content.FileProvider
-import com.google.android.gms.nearby.exposurenotification.CalibrationConfidence
-import com.google.android.gms.nearby.exposurenotification.DiagnosisKeysDataMapping
-import com.google.android.gms.nearby.exposurenotification.ExposureConfiguration
-import com.google.android.gms.nearby.exposurenotification.TemporaryExposureKey
+import com.google.android.gms.nearby.exposurenotification.*
 import kotlinx.coroutines.*
 import okio.ByteString
 import org.microg.gms.common.PackageUtils
@@ -71,13 +68,13 @@ class ExposureDatabase private constructor(private val context: Context) : SQLit
             db.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS index_${TABLE_TOKENS}_package_token ON $TABLE_TOKENS(package, token);")
             db.execSQL("CREATE TABLE IF NOT EXISTS $TABLE_TEK_CHECK_SINGLE(tcsid INTEGER PRIMARY KEY, keyData BLOB NOT NULL, rollingStartNumber INTEGER NOT NULL, rollingPeriod INTEGER NOT NULL, matched INTEGER);")
             db.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS index_${TABLE_TEK_CHECK_SINGLE}_key ON $TABLE_TEK_CHECK_SINGLE(keyData, rollingStartNumber, rollingPeriod);")
-            db.execSQL("CREATE TABLE IF NOT EXISTS $TABLE_TEK_CHECK_SINGLE_TOKEN(tcsid INTEGER REFERENCES $TABLE_TEK_CHECK_SINGLE(tcsid) ON DELETE CASCADE, tid INTEGER REFERENCES $TABLE_TOKENS(tid) ON DELETE CASCADE, transmissionRiskLevel INTEGER NOT NULL, UNIQUE(tcsid, tid));")
+            db.execSQL("CREATE TABLE IF NOT EXISTS $TABLE_TEK_CHECK_SINGLE_TOKEN(tcsid INTEGER REFERENCES $TABLE_TEK_CHECK_SINGLE(tcsid) ON DELETE CASCADE, tid INTEGER REFERENCES $TABLE_TOKENS(tid) ON DELETE CASCADE, transmissionRiskLevel INTEGER NOT NULL, reportType INTEGER NOT NULL, daysSinceOnsetOfSymptoms INTEGER NOT NULL, UNIQUE(tcsid, tid));")
             db.execSQL("CREATE INDEX IF NOT EXISTS index_${TABLE_TEK_CHECK_SINGLE_TOKEN}_tid ON $TABLE_TEK_CHECK_SINGLE_TOKEN(tid);")
             db.execSQL("CREATE TABLE IF NOT EXISTS $TABLE_TEK_CHECK_FILE(tcfid INTEGER PRIMARY KEY, hash TEXT NOT NULL, endTimestamp INTEGER NOT NULL, keys INTEGER NOT NULL);")
             db.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS index_${TABLE_TEK_CHECK_FILE}_hash ON $TABLE_TEK_CHECK_FILE(hash);")
             db.execSQL("CREATE TABLE IF NOT EXISTS $TABLE_TEK_CHECK_FILE_TOKEN(tcfid INTEGER REFERENCES $TABLE_TEK_CHECK_FILE(tcfid) ON DELETE CASCADE, tid INTEGER REFERENCES $TABLE_TOKENS(tid) ON DELETE CASCADE, UNIQUE(tcfid, tid));")
             db.execSQL("CREATE INDEX IF NOT EXISTS index_${TABLE_TEK_CHECK_FILE_TOKEN}_tid ON $TABLE_TEK_CHECK_FILE_TOKEN(tid);")
-            db.execSQL("CREATE TABLE IF NOT EXISTS $TABLE_TEK_CHECK_FILE_MATCH(tcfid INTEGER REFERENCES $TABLE_TEK_CHECK_FILE(tcfid) ON DELETE CASCADE, keyData BLOB NOT NULL, rollingStartNumber INTEGER NOT NULL, rollingPeriod INTEGER NOT NULL, transmissionRiskLevel INTEGER NOT NULL, UNIQUE(tcfid, keyData, rollingStartNumber, rollingPeriod));")
+            db.execSQL("CREATE TABLE IF NOT EXISTS $TABLE_TEK_CHECK_FILE_MATCH(tcfid INTEGER REFERENCES $TABLE_TEK_CHECK_FILE(tcfid) ON DELETE CASCADE, keyData BLOB NOT NULL, rollingStartNumber INTEGER NOT NULL, rollingPeriod INTEGER NOT NULL, transmissionRiskLevel INTEGER NOT NULL, reportType INTEGER NOT NULL, daysSinceOnsetOfSymptoms INTEGER NOT NULL, UNIQUE(tcfid, keyData, rollingStartNumber, rollingPeriod));")
             db.execSQL("CREATE INDEX IF NOT EXISTS index_${TABLE_TEK_CHECK_FILE_MATCH}_tcfid ON $TABLE_TEK_CHECK_FILE_MATCH(tcfid);")
             db.execSQL("CREATE INDEX IF NOT EXISTS index_${TABLE_TEK_CHECK_FILE_MATCH}_key ON $TABLE_TEK_CHECK_FILE_MATCH(keyData, rollingStartNumber, rollingPeriod);")
         }
@@ -89,6 +86,13 @@ class ExposureDatabase private constructor(private val context: Context) : SQLit
             Log.d(TAG, "Altering tables for version >= 7")
             db.execSQL("ALTER TABLE $TABLE_TOKENS ADD COLUMN diagnosisKeysDataMap BLOB;")
         }
+        if (oldVersion in 5 until 11) {
+            Log.d(TAG, "Altering tables for version >= 11")
+            db.execSQL("ALTER TABLE $TABLE_TEK_CHECK_SINGLE_TOKEN ADD COLUMN reportType INTEGER NOT NULL DEFAULT ${ReportType.UNKNOWN};")
+            db.execSQL("ALTER TABLE $TABLE_TEK_CHECK_SINGLE_TOKEN ADD COLUMN daysSinceOnsetOfSymptoms INTEGER NOT NULL DEFAULT ${TemporaryExposureKey.DAYS_SINCE_ONSET_OF_SYMPTOMS_UNKNOWN};")
+            db.execSQL("ALTER TABLE $TABLE_TEK_CHECK_FILE_MATCH ADD COLUMN reportType INTEGER NOT NULL DEFAULT ${ReportType.UNKNOWN};")
+            db.execSQL("ALTER TABLE $TABLE_TEK_CHECK_FILE_MATCH ADD COLUMN daysSinceOnsetOfSymptoms INTEGER NOT NULL DEFAULT ${TemporaryExposureKey.DAYS_SINCE_ONSET_OF_SYMPTOMS_UNKNOWN};")
+        }
         if (oldVersion in 1 until 5) {
             Log.d(TAG, "Dropping legacy tables from version < 5")
             db.execSQL("DROP TABLE IF EXISTS $TABLE_CONFIGURATIONS;")
@@ -126,6 +130,12 @@ class ExposureDatabase private constructor(private val context: Context) : SQLit
             Log.d(TAG, "Get rid of isEnabled log entries")
             db.delete(TABLE_APP_LOG, "method = ?", arrayOf("isEnabled"));
         }
+        if (oldVersion == 11) {
+            Log.d(TAG, "Fixing invalid rssi values from version 11 with release 0.2.23")
+            // Setting the RSSI to -75. This is obviously not the correct value, but is still way better estimate
+            // than 0, based on the measurements shown in https://github.com/microg/GmsCore/issues/1655
+            db.execSQL("UPDATE $TABLE_ADVERTISEMENTS SET rssi = -75 WHERE rssi = 0 AND duration > 0")
+        }
         Log.d(TAG, "Finished database upgrade")
     }
 
@@ -177,7 +187,7 @@ class ExposureDatabase private constructor(private val context: Context) : SQLit
     }
 
     fun noteAdvertisement(rpi: ByteArray, aem: ByteArray, rssi: Int, timestamp: Long = Date().time) = writableDatabase.run {
-        val update = compileStatement("UPDATE $TABLE_ADVERTISEMENTS SET rssi = ((rssi * duration) + (? * (? - timestamp - duration))) / (? - timestamp), duration = (? - timestamp) WHERE rpi = ? AND timestamp > ? AND timestamp < ?").run {
+        val update = compileStatement("UPDATE $TABLE_ADVERTISEMENTS SET rssi = IFNULL(((rssi * duration) + (? * MAX(0, ? - timestamp - duration))) / MAX(duration, ? - timestamp), -100), duration = MAX(duration, ? - timestamp) WHERE rpi = ? AND timestamp > ? AND timestamp < ?").run {
             bindLong(1, rssi.toLong())
             bindLong(2, timestamp)
             bindLong(3, timestamp)
@@ -284,6 +294,8 @@ class ExposureDatabase private constructor(private val context: Context) : SQLit
             put("tid", tid)
             put("tcsid", tcsid)
             put("transmissionRiskLevel", key.transmissionRiskLevel)
+            put("reportType", key.reportType)
+            put("daysSinceOnsetOfSymptoms", key.daysSinceOnsetOfSymptoms)
         })
     }
 
@@ -368,12 +380,14 @@ class ExposureDatabase private constructor(private val context: Context) : SQLit
             put("rollingStartNumber", key.rollingStartIntervalNumber)
             put("rollingPeriod", key.rollingPeriod)
             put("transmissionRiskLevel", key.transmissionRiskLevel)
+            put("reportType", key.reportType)
+            put("daysSinceOnsetOfSymptoms", key.daysSinceOnsetOfSymptoms)
         })
     }
 
     private fun listMatchedSingleDiagnosisKeys(tid: Long, database: SQLiteDatabase = readableDatabase) = database.run {
         rawQuery("""
-            SELECT $TABLE_TEK_CHECK_SINGLE.keyData, $TABLE_TEK_CHECK_SINGLE.rollingStartNumber, $TABLE_TEK_CHECK_SINGLE.rollingPeriod, $TABLE_TEK_CHECK_SINGLE_TOKEN.transmissionRiskLevel
+            SELECT $TABLE_TEK_CHECK_SINGLE.keyData, $TABLE_TEK_CHECK_SINGLE.rollingStartNumber, $TABLE_TEK_CHECK_SINGLE.rollingPeriod, $TABLE_TEK_CHECK_SINGLE_TOKEN.transmissionRiskLevel, $TABLE_TEK_CHECK_SINGLE_TOKEN.reportType, $TABLE_TEK_CHECK_SINGLE_TOKEN.daysSinceOnsetOfSymptoms
             FROM $TABLE_TEK_CHECK_SINGLE_TOKEN
             JOIN $TABLE_TEK_CHECK_SINGLE ON $TABLE_TEK_CHECK_SINGLE.tcsid = $TABLE_TEK_CHECK_SINGLE_TOKEN.tcsid
             WHERE 
@@ -387,6 +401,8 @@ class ExposureDatabase private constructor(private val context: Context) : SQLit
                         .setRollingStartIntervalNumber(cursor.getLong(1).toInt())
                         .setRollingPeriod(cursor.getLong(2).toInt())
                         .setTransmissionRiskLevel(cursor.getLong(3).toInt())
+                        .setReportType(cursor.getLong(4).toInt())
+                        .setDaysSinceOnsetOfSymptoms(cursor.getLong(5).toInt())
                         .build())
             }
             list
@@ -395,7 +411,7 @@ class ExposureDatabase private constructor(private val context: Context) : SQLit
 
     private fun listMatchedFileDiagnosisKeys(tid: Long, database: SQLiteDatabase = readableDatabase) = database.run {
         rawQuery("""
-            SELECT $TABLE_TEK_CHECK_FILE_MATCH.keyData, $TABLE_TEK_CHECK_FILE_MATCH.rollingStartNumber, $TABLE_TEK_CHECK_FILE_MATCH.rollingPeriod, $TABLE_TEK_CHECK_FILE_MATCH.transmissionRiskLevel
+            SELECT $TABLE_TEK_CHECK_FILE_MATCH.keyData, $TABLE_TEK_CHECK_FILE_MATCH.rollingStartNumber, $TABLE_TEK_CHECK_FILE_MATCH.rollingPeriod, $TABLE_TEK_CHECK_FILE_MATCH.transmissionRiskLevel, $TABLE_TEK_CHECK_FILE_MATCH.reportType, $TABLE_TEK_CHECK_FILE_MATCH.daysSinceOnsetOfSymptoms
             FROM $TABLE_TEK_CHECK_FILE_TOKEN
             JOIN $TABLE_TEK_CHECK_FILE_MATCH ON $TABLE_TEK_CHECK_FILE_MATCH.tcfid = $TABLE_TEK_CHECK_FILE_TOKEN.tcfid
             WHERE 
@@ -408,6 +424,8 @@ class ExposureDatabase private constructor(private val context: Context) : SQLit
                         .setRollingStartIntervalNumber(cursor.getLong(1).toInt())
                         .setRollingPeriod(cursor.getLong(2).toInt())
                         .setTransmissionRiskLevel(cursor.getLong(3).toInt())
+                        .setReportType(cursor.getLong(4).toInt())
+                        .setDaysSinceOnsetOfSymptoms(cursor.getLong(5).toInt())
                         .build())
             }
             list
@@ -823,7 +841,7 @@ class ExposureDatabase private constructor(private val context: Context) : SQLit
 
     companion object {
         private const val DB_NAME = "exposure.db"
-        private const val DB_VERSION = 10
+        private const val DB_VERSION = 12
         private const val DB_SIZE_TOO_LARGE = 256L * 1024 * 1024
         private const val MAX_DELETE_TIME = 5000L
         private const val TABLE_ADVERTISEMENTS = "advertisements"
diff --git a/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/ExposureNotificationServiceImpl.kt b/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/ExposureNotificationServiceImpl.kt
index 4ea375ee..e4ebabaa 100644
--- a/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/ExposureNotificationServiceImpl.kt
+++ b/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/ExposureNotificationServiceImpl.kt
@@ -106,7 +106,7 @@ class ExposureNotificationServiceImpl(private val context: Context, private val
             Log.w(TAG, e)
         }
         Log.d(TAG, "Pending: $intent")
-        val pi = PendingIntent.getActivity(context, permission.hashCode(), intent, PendingIntent.FLAG_ONE_SHOT)
+        val pi = PendingIntent.getActivity(context, permission.hashCode(), intent, PendingIntent.FLAG_ONE_SHOT or PendingIntent.FLAG_IMMUTABLE)
         Log.d(TAG, "Pending: $pi")
         return pi
     }
@@ -277,9 +277,9 @@ class ExposureNotificationServiceImpl(private val context: Context, private val
         }
 
         ExposureSummary.ExposureSummaryBuilder()
-                .setDaysSinceLastExposure(exposures.map { it.daysSinceExposure }.min()?.toInt() ?: 0)
+                .setDaysSinceLastExposure(exposures.map { it.daysSinceExposure }.minOrNull()?.toInt() ?: 0)
                 .setMatchedKeyCount(exposures.map { it.key }.distinct().size)
-                .setMaximumRiskScore(exposures.map { it.getRiskScore(configuration) }.max()?.toInt() ?: 0)
+                .setMaximumRiskScore(exposures.map { it.getRiskScore(configuration) }.maxOrNull()?.toInt() ?: 0)
                 .setAttenuationDurations(intArrayOf(
                         exposures.map { it.getAttenuationDurations(configuration)[0] }.sum(),
                         exposures.map { it.getAttenuationDurations(configuration)[1] }.sum(),
@@ -784,7 +784,7 @@ class ExposureNotificationServiceImpl(private val context: Context, private val
         }
     }
 
-    override fun onTransact(code: Int, data: Parcel, reply: Parcel?, flags: Int): Boolean = warnOnTransactionIssues(TAG, code, reply, flags) { super.onTransact(code, data, reply, flags) }
+    override fun onTransact(code: Int, data: Parcel, reply: Parcel?, flags: Int): Boolean = warnOnTransactionIssues(code, reply, flags) { super.onTransact(code, data, reply, flags) }
 
     companion object {
         private val tempGrantedPermissions: MutableSet<Pair<String, String>> = hashSetOf()
diff --git a/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/NotifyService.kt b/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/NotifyService.kt
index 48682281..857738ce 100644
--- a/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/NotifyService.kt
+++ b/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/NotifyService.kt
@@ -7,11 +7,14 @@ package org.microg.gms.nearby.exposurenotification
 
 import android.annotation.TargetApi
 import android.app.*
+import android.app.PendingIntent.FLAG_IMMUTABLE
+import android.app.PendingIntent.FLAG_UPDATE_CURRENT
 import android.bluetooth.BluetoothAdapter
 import android.content.BroadcastReceiver
 import android.content.Context
 import android.content.Intent
 import android.content.IntentFilter
+import android.content.pm.PackageManager
 import android.graphics.Color
 import android.location.LocationManager
 import android.os.Build
@@ -53,9 +56,14 @@ class NotifyService : LifecycleService() {
     private fun updateNotification() {
         val location = !LocationManagerCompat.isLocationEnabled(getSystemService(Context.LOCATION_SERVICE) as LocationManager)
         val bluetooth = BluetoothAdapter.getDefaultAdapter()?.state.let { it != BluetoothAdapter.STATE_ON && it != BluetoothAdapter.STATE_TURNING_ON }
-        Log.d(TAG, "notify: location: $location, bluetooth: $bluetooth")
+        val nearbyPermissions = arrayOf("android.permission.BLUETOOTH_ADVERTISE", "android.permission.BLUETOOTH_SCAN")
+        val permissionNeedsHandling = Build.VERSION.SDK_INT >= 31 && nearbyPermissions.any {
+            ContextCompat.checkSelfPermission(this, it) != PackageManager.PERMISSION_GRANTED
+        }
+        Log.d( TAG,"notify: location: $location, bluetooth: $bluetooth, permissionNeedsHandling: $permissionNeedsHandling")
 
         val text: String = when {
+            permissionNeedsHandling -> getString(R.string.exposure_notify_off_nearby)
             location && bluetooth -> getString(R.string.exposure_notify_off_bluetooth_location)
             location -> getString(R.string.exposure_notify_off_location)
             bluetooth -> getString(R.string.exposure_notify_off_bluetooth)
@@ -90,7 +98,7 @@ class NotifyService : LifecycleService() {
             try {
                 val intent = Intent(Constants.ACTION_EXPOSURE_NOTIFICATION_SETTINGS).apply { `package` = packageName }
                 intent.resolveActivity(packageManager)
-                setContentIntent(PendingIntent.getActivity(this@NotifyService, notificationId, Intent(Constants.ACTION_EXPOSURE_NOTIFICATION_SETTINGS).apply { `package` = packageName }, PendingIntent.FLAG_UPDATE_CURRENT))
+                setContentIntent(PendingIntent.getActivity(this@NotifyService, notificationId, Intent(Constants.ACTION_EXPOSURE_NOTIFICATION_SETTINGS).apply { `package` = packageName }, FLAG_UPDATE_CURRENT or FLAG_IMMUTABLE))
             } catch (e: Exception) {
                 // Ignore
             }
@@ -105,6 +113,7 @@ class NotifyService : LifecycleService() {
             addAction(BluetoothAdapter.ACTION_STATE_CHANGED)
             if (Build.VERSION.SDK_INT >= 19) addAction(LocationManager.MODE_CHANGED_ACTION)
             addAction(LocationManager.PROVIDERS_CHANGED_ACTION)
+            addAction(NOTIFICATION_UPDATE_ACTION)
         })
     }
 
diff --git a/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/ScannerService.kt b/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/ScannerService.kt
index addc6c8c..04e0c146 100644
--- a/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/ScannerService.kt
+++ b/play-services-nearby-core/src/main/kotlin/org/microg/gms/nearby/exposurenotification/ScannerService.kt
@@ -9,6 +9,9 @@ import android.annotation.SuppressLint
 import android.annotation.TargetApi
 import android.app.AlarmManager
 import android.app.PendingIntent
+import android.app.PendingIntent.FLAG_IMMUTABLE
+import android.app.PendingIntent.FLAG_ONE_SHOT
+import android.app.PendingIntent.FLAG_UPDATE_CURRENT
 import android.bluetooth.BluetoothAdapter.*
 import android.bluetooth.le.*
 import android.content.BroadcastReceiver
@@ -121,14 +124,18 @@ class ScannerService : LifecycleService() {
         Log.i(TAG, "Starting scanner for service $SERVICE_UUID for ${SCANNING_TIME_MS}ms")
         seenAdvertisements = 0
         wakeLock.acquire()
-        scanner.startScan(
-                listOf(ScanFilter.Builder()
-                        .setServiceUuid(SERVICE_UUID)
-                        .setServiceData(SERVICE_UUID, byteArrayOf(0), byteArrayOf(0))
-                        .build()),
-                ScanSettings.Builder().build(),
-                callback
-        )
+        try {
+            scanner.startScan(
+                    listOf(ScanFilter.Builder()
+                            .setServiceUuid(SERVICE_UUID)
+                            .setServiceData(SERVICE_UUID, byteArrayOf(0), byteArrayOf(0))
+                            .build()),
+                    ScanSettings.Builder().build(),
+                    callback
+            )
+        } catch (e: SecurityException) {
+            Log.e(TAG, "Couldn't start ScannerService, need android.permission.BLUETOOTH_SCAN permission.")
+        }
         scanning = true
         lastStartTime = System.currentTimeMillis()
         handler.postDelayed(stopLaterRunnable, SCANNING_TIME_MS)
@@ -149,7 +156,7 @@ class ScannerService : LifecycleService() {
 
     private fun scheduleStartScan(nextScan: Long) {
         val intent = Intent(this, ScannerService::class.java)
-        val pendingIntent = PendingIntent.getService(this, ScannerService::class.java.hashCode(), intent, PendingIntent.FLAG_ONE_SHOT and PendingIntent.FLAG_UPDATE_CURRENT)
+        val pendingIntent = PendingIntent.getService(this, ScannerService::class.java.hashCode(), intent, FLAG_ONE_SHOT or FLAG_UPDATE_CURRENT or FLAG_IMMUTABLE)
         if (Build.VERSION.SDK_INT >= 23) {
             // Note: there is no setWindowAndAllowWhileIdle()
             alarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP, SystemClock.elapsedRealtime() + nextScan, pendingIntent)
diff --git a/play-services-nearby-core/src/main/res/values/strings.xml b/play-services-nearby-core/src/main/res/values/strings.xml
index 8cd79f35..16c274d9 100644
--- a/play-services-nearby-core/src/main/res/values/strings.xml
+++ b/play-services-nearby-core/src/main/res/values/strings.xml
@@ -7,4 +7,5 @@
     <string name="exposure_notify_off_bluetooth">Bluetooth needs to be enabled to receive Exposure Notifications.</string>
     <string name="exposure_notify_off_location">Location access is required to receive Exposure Notifications.</string>
     <string name="exposure_notify_off_bluetooth_location">Bluetooth and Location access need to be enabled to receive Exposure Notifications.</string>
+    <string name="exposure_notify_off_nearby">Exposure Notifications require additional permissions to work</string>
 </resources>
diff --git a/play-services-nearby/build.gradle b/play-services-nearby/build.gradle
index 6d2d5a1f..ec6102c7 100644
--- a/play-services-nearby/build.gradle
+++ b/play-services-nearby/build.gradle
@@ -1,5 +1,5 @@
 /*
- * SPDX-FileCopyrightText: 2020, microG Project Team
+ * SPDX-FileCopyrightText: 2020 microG Project Team
  * SPDX-License-Identifier: Apache-2.0
  */
 
@@ -28,6 +28,12 @@ apply from: '../gradle/publish-android.gradle'
 description = 'microG implementation of play-services-nearby'
 
 dependencies {
-    api project(':play-services-base')
     api project(':play-services-nearby-api')
+
+    // Dependencies from play-services-nearby:18.0.2
+    api "androidx.collection:collection:1.0.0"
+    api "androidx.core:core:1.0.0"
+    api project(':play-services-base')
+    api project(':play-services-basement')
+    api project(':play-services-tasks')
 }
diff --git a/play-services-tapandpay-core/src/main/kotlin/org/microg/gms/tapandpay/TapAndPayService.kt b/play-services-tapandpay-core/src/main/kotlin/org/microg/gms/tapandpay/TapAndPayService.kt
index 0a08696b..0c894b48 100644
--- a/play-services-tapandpay-core/src/main/kotlin/org/microg/gms/tapandpay/TapAndPayService.kt
+++ b/play-services-tapandpay-core/src/main/kotlin/org/microg/gms/tapandpay/TapAndPayService.kt
@@ -7,8 +7,10 @@ package org.microg.gms.tapandpay
 import android.os.Parcel
 import android.os.RemoteException
 import android.util.Log
+import com.google.android.gms.common.Feature
 import com.google.android.gms.common.api.CommonStatusCodes
 import com.google.android.gms.common.api.Status
+import com.google.android.gms.common.internal.ConnectionInfo
 import com.google.android.gms.common.internal.GetServiceRequest
 import com.google.android.gms.common.internal.IGmsCallbacks
 import com.google.android.gms.tapandpay.TapAndPayStatusCodes.TAP_AND_PAY_NO_ACTIVE_WALLET
@@ -21,7 +23,11 @@ private const val TAG = "GmsTapAndPay"
 
 class TapAndPayService : BaseService(TAG, GmsService.TAP_AND_PAY) {
     override fun handleServiceRequest(callback: IGmsCallbacks, request: GetServiceRequest, service: GmsService) {
-        callback.onPostInitComplete(CommonStatusCodes.SUCCESS, TapAndPayImpl(), null)
+        callback.onPostInitCompleteWithConnectionInfo(CommonStatusCodes.SUCCESS, TapAndPayImpl(), ConnectionInfo().apply {
+            features = arrayOf(
+                Feature("tapandpay_token_listing", 3)
+            )
+        })
     }
 }
 
diff --git a/play-services-tasks/src/main/java/com/google/android/gms/tasks/CancellationToken.java b/play-services-tasks/src/main/java/com/google/android/gms/tasks/CancellationToken.java
index 00563c5b..ecdd77ca 100644
--- a/play-services-tasks/src/main/java/com/google/android/gms/tasks/CancellationToken.java
+++ b/play-services-tasks/src/main/java/com/google/android/gms/tasks/CancellationToken.java
@@ -1,5 +1,5 @@
 /*
- * SPDX-FileCopyrightText: 2020, microG Project Team
+ * SPDX-FileCopyrightText: 2020 microG Project Team
  * SPDX-License-Identifier: Apache-2.0 AND CC-BY-4.0
  * Notice: Portions of this file are reproduced from work created and shared by Google and used
  *         according to terms described in the Creative Commons 4.0 Attribution License.
@@ -10,6 +10,66 @@ package com.google.android.gms.tasks;
 
 import org.microg.gms.common.PublicApi;
 
+/**
+ * Propagates notification that operations should be canceled.
+ * <p/>
+ * Developers writing methods that return a Task should take a {@code CancellationToken} as a parameter if they wish to
+ * make the Task cancelable (see below code snippet). A {@code CancellationToken} can only be created by creating a new
+ * instance of {@link CancellationTokenSource}. {@code CancellationToken} is immutable and must be canceled by calling
+ * {@link CancellationTokenSource#cancel()} on the {@link CancellationTokenSource} that creates it. It can only be
+ * canceled once. If canceled, it should not be passed to future operations.
+ * <p/>
+ * When {@link CancellationTokenSource#cancel()} is called, all the Tasks with the {@code CancellationToken} from that
+ * {@link CancellationTokenSource} will be canceled. This operation only flags those Tasks as canceled, and the API
+ * author is responsible for stopping whatever the Task is actually doing to free up the resources.
+ * <p/>
+ * Cancellable {@link Task} example:
+ * <pre>
+ * public Task<Integer> doSomething(CancellationToken token) {
+ *
+ *     // Attach a listener that will be called once cancellation is requested.
+ *     token.onCanceledRequested(new OnTokenCanceledListener() {
+ *         &#64;Override
+ *         public void onCanceled() {
+ *             // Some other operations to cancel this Task, such as free resources...
+ *         }
+ *     });
+ *
+ *     final TaskCompletionSource<Integer> tcs = new TaskCompletionSource<>(token);
+ *
+ *     // do something...
+ *
+ * }
+ *
+ * CancellationTokenSource cts = new CancellationTokenSource();
+ * Task<Integer> task = doSomething(cts.getToken());
+ * cts.cancel();
+ * </pre>
+ * Cancellable {@link Task} example in {@link android.app.Activity} context:
+ * <pre>
+ * public class MyActivity extends Activity {
+ *     // ...
+ *
+ *     &#64;Override
+ *     public void onStart() {
+ *         super.onStart();
+ *
+ *         // Typically use one cancellation source per lifecycle.
+ *         cancellationSource = new TaskCancellationSource();
+ *
+ *         // That source's token can be passed to multiple calls.
+ *         doSomethingCancellable(cancellationSource.getToken())
+ *             .onSuccessTask(result -> doSomethingElse(result, cancellationSource.getToken()));
+ *     }
+ *
+ *     &#64;Override
+ *     public void onStop() {
+ *         super.onStop();
+ *         cancellationSource.cancel();
+ *     }
+ * }
+ * </pre>
+ */
 @PublicApi
 public abstract class CancellationToken {
     /**
diff --git a/play-services-tasks/src/main/java/com/google/android/gms/tasks/Continuation.java b/play-services-tasks/src/main/java/com/google/android/gms/tasks/Continuation.java
index 7057ca71..db26d0e9 100644
--- a/play-services-tasks/src/main/java/com/google/android/gms/tasks/Continuation.java
+++ b/play-services-tasks/src/main/java/com/google/android/gms/tasks/Continuation.java
@@ -1,5 +1,5 @@
 /*
- * SPDX-FileCopyrightText: 2016, microG Project Team
+ * SPDX-FileCopyrightText: 2016 microG Project Team
  * SPDX-License-Identifier: Apache-2.0 AND CC-BY-4.0
  * Notice: Portions of this file are reproduced from work created and shared by Google and used
  *         according to terms described in the Creative Commons 4.0 Attribution License.
@@ -28,8 +28,9 @@ public interface Continuation<TResult, TContinuationResult> {
      * <p/>
      * To suppress specific failures call {@link Task#getResult(Class)} and catch the exception
      * types of interest:
-     * <pre>task.continueWith(new Continuation<String, String>() {
-     *     @Override
+     * <pre>
+     * task.continueWith(new Continuation<String, String>() {
+     *     &#64;Override
      *     public String then(Task<String> task) {
      *         try {
      *             return task.getResult(IOException.class);
@@ -42,8 +43,9 @@ public interface Continuation<TResult, TContinuationResult> {
      * }</pre>
      * <p/>
      * To suppress all failures guard any calls to {@link Task#getResult()} with {@link Task#isSuccessful()}:
-     * <pre>task.continueWith(new Continuation<String, String>() {
-     *     @Override
+     * <pre>
+     * task.continueWith(new Continuation<String, String>() {
+     *     &#64;Override
      *     public String then(Task<String> task) {
      *         if (task.isSuccessful()) {
      *             return task.getResult();
diff --git a/play-services-tasks/src/main/java/com/google/android/gms/tasks/SuccessContinuation.java b/play-services-tasks/src/main/java/com/google/android/gms/tasks/SuccessContinuation.java
index 3feb598e..26b49e88 100644
--- a/play-services-tasks/src/main/java/com/google/android/gms/tasks/SuccessContinuation.java
+++ b/play-services-tasks/src/main/java/com/google/android/gms/tasks/SuccessContinuation.java
@@ -1,5 +1,5 @@
 /*
- * SPDX-FileCopyrightText: 2020, microG Project Team
+ * SPDX-FileCopyrightText: 2020 microG Project Team
  * SPDX-License-Identifier: Apache-2.0 AND CC-BY-4.0
  * Notice: Portions of this file are reproduced from work created and shared by Google and used
  *         according to terms described in the Creative Commons 4.0 Attribution License.
@@ -19,7 +19,21 @@ public interface SuccessContinuation<TResult, TContinuationResult> {
     /**
      * Returns the result of applying this SuccessContinuation to Task.
      * <p>
-     * The SuccessContinuation only happens then the Task is successful. If the previous Task fails, the onSuccessTask continuation will be skipped and failure listeners will be invoked.
+     * The SuccessContinuation only happens then the Task is successful. If the previous Task fails, the onSuccessTask
+     * continuation will be skipped and failure listeners will be invoked.
+     * <p>
+     * <pre>
+     * private Task<String> doSomething(String string) {
+     *     // do something
+     * }
+     * task.onSuccessTask(new SuccessContinuation<String, String>() {
+     *     &#64;NonNull
+     *     &#64;Override
+     *     public Task<String> then(String string) {
+     *         return doSomething(string);
+     *     }
+     * });
+     * </pre>
      *
      * @param result the result of completed Task
      * @throws Exception if the result couldn't be produced
diff --git a/play-services-tasks/src/main/java/com/google/android/gms/tasks/Task.java b/play-services-tasks/src/main/java/com/google/android/gms/tasks/Task.java
index f7223779..7cf39477 100644
--- a/play-services-tasks/src/main/java/com/google/android/gms/tasks/Task.java
+++ b/play-services-tasks/src/main/java/com/google/android/gms/tasks/Task.java
@@ -1,5 +1,5 @@
 /*
- * SPDX-FileCopyrightText: 2016, microG Project Team
+ * SPDX-FileCopyrightText: 2016 microG Project Team
  * SPDX-License-Identifier: Apache-2.0 AND CC-BY-4.0
  * Notice: Portions of this file are reproduced from work created and shared by Google and used
  *         according to terms described in the Creative Commons 4.0 Attribution License.
@@ -177,6 +177,8 @@ public abstract class Task<TResult> {
      * Continuation to this Task.
      * <p/>
      * The Continuation will be called on the main application thread.
+     * <p/>
+     * If the previous Task is canceled, the returned Task will also be canceled and the Continuation would not execute.
      *
      * @see Continuation#then(Task)
      */
@@ -186,6 +188,8 @@ public abstract class Task<TResult> {
 
     /**
      * Returns a new Task that will be completed with the result of applying the specified Continuation to this Task.
+     * <p/>
+     * If the previous Task is canceled, the returned Task will also be canceled and the Continuation would not execute.
      *
      * @param executor the executor to use to call the Continuation
      * @see Continuation#then(Task)
@@ -199,6 +203,9 @@ public abstract class Task<TResult> {
      * Continuation to this Task.
      * <p/>
      * The Continuation will be called on the main application thread.
+     * <p/>
+     * If the previous Task is canceled, the Continuation would still execute and task.isCanceled() is true can be
+     * observed in the Continuation.
      *
      * @see Continuation#then(Task)
      */
@@ -208,6 +215,9 @@ public abstract class Task<TResult> {
 
     /**
      * Returns a new Task that will be completed with the result of applying the specified Continuation to this Task.
+     * <p/>
+     * If the previous Task is canceled, the Continuation would still execute and task.isCanceled() is true can be
+     * observed in the Continuation.
      *
      * @param executor the executor to use to call the Continuation
      * @see Continuation#then(Task)
diff --git a/play-services-tasks/src/main/java/com/google/android/gms/tasks/TaskCompletionSource.java b/play-services-tasks/src/main/java/com/google/android/gms/tasks/TaskCompletionSource.java
index 00c4a972..4dbe5019 100644
--- a/play-services-tasks/src/main/java/com/google/android/gms/tasks/TaskCompletionSource.java
+++ b/play-services-tasks/src/main/java/com/google/android/gms/tasks/TaskCompletionSource.java
@@ -1,5 +1,5 @@
 /*
- * SPDX-FileCopyrightText: 2016, microG Project Team
+ * SPDX-FileCopyrightText: 2016 microG Project Team
  * SPDX-License-Identifier: Apache-2.0 AND CC-BY-4.0
  * Notice: Portions of this file are reproduced from work created and shared by Google and used
  *         according to terms described in the Creative Commons 4.0 Attribution License.
@@ -12,7 +12,34 @@ import org.microg.gms.common.PublicApi;
 import org.microg.gms.tasks.TaskImpl;
 
 /**
- * Provides the ability to create an incomplete {@link Task} and later complete it by either
+ * Provides the ability to create an incomplete {@link Task}-based APIs.
+ * <p/>
+ * Use a {@code TaskCompletionSource} to set a result or exception on a Task returned from an asynchronous API:
+ * <pre>
+ * public class MarcoPolo {
+ *     public static Task<String> marco(int delay) {
+ *         TaskCompletionSource<String> taskCompletionSource = new TaskCompletionSource<>();
+ *
+ *         new Handler().postDelayed(() -> taskCompletionSource.setResult("polo"), delay);
+ *
+ *         return taskCompletionSource.getTask();
+ *     }
+ * }
+ * </pre>
+ * And then your APIs can be used as any other {@link Task}-consuming APIs:
+ * <pre>
+ * public class MyActivity extends Activity {
+ *     &#64;Override
+ *     public void onStart() {
+ *         super.onStart();
+ *
+ *         marco(1000).addOnCompleteListener(
+ *             task -> Log.d(TAG, "got message after one second: " + task.getResult()));
+ *     }
+ * }
+ * </pre>
+ *
+ * and later complete it by either
  * calling {@link #setResult(TResult)} or {@link #setException(Exception)}.
  */
 @PublicApi
diff --git a/play-services-tasks/src/main/java/com/google/android/gms/tasks/Tasks.java b/play-services-tasks/src/main/java/com/google/android/gms/tasks/Tasks.java
index 43452562..eabc0553 100644
--- a/play-services-tasks/src/main/java/com/google/android/gms/tasks/Tasks.java
+++ b/play-services-tasks/src/main/java/com/google/android/gms/tasks/Tasks.java
@@ -1,5 +1,5 @@
 /*
- * SPDX-FileCopyrightText: 2016, microG Project Team
+ * SPDX-FileCopyrightText: 2016 microG Project Team
  * SPDX-License-Identifier: Apache-2.0 AND CC-BY-4.0
  * Notice: Portions of this file are reproduced from work created and shared by Google and used
  *         according to terms described in the Creative Commons 4.0 Attribution License.
@@ -8,15 +8,28 @@
 
 package com.google.android.gms.tasks;
 
+import android.os.Handler;
+import android.os.Looper;
+
 import org.microg.gms.common.PublicApi;
+import org.microg.gms.tasks.CancellationTokenImpl;
+import org.microg.gms.tasks.TaskImpl;
 
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
 import java.util.concurrent.Callable;
+import java.util.concurrent.CancellationException;
+import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Executor;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicReference;
 
 /**
  * {@link Task} utility methods.
@@ -32,9 +45,17 @@ public final class Tasks {
      * @throws InterruptedException if an interrupt occurs while waiting for the Task to complete
      * @throws TimeoutException     if the specified timeout is reached before the Task completes
      */
-    public static <TResult> TResult await(Task<TResult> task, long timeout, TimeUnit unit) {
-        // TODO
-        return null;
+    public static <TResult> TResult await(Task<TResult> task, long timeout, TimeUnit unit) throws ExecutionException, InterruptedException, TimeoutException {
+        if (task == null) throw new IllegalArgumentException("Task must not be null");
+        if (timeout <= 0) throw new IllegalArgumentException("Timeout must be positive");
+        if (unit == null) throw new IllegalArgumentException("TimeUnit must not be null");
+        if (task.isComplete()) return handleCompletedTask(task);
+        CountDownLatch latch = new CountDownLatch(1);
+        task.addOnCompleteListener(Runnable::run, completedTask -> latch.countDown());
+        if (latch.await(timeout, unit)) {
+            return handleCompletedTask(task);
+        }
+        throw new TimeoutException("Timed out waiting for Task");
     }
 
     /**
@@ -44,65 +65,242 @@ public final class Tasks {
      * @throws ExecutionException   if the Task fails
      * @throws InterruptedException if an interrupt occurs while waiting for the Task to complete
      */
-    public static <TResult> TResult await(Task<TResult> task) {
-        // TODO
-        return null;
+    public static <TResult> TResult await(Task<TResult> task) throws ExecutionException, InterruptedException {
+        if (Looper.getMainLooper().getThread() == Thread.currentThread())
+            throw new IllegalStateException("Must not be invoked on main thread");
+        if (task == null) throw new IllegalArgumentException("Task must not be null");
+        if (task.isComplete()) return handleCompletedTask(task);
+        CountDownLatch latch = new CountDownLatch(1);
+        task.addOnCompleteListener(Runnable::run, completedTask -> latch.countDown());
+        latch.await();
+        return handleCompletedTask(task);
+    }
+
+    private static <TResult> TResult handleCompletedTask(Task<TResult> task) throws ExecutionException {
+        if (task.isSuccessful()) {
+            return task.getResult();
+        }
+        if (task.isCanceled()) {
+            throw new CancellationException("Task is already canceled");
+        }
+        throw new ExecutionException(task.getException());
     }
 
     /**
-     * Returns a Task that will be completed with the result of the specified Callable.
+     * Returns a {@link Task} that will be completed with the result of the specified {@code Callable}.
      * <p/>
-     * The Callable will be called on the main application thread.
+     * If a non-{@link Exception} throwable is thrown in the callable, the {@link Task} will be failed with a
+     * {@link RuntimeException} whose cause is the original throwable.
+     * <p/>
+     * The {@code Callable} will be called on the main application thread.
+     *
+     * @deprecated Use {@link TaskCompletionSource} instead, which allows the caller to manage their own Executor.
      */
+    @Deprecated
     public static <TResult> Task<TResult> call(Callable<TResult> callable) {
-        // TODO
-        return null;
+        return call(TaskExecutors.MAIN_THREAD, callable);
     }
 
     /**
-     * Returns a Task that will be completed with the result of the specified Callable.
+     * Returns a {@link Task} that will be completed with the result of the specified {@code Callable}.
+     * <p/>
+     * If a non-{@link Exception} throwable is thrown in the callable, the {@link Task} will be failed with a
+     * {@link RuntimeException} whose cause is the original throwable.
      *
-     * @param executor the Executor to use to call the Callable
+     * @param executor the Executor to use to call the {@code Callable}
+     * @deprecated Use {@link TaskCompletionSource} instead, which allows the caller to manage their own Executor.
      */
+    @Deprecated
     public static <TResult> Task<TResult> call(Executor executor, Callable<TResult> callable) {
-        // TODO
-        return null;
+        if (executor == null) throw new IllegalArgumentException("Executor must not be null");
+        if (callable == null) throw new IllegalArgumentException("Callable must not be null");
+        TaskCompletionSource<TResult> taskCompletionSource = new TaskCompletionSource<>();
+        executor.execute(() -> {
+            try {
+                taskCompletionSource.setResult(callable.call());
+            } catch (Exception e) {
+                taskCompletionSource.trySetException(e);
+            } catch (Throwable t) {
+                taskCompletionSource.trySetException(new RuntimeException(t));
+            }
+        });
+        return taskCompletionSource.getTask();
+    }
+
+    /**
+     * Returns a canceled Task.
+     */
+    public static <TResult> Task<TResult> forCancelled() {
+        TaskImpl<TResult> task = new TaskImpl<>();
+        task.cancel();
+        return task;
     }
 
     /**
      * Returns a completed Task with the specified exception.
      */
     public static <TResult> Task<TResult> forException(Exception e) {
-        // TODO
-        return null;
+        TaskImpl<TResult> task = new TaskImpl<>();
+        task.setException(e);
+        return task;
     }
 
     /**
      * Returns a completed Task with the specified result.
      */
     public static <TResult> Task<TResult> forResult(TResult result) {
-        // TODO
-        return null;
+        TaskImpl<TResult> task = new TaskImpl<>();
+        task.setResult(result);
+        return task;
     }
 
     /**
      * Returns a Task that completes successfully when all of the specified Tasks complete
      * successfully. Does not accept nulls.
+     * <p/>
+     * The returned Task would fail if any of the provided Tasks fail. The returned Task would be set to canceled if
+     * any of the provided Tasks is canceled and no failure is detected.
      *
      * @throws NullPointerException if any of the provided Tasks are null
      */
     public static Task<Void> whenAll(Collection<? extends Task<?>> tasks) {
-        // TODO
-        return null;
+        if (tasks == null || tasks.isEmpty()) {
+            return forResult(null);
+        }
+        for (Task<?> task : tasks) {
+            if (task == null) throw new NullPointerException("null tasks are not accepted");
+        }
+        TaskImpl<Void> allTask = new TaskImpl<>();
+        AtomicInteger finishedTasks = new AtomicInteger(0);
+        AtomicInteger failedTasks = new AtomicInteger(0);
+        AtomicReference<Exception> exceptionReference = new AtomicReference<>(null);
+        AtomicBoolean isCancelled = new AtomicBoolean(false);
+        for (Task<?> task : tasks) {
+            task.addOnCompleteListener(Runnable::run, completedTask -> {
+                if (!completedTask.isSuccessful()) {
+                    if (completedTask.isCanceled()) {
+                        isCancelled.set(true);
+                    } else {
+                        exceptionReference.set(completedTask.getException());
+                        failedTasks.incrementAndGet();
+                    }
+                }
+                if (finishedTasks.incrementAndGet() != tasks.size()) return;
+                Exception exception = exceptionReference.get();
+                if (exception != null) {
+                    allTask.setException(new ExecutionException(failedTasks.get() + " out of " + tasks.size() + " underlying tasks failed", exception));
+                } else if (isCancelled.get()) {
+                    allTask.cancel();
+                } else {
+                    allTask.setResult(null);
+                }
+            });
+        }
+        return allTask;
     }
 
     /**
      * Returns a Task that completes successfully when all of the specified Tasks complete
      * successfully. Does not accept nulls.
+     * <p/>
+     * The returned Task would fail if any of the provided Tasks fail. The returned Task would be set to canceled if
+     * any of the provided Tasks is canceled and no failure is detected.
      *
      * @throws NullPointerException if any of the provided Tasks are null
      */
     public static Task<Void> whenAll(Task<?>... tasks) {
+        if (tasks == null || tasks.length == 0) {
+            return forResult(null);
+        }
         return whenAll(Arrays.asList(tasks));
     }
+
+    /**
+     * Returns a Task with a list of Tasks that completes successfully when all of the specified Tasks complete. This
+     * Task would always succeed even if any of the provided Tasks fail or canceled. Does not accept nulls.
+     *
+     * @throws NullPointerException if any of the provided Tasks are null
+     */
+    public static Task<List<Task<?>>> whenAllComplete(Task<?>... tasks) {
+        if (tasks == null || tasks.length == 0) {
+            return forResult(Collections.emptyList());
+        }
+        return whenAllComplete(Arrays.asList(tasks));
+    }
+
+    /**
+     * Returns a Task with a list of Tasks that completes successfully when all of the specified Tasks complete. This
+     * Task would always succeed even if any of the provided Tasks fail or canceled. Does not accept nulls.
+     *
+     * @throws NullPointerException if any of the provided Tasks are null
+     */
+    public static Task<List<Task<?>>> whenAllComplete(Collection<? extends Task<?>> tasks) {
+        if (tasks == null || tasks.isEmpty()) {
+            return forResult(Collections.emptyList());
+        }
+        return whenAll(tasks).continueWithTask(TaskExecutors.MAIN_THREAD, allTask -> forResult(new ArrayList<>(tasks)));
+    }
+
+    /**
+     * Returns a Task with a list of Task results that completes successfully when all of the specified Tasks complete
+     * successfully. This Task would fail if any of the provided Tasks fail. Does not accept nulls.
+     * <p/>
+     * This Task would be set to canceled if any of the provided Tasks is canceled and no failure is detected.
+     *
+     * @throws NullPointerException if any of the provided Tasks are null
+     */
+    public static <TResult> Task<List<TResult>> whenAllSuccess(Task<? extends TResult>... tasks) {
+        if (tasks == null || tasks.length == 0) {
+            return forResult(Collections.emptyList());
+        }
+        return whenAllSuccess(Arrays.asList(tasks));
+    }
+
+    /**
+     * Returns a Task with a list of Task results that completes successfully when all of the specified Tasks complete
+     * successfully. This Task would fail if any of the provided Tasks fail. Does not accept nulls.
+     * <p/>
+     * This Task would be set to canceled if any of the provided Tasks is canceled and no failure is detected.
+     *
+     * @throws NullPointerException if any of the provided Tasks are null
+     */
+    public static <TResult> Task<List<TResult>> whenAllSuccess(Collection<? extends Task<? extends TResult>> tasks) {
+        if (tasks == null || tasks.isEmpty()) {
+            return forResult(Collections.emptyList());
+        }
+        return whenAll(tasks).continueWithTask(TaskExecutors.MAIN_THREAD, allTask -> {
+            List<TResult> results = new ArrayList<>(tasks.size());
+            for (Task<? extends TResult> task : tasks) {
+                results.add(task.getResult());
+            }
+            return forResult(results);
+        });
+    }
+
+    /**
+     * Returns a new Task which will return a TimeoutException if a result is not returned within the specified time
+     * period.
+     *
+     * @return A new Task.
+     */
+    public static <T> Task<T> withTimeout(Task<T> task, long timeout, TimeUnit unit) {
+        if (task == null) throw new IllegalArgumentException("Task must not be null");
+        if (timeout <= 0) throw new IllegalArgumentException("Timeout must be positive");
+        if (unit == null) throw new IllegalArgumentException("TimeUnit must not be null");
+        CancellationTokenImpl cancellationToken = new CancellationTokenImpl();
+        TaskCompletionSource<T> taskCompletionSource = new TaskCompletionSource<>(cancellationToken);
+        Handler handler = new Handler(Looper.getMainLooper());
+        handler.postDelayed(() -> taskCompletionSource.trySetException(new TimeoutException()), unit.toMillis(timeout));
+        task.addOnCompleteListener(completedTask -> {
+            handler.removeCallbacksAndMessages(null);
+            if (completedTask.isSuccessful()) {
+                taskCompletionSource.trySetResult(completedTask.getResult());
+            } else if (completedTask.isCanceled()) {
+                cancellationToken.cancel();
+            } else {
+                taskCompletionSource.trySetException(completedTask.getException());
+            }
+        });
+        return taskCompletionSource.getTask();
+    }
 }
diff --git a/play-services-vision-api/build.gradle b/play-services-vision-api/build.gradle
index 0a5e6562..c25f5f50 100644
--- a/play-services-vision-api/build.gradle
+++ b/play-services-vision-api/build.gradle
@@ -31,6 +31,4 @@ dependencies {
     api project(':play-services-basement')
     api project(':play-services-base-api')
     api project(':play-services-vision-common-api')
-
-    implementation "androidx.annotation:annotation:$annotationVersion"
 }
diff --git a/play-services-vision-common-api/build.gradle b/play-services-vision-common-api/build.gradle
index feeb0e4f..63f5c10e 100644
--- a/play-services-vision-common-api/build.gradle
+++ b/play-services-vision-common-api/build.gradle
@@ -30,6 +30,4 @@ description = 'microG API for play-services-vision-common'
 dependencies {
     api project(':play-services-basement')
     api project(':play-services-base-api')
-
-    implementation "androidx.annotation:annotation:$annotationVersion"
 }
diff --git a/play-services-vision-common/build.gradle b/play-services-vision-common/build.gradle
index 6f19baab..a2ddace2 100644
--- a/play-services-vision-common/build.gradle
+++ b/play-services-vision-common/build.gradle
@@ -28,8 +28,12 @@ apply from: '../gradle/publish-android.gradle'
 description = 'microG implementation of play-services-vision-common'
 
 dependencies {
-    api project(':play-services-base')
-    api project(':play-services-vision-api')
+    api project(':play-services-vision-common-api')
 
-    implementation "androidx.annotation:annotation:$annotationVersion"
+    // Dependencies from play-services-vision-common:19.1.3
+    api project(':play-services-base')
+    api project(':play-services-basement')
+    //api project(':play-services-clearcut')
+    //api project(':play-services-flags')
+    //api project(':play-services-phenotype')
 }
diff --git a/play-services-vision/build.gradle b/play-services-vision/build.gradle
index 04f00b50..142d368c 100644
--- a/play-services-vision/build.gradle
+++ b/play-services-vision/build.gradle
@@ -28,7 +28,10 @@ apply from: '../gradle/publish-android.gradle'
 description = 'microG implementation of play-services-vision'
 
 dependencies {
-    api project(':play-services-base')
     api project(':play-services-vision-api')
+
+    // Dependencies from play-services-vision:20.1.3
+    api project(':play-services-base')
+    api project(':play-services-basement')
     api project(':play-services-vision-common')
 }
diff --git a/play-services-wearable/build.gradle b/play-services-wearable/build.gradle
index 2fd071bf..da924ef6 100644
--- a/play-services-wearable/build.gradle
+++ b/play-services-wearable/build.gradle
@@ -1,17 +1,6 @@
 /*
- * Copyright 2013-2015 microG Project Team
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * SPDX-FileCopyrightText: 2015 microG Project Team
+ * SPDX-License-Identifier: Apache-2.0
  */
 
 apply plugin: 'com.android.library'
@@ -37,8 +26,13 @@ android {
 }
 
 dependencies {
-    api project(':play-services-base')
     api project(':play-services-wearable-api')
     api project(':play-services-wearable-proto')
     implementation "com.squareup.wire:wire-runtime:$wireVersion"
+
+    // Dependencies from play-services-wearable:17.1.0
+    implementation "androidx.core:core:1.0.0"
+    api project(':play-services-base')
+    api project(':play-services-basement')
+    api project(':play-services-tasks')
 }
diff --git a/settings.gradle b/settings.gradle
index 23264525..c4b1c97c 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -10,6 +10,8 @@ include ':play-services-droidguard-api'
 include ':play-services-iid-api'
 include ':play-services-location-api'
 include ':play-services-nearby-api'
+include ':play-services-oss-licenses-api'
+include ':play-services-safetynet-api'
 include ':play-services-tapandpay-api'
 include ':play-services-vision-api'
 include ':play-services-vision-common-api'
@@ -17,41 +19,55 @@ include ':play-services-wearable-api'
 
 include ':play-services-api'
 
+include ':play-services-base'
+include ':play-services-cast'
+include ':play-services-droidguard'
+include ':play-services-gcm'
+include ':play-services-iid'
+include ':play-services-location'
+include ':play-services-nearby'
+include ':play-services-oss-licenses'
+include ':play-services-vision'
+include ':play-services-vision-common'
+include ':play-services-wearable'
+
+include ':play-services'
+
+include ':firebase-auth-api'
+include ':firebase-dynamic-links-api'
+
+// core only
+
 include ':play-services-core-proto'
+include ':play-services-droidguard-core-proto'
 include ':play-services-nearby-core-proto'
+include ':play-services-safetynet-core-proto'
 include ':play-services-wearable-proto'
 
+include ':play-services-basement-ktx'
+include ':play-services-tasks-ktx'
+
 include ':play-services-base-core'
+include ':play-services-chimera-core'
 include ':play-services-conscrypt-provider-core'
 include ':play-services-cronet-core'
+include ':play-services-droidguard-core'
 include ':play-services-location-core'
 include ':play-services-maps-core-mapbox'
 include ':play-services-maps-core-vtm'
 include ':play-services-maps-core-vtm:vtm-microg-theme'
 include ':play-services-nearby-core'
+include ':play-services-oss-licenses-core'
+include ':play-services-safetynet-core'
 include ':play-services-tapandpay-core'
 include ':play-services-vision-core'
 
 include ':play-services-base-core-ui'
+include ':play-services-droidguard-core-ui'
 include ':play-services-nearby-core-ui'
-
-include ':firebase-auth-api'
-include ':firebase-dynamic-links-api'
+include ':play-services-safetynet-core-ui'
 
 include ':firebase-auth-core'
 
 include ':play-services-core:microg-ui-tools' // Legacy
 include ':play-services-core'
-
-include ':play-services-base'
-include ':play-services-cast'
-include ':play-services-droidguard'
-include ':play-services-gcm'
-include ':play-services-iid'
-include ':play-services-location'
-include ':play-services-nearby'
-include ':play-services-vision'
-include ':play-services-vision-common'
-include ':play-services-wearable'
-
-include ':play-services'
